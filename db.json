{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/gal/source/js/bootstrap-hover-dropdown.min.js","path":"js/bootstrap-hover-dropdown.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/css/aos.css","path":"css/aos.css","modified":0,"renderable":1},{"_id":"themes/gal/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/mouse1.cur","path":"imgs/mouse1.cur","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/mouse2.cur","path":"imgs/mouse2.cur","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni.mp3","path":"imgs/oni.mp3","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/xsbg.gif","path":"imgs/xsbg.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/activate-power-mode.js","path":"js/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/aos.js","path":"js/aos.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/hs.js","path":"js/hs.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/oni.js","path":"js/oni.js","modified":0,"renderable":1},{"_id":"themes/gal/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/avatar.jpg","path":"imgs/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni1.jpg","path":"imgs/oni/oni1.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni2.jpg","path":"imgs/oni/oni2.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni3.jpg","path":"imgs/oni/oni3.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni4.jpg","path":"imgs/oni/oni4.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni5.jpg","path":"imgs/oni/oni5.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni6.jpg","path":"imgs/oni/oni6.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/1.png","path":"imgs/smilies/1.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/10.png","path":"imgs/smilies/10.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/11.png","path":"imgs/smilies/11.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/12.png","path":"imgs/smilies/12.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/13.png","path":"imgs/smilies/13.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/14.png","path":"imgs/smilies/14.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/15.png","path":"imgs/smilies/15.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/16.png","path":"imgs/smilies/16.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/17.png","path":"imgs/smilies/17.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/18.png","path":"imgs/smilies/18.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/19.png","path":"imgs/smilies/19.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/2.png","path":"imgs/smilies/2.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/20.png","path":"imgs/smilies/20.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/21.png","path":"imgs/smilies/21.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/22.png","path":"imgs/smilies/22.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/23.png","path":"imgs/smilies/23.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/24.png","path":"imgs/smilies/24.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/25.png","path":"imgs/smilies/25.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/3.png","path":"imgs/smilies/3.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/4.png","path":"imgs/smilies/4.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/5.png","path":"imgs/smilies/5.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/6.png","path":"imgs/smilies/6.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/7.png","path":"imgs/smilies/7.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/8.png","path":"imgs/smilies/8.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/9.png","path":"imgs/smilies/9.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/comment/gitment.js","path":"js/comment/gitment.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/comment/leancloud.js","path":"js/comment/leancloud.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-full.packed.js","path":"js/highslide/highslide-full.packed.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-ie6.css","path":"js/highslide/highslide-ie6.css","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.min.js","path":"js/highslide/highslide-with-gallery.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.packed.js","path":"js/highslide/highslide-with-gallery.packed.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-html.min.js","path":"js/highslide/highslide-with-html.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-html.packed.js","path":"js/highslide/highslide-with-html.packed.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.css","path":"js/highslide/highslide.css","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.js","path":"js/highslide/highslide.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.min.js","path":"js/highslide/highslide.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.packed.js","path":"js/highslide/highslide.packed.js","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background2.jpg","path":"imgs/slide/background2.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background5.jpg","path":"imgs/slide/background5.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-full.js","path":"js/highslide/highslide-full.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-full.min.js","path":"js/highslide/highslide-full.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.js","path":"js/highslide/highslide-with-gallery.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-html.js","path":"js/highslide/highslide-with-html.js","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background3.jpg","path":"imgs/slide/background3.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background4.jpg","path":"imgs/slide/background4.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/close.png","path":"js/highslide/graphics/close.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/closeX.png","path":"js/highslide/graphics/closeX.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-black-border.gif","path":"js/highslide/graphics/controlbar-black-border.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-text-buttons.png","path":"js/highslide/graphics/controlbar-text-buttons.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white-small.gif","path":"js/highslide/graphics/controlbar-white-small.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white.gif","path":"js/highslide/graphics/controlbar-white.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar2.gif","path":"js/highslide/graphics/controlbar2.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar3.gif","path":"js/highslide/graphics/controlbar3.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4-hover.gif","path":"js/highslide/graphics/controlbar4-hover.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4.gif","path":"js/highslide/graphics/controlbar4.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/fullexpand.gif","path":"js/highslide/graphics/fullexpand.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/geckodimmer.png","path":"js/highslide/graphics/geckodimmer.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/icon.gif","path":"js/highslide/graphics/icon.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/loader.gif","path":"js/highslide/graphics/loader.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/loader.white.gif","path":"js/highslide/graphics/loader.white.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/scrollarrows.png","path":"js/highslide/graphics/scrollarrows.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/resize.gif","path":"js/highslide/graphics/resize.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/zoomin.cur","path":"js/highslide/graphics/zoomin.cur","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/zoomout.cur","path":"js/highslide/graphics/zoomout.cur","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview4.jpg","path":"imgs/preview/preview4.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview2.jpg","path":"imgs/preview/preview2.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background6.jpg","path":"imgs/slide/background6.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/beveled.png","path":"js/highslide/graphics/outlines/beveled.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/drop-shadow.png","path":"js/highslide/graphics/outlines/drop-shadow.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/glossy-dark.png","path":"js/highslide/graphics/outlines/glossy-dark.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/outer-glow.png","path":"js/highslide/graphics/outlines/outer-glow.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-black.png","path":"js/highslide/graphics/outlines/rounded-black.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-white.png","path":"js/highslide/graphics/outlines/rounded-white.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background1.jpg","path":"imgs/slide/background1.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/Outlines.psd","path":"js/highslide/graphics/outlines/Outlines.psd","modified":0,"renderable":1},{"_id":"themes/gal/source/touxiang.jpg","path":"touxiang.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/touxiang.jpg","path":"imgs/touxiang.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/alipay.jpg","path":"imgs/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/weixin.jpg","path":"imgs/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview5.jpg","path":"imgs/preview/preview5.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview6.jpg","path":"imgs/preview/preview6.jpg","modified":0,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"themes/gal/README.md","hash":"641035393ad3121e115aa5081b88e1e2a2a48016","modified":1521681905610},{"_id":"themes/gal/_config.yml","hash":"ea7e652ecbc12a3c37fe7e6c7decba59038dfebd","modified":1522136915956},{"_id":"themes/gal/package.json","hash":"e7f91cfe6ba940a1f2888cc94fa4a65ae8a2315a","modified":1521681905671},{"_id":"themes/gal/languages/default.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520151016000},{"_id":"source/404/index.md","hash":"1c4b3981d11aafdc2e2d96aac956a4fd0505a917","modified":1521681905608},{"_id":"source/search/index.md","hash":"49d2479a820ffb525f426aad6bd3057801058ece","modified":1521681905609},{"_id":"themes/gal/LICENSE","hash":"5b012df09f9dad60ec326c510496893726af4896","modified":1521681905610},{"_id":"themes/gal/libs/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1520151016000},{"_id":"themes/gal/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1520151016000},{"_id":"themes/gal/layout/categories.ejs","hash":"5a66fb5d67cc141bdf099e9b1189d1576daba17a","modified":1521681905644},{"_id":"themes/gal/layout/category.ejs","hash":"99ba5b5a3938af83df0457c3388759e0532bb0a6","modified":1521681905644},{"_id":"themes/gal/layout/index.ejs","hash":"12ae8f7bd23b3f4e0f54dea2a1862419484d2401","modified":1521681905658},{"_id":"themes/gal/layout/layout.ejs","hash":"c24904d00456d5b5ddab5558451feb9811a54eb9","modified":1521681905658},{"_id":"themes/gal/layout/page.ejs","hash":"176c0170a9c5778ff8be99b3cfcd692b4c4a34e4","modified":1521711922205},{"_id":"themes/gal/layout/post.ejs","hash":"3c5a5c820b5b7f8dc230fcc9c607dc7e98860028","modified":1520151016000},{"_id":"themes/gal/layout/tag.ejs","hash":"65c21bc7656507774b0869eab3442d69b8d3adb4","modified":1521681905660},{"_id":"themes/gal/layout/tags.ejs","hash":"bc9d41c3fd25ee86394b2f2928bb72db1886ee62","modified":1521681905660},{"_id":"themes/gal/layout/_widget/hot_categories.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520151016000},{"_id":"themes/gal/source/js/bootstrap-hover-dropdown.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520151016000},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1521634775448},{"_id":"themes/gal/libs/font-awesome/_animated.scss","hash":"c3d081abee1076d36a289afc6488e676bc59f023","modified":1521681905663},{"_id":"themes/gal/libs/font-awesome/_bordered-pulled.scss","hash":"39353047bbcce4f3f706666df1547e64546932a0","modified":1521681905663},{"_id":"themes/gal/libs/font-awesome/_core.scss","hash":"2dce8814642ef0ee86c65f3d29818c17fd8951f9","modified":1521681905666},{"_id":"themes/gal/libs/font-awesome/_fixed-width.scss","hash":"f4af333866ff3c0da59493fc7077965c6e9d46ac","modified":1521681905667},{"_id":"themes/gal/libs/font-awesome/_icons.scss","hash":"303a6e9e04e91a132612f094b34cccfc90c63bec","modified":1521681905668},{"_id":"themes/gal/libs/font-awesome/_larger.scss","hash":"c5cf379c23025aa001f850bd560a87a92e4f711d","modified":1521681905668},{"_id":"themes/gal/libs/font-awesome/_list.scss","hash":"8e9c5708bd91364a749f93555ba65af3c49ff1a6","modified":1521681905668},{"_id":"themes/gal/libs/font-awesome/_mixins.scss","hash":"25b2361e654e3512c1f6024f3a8d593413611a58","modified":1521681905669},{"_id":"themes/gal/libs/font-awesome/_path.scss","hash":"011339ce07bb12a5736edd7fdbed0b7f3c63bf72","modified":1521681905669},{"_id":"themes/gal/libs/font-awesome/_rotated-flipped.scss","hash":"fd48d098af52ffff6f829e7f5a2250a9c3cfc87f","modified":1521681905669},{"_id":"themes/gal/libs/font-awesome/_screen-reader.scss","hash":"ebe3fe40059e5a2a3a3c0c0f587a2e2bc23fd1b2","modified":1521681905669},{"_id":"themes/gal/libs/font-awesome/_stacked.scss","hash":"c4fe90e7781e8b229bf2657312ba61ecf1026cab","modified":1521681905670},{"_id":"themes/gal/libs/font-awesome/_variables.scss","hash":"e2fc1b9ba5748f33ff45f8a3e6977088b83175c4","modified":1521681905670},{"_id":"themes/gal/libs/font-awesome/font-awesome.scss","hash":"6bfc7e75fd344628b06d85f7fa4d48b106334584","modified":1521681905670},{"_id":"themes/gal/layout/_partial/archive.ejs","hash":"5e9aa99f43fbab9c22a4f29e17bd3c66d33422e7","modified":1521681905611},{"_id":"themes/gal/layout/_partial/article.ejs","hash":"0ed59746320c9fd9b417e072d347a920c7ecc72b","modified":1521681905612},{"_id":"themes/gal/layout/_partial/excerpt.ejs","hash":"e8df81fb0830c35423b34cf76d04e0872aee6745","modified":1521681905612},{"_id":"themes/gal/layout/_partial/footer.ejs","hash":"61d388b87c23d940bc10e27f31bfb7b73a3a301e","modified":1521681905612},{"_id":"themes/gal/layout/_partial/head.ejs","hash":"a4d92fc7bd805cedde6230f6d89f2c0406802ffe","modified":1521681905612},{"_id":"themes/gal/layout/_partial/header.ejs","hash":"106dd6506ee3b504c792dbde2bbcdb1870eb3b6a","modified":1521681905613},{"_id":"themes/gal/layout/_partial/issue.ejs","hash":"ee735ce36846dbf1634a7c0da0e07fa6a436b780","modified":1521684672818},{"_id":"themes/gal/layout/_partial/oni.ejs","hash":"323469a435fc30675f2c768802576e812cc079c1","modified":1521681905624},{"_id":"themes/gal/layout/_partial/pagination.ejs","hash":"691f796160a13d42b550700f719a1cd21691cd57","modified":1521681905624},{"_id":"themes/gal/layout/_partial/sidebar.ejs","hash":"25423078ce81f4c3de3c56fa3e5ffc115ae3dc7f","modified":1521681905624},{"_id":"themes/gal/layout/_partial/slideshow.ejs","hash":"d798410561ce8c4749c9f7270eea211275b1fab2","modified":1521681905625},{"_id":"themes/gal/layout/_widget/author.ejs","hash":"eeb4ad13fd4289b21e79269ec8eccd127d74211c","modified":1521683422775},{"_id":"themes/gal/layout/_widget/friend_links.ejs","hash":"5b4da02bc6d831ae256dd54fa3a46d8d0c93f0ce","modified":1521681905626},{"_id":"themes/gal/layout/_widget/hot_posts.ejs","hash":"08422b5abd73f0756bdee30b0116e6ded9df2b5c","modified":1521681905640},{"_id":"themes/gal/layout/_widget/random_posts.ejs","hash":"b4be3d276da1009990a3f40081be2cc2408167af","modified":1521681905642},{"_id":"themes/gal/layout/_widget/links.ejs","hash":"e220f7dd6e348fe60735d7033b05345fe95c396c","modified":1521681905641},{"_id":"themes/gal/layout/_widget/hot_tags.ejs","hash":"13aa4c7269c40982af52d45e022b569a4aa195c4","modified":1521681905641},{"_id":"themes/gal/layout/_widget/recent_comments.ejs","hash":"254589b529980eec3cc7610e63b244b42f232558","modified":1521681905642},{"_id":"themes/gal/layout/_widget/recent_posts.ejs","hash":"f2f57750466c1f8d84ec803051397dad8df2952d","modified":1521681905642},{"_id":"themes/gal/layout/_widget/search.ejs","hash":"c828a111f5d71c418ed57716cddb7c5bc2165b15","modified":1521681905643},{"_id":"themes/gal/layout/page/404.ejs","hash":"bed254e4a19f4b13556ccae7945de6e8ca854787","modified":1521711620728},{"_id":"themes/gal/layout/page/search.ejs","hash":"d84182f23e0bf8d42f87ae7566dcd82bb8eb4a24","modified":1521681905659},{"_id":"themes/gal/source/css/_comment.scss","hash":"12ad332bedb3f5dd0e02fe931943a0c2c9f4c7c0","modified":1521681905672},{"_id":"themes/gal/source/css/_article.scss","hash":"ea491b6fc3a4b36800c9d4cb6d09f692b38a77de","modified":1521681905671},{"_id":"themes/gal/source/css/_common.scss","hash":"21e8cb0c12d613892a1075b66563360fbc24a615","modified":1521681905672},{"_id":"themes/gal/source/css/_excerpt.scss","hash":"d8080f289a10a30970f9ec0e6b46d8e69205c195","modified":1521681905692},{"_id":"themes/gal/source/css/_header.scss","hash":"219e0628556b65cce709292bac032e37ab156af6","modified":1521681905693},{"_id":"themes/gal/source/css/_mixin.scss","hash":"4242e3474a1fe1288296310074dab4bf50823557","modified":1521681905693},{"_id":"themes/gal/source/css/_slideshow.scss","hash":"8520b213a52c9848e45d52fe4b3a4e389cf01e6e","modified":1521681905694},{"_id":"themes/gal/source/css/_sidebar.scss","hash":"7226875aaf385d61bcc5fc152a47b6fd4a25f9e6","modified":1521681905694},{"_id":"themes/gal/source/css/_variables.scss","hash":"7117855f9c93c626b932c045bb1c6f6f76fb2333","modified":1521681905695},{"_id":"themes/gal/source/css/aos.css","hash":"a4100b1b5f0dac2597f3d06cfd36a35df29d4c35","modified":1521681905696},{"_id":"themes/gal/source/css/style.scss","hash":"fb9fea87e87b94ea0c341879a7a11d02ebf8fd01","modified":1521681905697},{"_id":"themes/gal/source/css/_pagination.scss","hash":"c70938a6432f1c6c55a88eafe84ae6cc98b57ba4","modified":1521681905694},{"_id":"themes/gal/source/fonts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1520151016000},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1520151016000},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1520151016000},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1520151016000},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1520151016000},{"_id":"themes/gal/source/imgs/.DS_Store","hash":"d00df114e3fa27c440c8b1440c39f96dd8b0cc6e","modified":1520151016000},{"_id":"themes/gal/source/imgs/mouse1.cur","hash":"18ed6adcdcf37b0fe2c0e14d528f23c6a7417302","modified":1520151016000},{"_id":"themes/gal/source/imgs/mouse2.cur","hash":"8a9fd78a78d446316485595bad42d44330f7bee2","modified":1520151016000},{"_id":"themes/gal/source/imgs/oni.mp3","hash":"af30f8f2574679964c98927a22a5696e44be56fb","modified":1520151016000},{"_id":"themes/gal/source/imgs/xsbg.gif","hash":"0c07e169d9d07a7e8f71b9baed5942234d31f457","modified":1520151016000},{"_id":"themes/gal/source/js/.DS_Store","hash":"52da494d68842fd3e729752636d01b7c335255bb","modified":1520151016000},{"_id":"themes/gal/source/js/activate-power-mode.js","hash":"5bb12e7590fd48e1c49123001921404213b89ebe","modified":1521681905796},{"_id":"themes/gal/source/js/blog.js","hash":"024d815b6a1acb707ea9da94bcc95f86b6475ffd","modified":1521681905797},{"_id":"themes/gal/source/js/aos.js","hash":"3f2c66781b53b842da4e3deefd285db88bd4fbc1","modified":1521681905797},{"_id":"themes/gal/source/js/bootstrap.min.js","hash":"8fb8a9319055253d085edfc3bb72d20f614ec709","modified":1521681905807},{"_id":"themes/gal/source/js/hs.js","hash":"3df129f76e9449f45cfc1550451a0dbb89a71006","modified":1521681905858},{"_id":"themes/gal/source/js/oni.js","hash":"99e9e1bc25f898bc136e4d8d4b62e79d5e0a8eeb","modified":1521681905860},{"_id":"themes/gal/source/css/bootstrap.min.css","hash":"224c9f9ad11b495358aa61dbd53e838e9b61015b","modified":1521681905697},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1520151016000},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1520151016000},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1521681905723},{"_id":"themes/gal/source/imgs/avatar.jpg","hash":"6317956f59fd3760799d855931b39bae031a20d5","modified":1520151016000},{"_id":"themes/gal/source/js/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1521681905859},{"_id":"themes/gal/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1520151016000},{"_id":"themes/gal/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1520151016000},{"_id":"themes/gal/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1520151016000},{"_id":"themes/gal/source/imgs/oni/oni1.jpg","hash":"f5a33419ad2701f7a2402a867c9652cdc5e61b98","modified":1520151016000},{"_id":"themes/gal/source/imgs/oni/oni2.jpg","hash":"4f2c0a00ee1be183bc77baeebf551fe143ff7ae7","modified":1520151016000},{"_id":"themes/gal/source/imgs/oni/oni3.jpg","hash":"f76271fd447762d4ddf6c966468a77a8971ace9e","modified":1520151016000},{"_id":"themes/gal/source/imgs/oni/oni4.jpg","hash":"92ce21f12dbe309a4674e66c048d8d75f8430fda","modified":1520151016000},{"_id":"themes/gal/source/imgs/oni/oni5.jpg","hash":"d1a83c12492e7c41ccb8a03cd5157c5397514e23","modified":1520151016000},{"_id":"themes/gal/source/imgs/oni/oni6.jpg","hash":"bb3847273571a3ccd6a63526dded82aaa1afe600","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/1.png","hash":"b4123ae41f1f954f42515c30ed545af7706fe67e","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/10.png","hash":"35b01e2b70df99ac7b088da02a52cdbf8507727f","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/11.png","hash":"68a39392c1bcd626202b1a8c18577fe23790028a","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/12.png","hash":"15c2185a9c9f7576dc34898a18bc0810d1c33780","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/13.png","hash":"b7f4e2eba2993ead15314e5e3a1e52d03b35ff7e","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/14.png","hash":"c16a7dfe5bff382314f2ab51a19f7118c04acf57","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/15.png","hash":"9bc4ab8044a8ba0728b549ca98bfc9abeed21b3a","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/16.png","hash":"3f1aca6372ba7a0e0c57777c44f01ac6fb2bf73e","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/17.png","hash":"03f0b4d1e0b0d4334a530be68531b9a320b8ea44","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/18.png","hash":"34df863688b2b026eb8a7d3aad122f47eafae894","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/19.png","hash":"a5c74a5f6dc2a3b5b39c85bc0d9d74157c57c7ec","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/2.png","hash":"b023745ae517965a226d1656bf33acdcdf246084","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/20.png","hash":"abfa7f204aec320de0bd59f366b1935119c1f0c7","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/21.png","hash":"fdd175985771a9c694f81199ff2733df483331cb","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/22.png","hash":"5ba3108a366aaef568d8dd4c5208fde59f4d6331","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/23.png","hash":"74e42f550fcb4c562a39f777a77ee4316054abd4","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/24.png","hash":"38751e1b4ad260a7fe035d1e3e37d3fffdb5b540","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/25.png","hash":"5009b4bd8c30d1912bde8e5fe6add4f8f12413fd","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/3.png","hash":"b087320a3cc9725d5601d106f24d38075a5b5474","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/4.png","hash":"76b7df92f0590512ee52d5200d6edd7e8ba8161b","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/5.png","hash":"56589a046bd38eda5d0386c5a3497898e4591fa2","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/6.png","hash":"0c04289d0f565bcf1dd3924672914cfe87bb8df4","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/7.png","hash":"0c0292581ea4ae2c61a4c03c1f9f045f6a523069","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/8.png","hash":"01da87b1689ea955db6b3e3f40a8e0a2a972e209","modified":1520151016000},{"_id":"themes/gal/source/imgs/smilies/9.png","hash":"5481e5b6b9c53ee522987c858ddda9652633b137","modified":1520151016000},{"_id":"themes/gal/source/js/comment/gitment.js","hash":"ab9315d0c02375500a4b59b7a51b2f7acdd1f6dc","modified":1521681905808},{"_id":"themes/gal/source/js/comment/leancloud.js","hash":"c04bd8bf94023813c4b51475b9a55aa643f0866d","modified":1521681905809},{"_id":"themes/gal/source/js/highslide/highslide-full.packed.js","hash":"9287fbb51773e32f7e67de58977b48f5e4f354a9","modified":1521681905852},{"_id":"themes/gal/source/js/highslide/highslide-ie6.css","hash":"eaf6db653eb1ff40782608e96ca912899962e156","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.min.js","hash":"8fffb1c784c69140eddfa5340300070db38c0805","modified":1521681905854},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.packed.js","hash":"146218112687daf6e19d9fdc9ec3eb0ec283b4bf","modified":1521681905855},{"_id":"themes/gal/source/js/highslide/highslide-with-html.min.js","hash":"57cc1afb782e3474943d7d814a0e350d301cc70f","modified":1521681905856},{"_id":"themes/gal/source/js/highslide/highslide-with-html.packed.js","hash":"4e0fc1688c84c35b23a2a1a5cf099b478911bc57","modified":1521681905856},{"_id":"themes/gal/source/js/highslide/highslide.css","hash":"9d13779279a6e95a21d09a34bbdea165c26e631d","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/highslide.js","hash":"12dfeebe809c27aed3bb940b641e1ef13cc0eae3","modified":1521681905857},{"_id":"themes/gal/source/js/highslide/highslide.min.js","hash":"e0bf1dd535f3853c5cbffa245bb1e902bc156a3c","modified":1521681905858},{"_id":"themes/gal/source/js/highslide/highslide.packed.js","hash":"727909482c3a9e531792397a251c127f40915adb","modified":1521681905858},{"_id":"themes/gal/source/imgs/slide/background2.jpg","hash":"578a36104aa5bfdb05c1fcc4b5671b9791f096b9","modified":1520151016000},{"_id":"themes/gal/source/imgs/slide/background5.jpg","hash":"d1e8721833f1bba4b671df13abe89417c3164bd6","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/highslide-full.js","hash":"47d5a073e8e5bad5ca3c8bfea84c182e3e141ab9","modified":1521681905840},{"_id":"themes/gal/source/js/highslide/highslide-full.min.js","hash":"2affe7aaa33115a2f05eba653e8c4af153922698","modified":1521681905841},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.js","hash":"858e38bf4ca4074e8925964bb8cfd3f27c670686","modified":1521681905854},{"_id":"themes/gal/source/js/highslide/highslide-with-html.js","hash":"8d46ad21726ba06af6ade48cefc11fab5ad364b9","modified":1521681905855},{"_id":"themes/gal/source/imgs/slide/background3.jpg","hash":"32909d14c33e836e94a947aa9cbe052377fd78d5","modified":1520151016000},{"_id":"themes/gal/source/imgs/slide/background4.jpg","hash":"28a21fce4b722cfc2f5f8aaf0b134da2ef60eab8","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/.DS_Store","hash":"be93e35c6f09a52720c735d34d1bd09c5cf31bb4","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/close.png","hash":"6227e5d22184d5f4a01aa29aa35f92717c6e838b","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/closeX.png","hash":"11c435153ec20e4f0e784dd849e0181104a77b1d","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-black-border.gif","hash":"e5c77f071bbf04dac163975aa7e0ca3cc861c1a2","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-text-buttons.png","hash":"c738717eaeeafba67326b7e65641d9d6a55f0b45","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white-small.gif","hash":"8e87bcc585d3717e5ba29b8f1f53abb3a192f3e9","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white.gif","hash":"1a558efe6e8e1b1571eb4d01459e83ceb053771d","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/controlbar2.gif","hash":"e964df6eb758c9328e53de3681467fd10a5ba8c7","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/controlbar3.gif","hash":"0077e495245ed61f0b23bb212f0bc2b8ad85c037","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4-hover.gif","hash":"f8d9c2a7c52c480e34bd1858391e0878ae868e62","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4.gif","hash":"6bafeabac1ed78ddc7e99823c34a0d0e34592f66","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/fullexpand.gif","hash":"b294249f054b8d765fa4f962760c8a63694563f9","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/geckodimmer.png","hash":"823e387d1ce37cf781228c766fb4b214bb2940ff","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/icon.gif","hash":"adb9b20bbf658344146391b6ca123f4216779f2d","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/loader.gif","hash":"4272f4281fef2291084ce39b4879d882d1d02282","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/loader.white.gif","hash":"f2af060f1cadbc9065c8c465c648dc01be67cc12","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/scrollarrows.png","hash":"92786fa2516184af92ec80b72e70d26f82a36cbe","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/resize.gif","hash":"384cf559cd34e483635fac1fc00eba3c4ba861f8","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/zoomin.cur","hash":"8dd0e088ec7172185c2363e9b5f83eedb4e8dac4","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/zoomout.cur","hash":"2d1695a011edd32a1abc5329dcf4b8ee196d5e7f","modified":1520151016000},{"_id":"themes/gal/source/imgs/preview/preview1.jpg","hash":"d21f0ccb947ef971c139b3951193cb5890d5004d","modified":1521685108472},{"_id":"themes/gal/source/imgs/preview/preview4.jpg","hash":"63c2b5ec882455a1c74c439b2d41f31a1b17fde8","modified":1520151016000},{"_id":"themes/gal/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1521681905718},{"_id":"themes/gal/source/imgs/preview/preview2.jpg","hash":"84a1b22a5b11c77159495d3b0b1c707a02287796","modified":1520151016000},{"_id":"themes/gal/source/imgs/preview/preview3.jpg","hash":"53a12cc25f7521dcc1809b59838c898f39735e01","modified":1521684939372},{"_id":"themes/gal/source/imgs/slide/background6.jpg","hash":"da471d9801cf963ebf566341d1bea1483d81e435","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/outlines/beveled.png","hash":"9c2403fd9e01c7cbdf7a46996e2281d2c6aeedf3","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/outlines/drop-shadow.png","hash":"90c718ca34fa1d7c82a5b5b6949acb89c2aaa77f","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/outlines/glossy-dark.png","hash":"b8b85fb1311502c237a6e9c3bdabe232369e252d","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/outlines/outer-glow.png","hash":"20af958d47ea54aa1474b73e62e115c50d18f7a9","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-black.png","hash":"360010e15638eb126612c5f13ffbc7c69c5c5293","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-white.png","hash":"c4ef235dcc34844e4050f845ff4ce22ce35fe0b8","modified":1520151016000},{"_id":"themes/gal/source/imgs/slide/background1.jpg","hash":"494fcbd2414a8b1d96d010bc7f2c53bfc2eb2156","modified":1520151016000},{"_id":"themes/gal/source/js/highslide/graphics/outlines/Outlines.psd","hash":"4cbeb7a5e833556f1b0f977c72edb59e8fd8f1d7","modified":1520151016000},{"_id":"public/content.json","hash":"8a45f0c4f2351ef15808f30c023a76bb632a334d","modified":1523512850549},{"_id":"public/2018/03/21/hello-world/index.html","hash":"c1b7e29b6a96d108d28c843acb97af779d7cb0b2","modified":1521684391515},{"_id":"public/archives/index.html","hash":"2ff601063f61419aa6af581cafff8aa6b2a39270","modified":1523512850894},{"_id":"public/archives/2018/index.html","hash":"4343085baeffe4dabaa3fdb81a96870c5db99243","modified":1523512850894},{"_id":"public/archives/2018/03/index.html","hash":"a1a22fc180529e82a35b0f0046c7e07967649975","modified":1523512850894},{"_id":"public/index.html","hash":"9f491979b6e18ac9917a3aa896e4aa8e46a6ae27","modified":1523512850895},{"_id":"public/404/index.html","hash":"2dc82c6baa203659ce251f3e536f642b3f518ea5","modified":1523512850891},{"_id":"public/search/index.html","hash":"3db3ad98fd8fd926fc90c69742fbfb06e7ab7f08","modified":1523512850891},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1521636668049},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1521636668049},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1521636668049},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1521636668049},{"_id":"public/imgs/mouse1.cur","hash":"18ed6adcdcf37b0fe2c0e14d528f23c6a7417302","modified":1521636668049},{"_id":"public/imgs/mouse2.cur","hash":"8a9fd78a78d446316485595bad42d44330f7bee2","modified":1521636668049},{"_id":"public/imgs/oni.mp3","hash":"af30f8f2574679964c98927a22a5696e44be56fb","modified":1521636668049},{"_id":"public/imgs/xsbg.gif","hash":"0c07e169d9d07a7e8f71b9baed5942234d31f457","modified":1521636668049},{"_id":"public/imgs/oni/oni1.jpg","hash":"f5a33419ad2701f7a2402a867c9652cdc5e61b98","modified":1521636668049},{"_id":"public/imgs/oni/oni2.jpg","hash":"4f2c0a00ee1be183bc77baeebf551fe143ff7ae7","modified":1521636668049},{"_id":"public/imgs/oni/oni3.jpg","hash":"f76271fd447762d4ddf6c966468a77a8971ace9e","modified":1521636668049},{"_id":"public/imgs/oni/oni4.jpg","hash":"92ce21f12dbe309a4674e66c048d8d75f8430fda","modified":1521636668049},{"_id":"public/imgs/oni/oni5.jpg","hash":"d1a83c12492e7c41ccb8a03cd5157c5397514e23","modified":1521636668049},{"_id":"public/imgs/oni/oni6.jpg","hash":"bb3847273571a3ccd6a63526dded82aaa1afe600","modified":1521636668049},{"_id":"public/imgs/smilies/1.png","hash":"b4123ae41f1f954f42515c30ed545af7706fe67e","modified":1521636668049},{"_id":"public/imgs/smilies/10.png","hash":"35b01e2b70df99ac7b088da02a52cdbf8507727f","modified":1521636668049},{"_id":"public/imgs/smilies/11.png","hash":"68a39392c1bcd626202b1a8c18577fe23790028a","modified":1521636668049},{"_id":"public/imgs/smilies/12.png","hash":"15c2185a9c9f7576dc34898a18bc0810d1c33780","modified":1521636668049},{"_id":"public/imgs/smilies/13.png","hash":"b7f4e2eba2993ead15314e5e3a1e52d03b35ff7e","modified":1521636668049},{"_id":"public/imgs/smilies/14.png","hash":"c16a7dfe5bff382314f2ab51a19f7118c04acf57","modified":1521636668049},{"_id":"public/imgs/smilies/15.png","hash":"9bc4ab8044a8ba0728b549ca98bfc9abeed21b3a","modified":1521636668049},{"_id":"public/imgs/smilies/16.png","hash":"3f1aca6372ba7a0e0c57777c44f01ac6fb2bf73e","modified":1521636668049},{"_id":"public/imgs/smilies/17.png","hash":"03f0b4d1e0b0d4334a530be68531b9a320b8ea44","modified":1521636668049},{"_id":"public/imgs/smilies/18.png","hash":"34df863688b2b026eb8a7d3aad122f47eafae894","modified":1521636668049},{"_id":"public/imgs/smilies/19.png","hash":"a5c74a5f6dc2a3b5b39c85bc0d9d74157c57c7ec","modified":1521636668049},{"_id":"public/imgs/smilies/2.png","hash":"b023745ae517965a226d1656bf33acdcdf246084","modified":1521636668049},{"_id":"public/imgs/smilies/20.png","hash":"abfa7f204aec320de0bd59f366b1935119c1f0c7","modified":1521636668049},{"_id":"public/imgs/smilies/21.png","hash":"fdd175985771a9c694f81199ff2733df483331cb","modified":1521636668049},{"_id":"public/imgs/smilies/22.png","hash":"5ba3108a366aaef568d8dd4c5208fde59f4d6331","modified":1521636668049},{"_id":"public/imgs/smilies/23.png","hash":"74e42f550fcb4c562a39f777a77ee4316054abd4","modified":1521636668049},{"_id":"public/imgs/smilies/24.png","hash":"38751e1b4ad260a7fe035d1e3e37d3fffdb5b540","modified":1521636668049},{"_id":"public/imgs/smilies/25.png","hash":"5009b4bd8c30d1912bde8e5fe6add4f8f12413fd","modified":1521636668049},{"_id":"public/imgs/smilies/3.png","hash":"b087320a3cc9725d5601d106f24d38075a5b5474","modified":1521636668049},{"_id":"public/imgs/smilies/4.png","hash":"76b7df92f0590512ee52d5200d6edd7e8ba8161b","modified":1521636668049},{"_id":"public/imgs/smilies/5.png","hash":"56589a046bd38eda5d0386c5a3497898e4591fa2","modified":1521636668049},{"_id":"public/imgs/smilies/6.png","hash":"0c04289d0f565bcf1dd3924672914cfe87bb8df4","modified":1521636668049},{"_id":"public/imgs/smilies/7.png","hash":"0c0292581ea4ae2c61a4c03c1f9f045f6a523069","modified":1521636668049},{"_id":"public/imgs/smilies/8.png","hash":"01da87b1689ea955db6b3e3f40a8e0a2a972e209","modified":1521636668049},{"_id":"public/imgs/smilies/9.png","hash":"5481e5b6b9c53ee522987c858ddda9652633b137","modified":1521636668049},{"_id":"public/js/highslide/graphics/close.png","hash":"6227e5d22184d5f4a01aa29aa35f92717c6e838b","modified":1521636668049},{"_id":"public/js/highslide/graphics/closeX.png","hash":"11c435153ec20e4f0e784dd849e0181104a77b1d","modified":1521636668049},{"_id":"public/js/highslide/graphics/controlbar-black-border.gif","hash":"e5c77f071bbf04dac163975aa7e0ca3cc861c1a2","modified":1521636668049},{"_id":"public/js/highslide/graphics/controlbar-text-buttons.png","hash":"c738717eaeeafba67326b7e65641d9d6a55f0b45","modified":1521636668049},{"_id":"public/js/highslide/graphics/controlbar-white-small.gif","hash":"8e87bcc585d3717e5ba29b8f1f53abb3a192f3e9","modified":1521636668049},{"_id":"public/js/highslide/graphics/controlbar-white.gif","hash":"1a558efe6e8e1b1571eb4d01459e83ceb053771d","modified":1521636668049},{"_id":"public/js/highslide/graphics/controlbar2.gif","hash":"e964df6eb758c9328e53de3681467fd10a5ba8c7","modified":1521636668049},{"_id":"public/js/highslide/graphics/controlbar3.gif","hash":"0077e495245ed61f0b23bb212f0bc2b8ad85c037","modified":1521636668049},{"_id":"public/js/highslide/graphics/controlbar4-hover.gif","hash":"f8d9c2a7c52c480e34bd1858391e0878ae868e62","modified":1521636668049},{"_id":"public/js/highslide/graphics/controlbar4.gif","hash":"6bafeabac1ed78ddc7e99823c34a0d0e34592f66","modified":1521636668049},{"_id":"public/js/highslide/graphics/fullexpand.gif","hash":"b294249f054b8d765fa4f962760c8a63694563f9","modified":1521636668049},{"_id":"public/js/highslide/graphics/geckodimmer.png","hash":"823e387d1ce37cf781228c766fb4b214bb2940ff","modified":1521636668049},{"_id":"public/js/highslide/graphics/icon.gif","hash":"adb9b20bbf658344146391b6ca123f4216779f2d","modified":1521636668049},{"_id":"public/js/highslide/graphics/loader.gif","hash":"4272f4281fef2291084ce39b4879d882d1d02282","modified":1521636668049},{"_id":"public/js/highslide/graphics/loader.white.gif","hash":"f2af060f1cadbc9065c8c465c648dc01be67cc12","modified":1521636668049},{"_id":"public/js/highslide/graphics/scrollarrows.png","hash":"92786fa2516184af92ec80b72e70d26f82a36cbe","modified":1521636668049},{"_id":"public/js/highslide/graphics/resize.gif","hash":"384cf559cd34e483635fac1fc00eba3c4ba861f8","modified":1521636668049},{"_id":"public/js/highslide/graphics/zoomin.cur","hash":"8dd0e088ec7172185c2363e9b5f83eedb4e8dac4","modified":1521636668049},{"_id":"public/js/highslide/graphics/zoomout.cur","hash":"2d1695a011edd32a1abc5329dcf4b8ee196d5e7f","modified":1521636668049},{"_id":"public/js/highslide/graphics/outlines/beveled.png","hash":"9c2403fd9e01c7cbdf7a46996e2281d2c6aeedf3","modified":1521636668049},{"_id":"public/js/highslide/graphics/outlines/drop-shadow.png","hash":"90c718ca34fa1d7c82a5b5b6949acb89c2aaa77f","modified":1521636668049},{"_id":"public/js/highslide/graphics/outlines/glossy-dark.png","hash":"b8b85fb1311502c237a6e9c3bdabe232369e252d","modified":1521636668049},{"_id":"public/js/highslide/graphics/outlines/outer-glow.png","hash":"20af958d47ea54aa1474b73e62e115c50d18f7a9","modified":1521636668049},{"_id":"public/js/highslide/graphics/outlines/rounded-black.png","hash":"360010e15638eb126612c5f13ffbc7c69c5c5293","modified":1521636668049},{"_id":"public/js/highslide/graphics/outlines/rounded-white.png","hash":"c4ef235dcc34844e4050f845ff4ce22ce35fe0b8","modified":1521636668049},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521636668069},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521636668069},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1521684363558},{"_id":"public/imgs/avatar.jpg","hash":"6317956f59fd3760799d855931b39bae031a20d5","modified":1521636668079},{"_id":"public/imgs/slide/background2.jpg","hash":"578a36104aa5bfdb05c1fcc4b5671b9791f096b9","modified":1521636668079},{"_id":"public/imgs/slide/background5.jpg","hash":"d1e8721833f1bba4b671df13abe89417c3164bd6","modified":1521636668079},{"_id":"public/js/bootstrap-hover-dropdown.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521636668099},{"_id":"public/js/activate-power-mode.js","hash":"a21f2119965860b613e17dbcb8a21c18a55b595f","modified":1521636668099},{"_id":"public/js/blog.js","hash":"3be90f72916e1fd62bd11e5d35e41d3b1386cba3","modified":1521636668099},{"_id":"public/js/aos.js","hash":"7ca38e8b8c6febc6f6d0d80ff9cdd14d6ab4dcd6","modified":1521636668099},{"_id":"public/js/hs.js","hash":"c044f43539a61403e6529141508c631829ed4045","modified":1521636668099},{"_id":"public/js/oni.js","hash":"40505975c163f86314d92ad6a4e11b26d79e7f7a","modified":1521636668099},{"_id":"public/js/comment/leancloud.js","hash":"f7428f717eb2816e83919c5654c3c2921b1f2963","modified":1521636668099},{"_id":"public/js/highslide/highslide-ie6.css","hash":"1079b3a749a6fd1ee6ed81d8bdc40588c08b2749","modified":1521636668099},{"_id":"public/js/highslide/highslide.css","hash":"456631547423fb0ce00c7e084d8321bda5d8428e","modified":1521636668099},{"_id":"public/css/aos.css","hash":"016028b2f6389e90a8ada1c20c6e55771776589a","modified":1521636668099},{"_id":"public/js/bootstrap.min.js","hash":"430a443d74830fe9be26efca431f448c1b3740f9","modified":1521636668099},{"_id":"public/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1521636668099},{"_id":"public/js/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1521636668099},{"_id":"public/js/comment/gitment.js","hash":"e2d0ca8d791d7bd531d1828b5ed2fd0634088a6f","modified":1521636668099},{"_id":"public/js/highslide/highslide-full.packed.js","hash":"3b5b18256e58e95b759b6a942503470abbf3d4db","modified":1521636668099},{"_id":"public/js/highslide/highslide-with-gallery.min.js","hash":"bc76441920217090ed383eb240d03e78ae6703ed","modified":1521636668099},{"_id":"public/js/highslide/highslide-with-gallery.packed.js","hash":"a6766e9a5db22448195558a6141bf44e333132aa","modified":1521636668099},{"_id":"public/js/highslide/highslide-with-html.min.js","hash":"c579f05dc8a3430d0b49349f1dca67d9d86eac92","modified":1521636668099},{"_id":"public/js/highslide/highslide-with-html.packed.js","hash":"352a0bfac404c555eab47f41e3fb553b1ece2042","modified":1521636668099},{"_id":"public/js/highslide/highslide.js","hash":"fd327fcdcd90478c6d79cd47d0a004c942d50c2d","modified":1521636668099},{"_id":"public/js/highslide/highslide.min.js","hash":"e1f8252b25bcc59aefd9020f0e60deff04926d21","modified":1521636668099},{"_id":"public/js/highslide/highslide.packed.js","hash":"194a5f8067cac605c8acd9f2e2859ef541b05a87","modified":1521636668099},{"_id":"public/js/highslide/highslide-full.js","hash":"99c9a118d8da8b69a8a721ed734ec71a7f220cfa","modified":1521636668099},{"_id":"public/js/highslide/highslide-full.min.js","hash":"8d660332bd227272c20f7a876a05dcf967e0d265","modified":1521636668099},{"_id":"public/js/highslide/highslide-with-gallery.js","hash":"17ecfee0fb7a487dace39a48e8b5866443a498a1","modified":1521636668099},{"_id":"public/js/highslide/highslide-with-html.js","hash":"119fafa7800da04c718bc72d8a95a1d99beaeb11","modified":1521636668099},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1521636668099},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521636668099},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1521636668099},{"_id":"public/imgs/slide/background3.jpg","hash":"32909d14c33e836e94a947aa9cbe052377fd78d5","modified":1521636668099},{"_id":"public/imgs/slide/background4.jpg","hash":"28a21fce4b722cfc2f5f8aaf0b134da2ef60eab8","modified":1521636668099},{"_id":"public/js/highslide/graphics/outlines/Outlines.psd","hash":"4cbeb7a5e833556f1b0f977c72edb59e8fd8f1d7","modified":1521636668099},{"_id":"public/css/style.css","hash":"c66bee333d4a1743d05422cf13d6af04abe64e3d","modified":1521684391580},{"_id":"public/imgs/preview/preview1.jpg","hash":"6cce8b99cfe0888ebe6131985c68178399d9a3d2","modified":1521636668655},{"_id":"public/imgs/preview/preview4.jpg","hash":"63c2b5ec882455a1c74c439b2d41f31a1b17fde8","modified":1521636668655},{"_id":"public/imgs/preview/preview2.jpg","hash":"84a1b22a5b11c77159495d3b0b1c707a02287796","modified":1521636669611},{"_id":"public/imgs/preview/preview3.jpg","hash":"e74e2c5baec4b447d0253bfbb223e8619a58ebb8","modified":1521636669611},{"_id":"public/imgs/slide/background6.jpg","hash":"da471d9801cf963ebf566341d1bea1483d81e435","modified":1521636669611},{"_id":"public/imgs/slide/background1.jpg","hash":"494fcbd2414a8b1d96d010bc7f2c53bfc2eb2156","modified":1521636670439},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1521684363602},{"_id":"source/_drafts/将本地代码传入github.md","hash":"7d5668f71cf03fab35d5980b93d29db5d14f04de","modified":1521682083521},{"_id":"source/_posts/centos-e6-9c-8d-e5-8a-a1-e5-99-a8-e5-ae-89-e8-a3-85mysql.md","hash":"f042596375fed534441157bf93b842331ae20f70","modified":1521682083520},{"_id":"source/_posts/48.md","hash":"5b586e53587b407c37d4d5c29387552c573726d0","modified":1521682083520},{"_id":"source/_posts/e5-be-ae-e4-bf-a1-e5-b0-8f-e7-a8-8b-e5-ba-8f-e5-88-9d-e6-8e-a2.md","hash":"4d5b9d800ee4f1531b8990f3a838aab416513de8","modified":1521682083520},{"_id":"source/_posts/e6-9b-b4-e6-96-b0-e6-9c-ac-e5-9c-b0-e4-bb-a3-e7-a0-81-e5-88-b0github.md","hash":"f5ca74d6dd9de5c96b69fb639408a4c3e1358603","modified":1521682083520},{"_id":"source/_posts/dubbozookeeperspring-boot-e6-90-ad-e5-bb-ba-e5-85-a5-e9-97-a8.md","hash":"39b949feb3601b65f50a8d5cbf9db27f9be3971a","modified":1521682083520},{"_id":"source/_posts/e6-9c-ac-e5-9c-b0-e4-bb-a3-e7-a0-81-e4-b8-8a-e4-bc-a0-e5-88-b0github.md","hash":"87cd6aef199eeabe5cad0fdac44a7e14a8fdca4b","modified":1521682083521},{"_id":"source/_posts/e7-bd-91-e7-ab-99-e5-90-8c-e6-97-b6-e6-94-af-e6-8c-81http-e5-92-8chttps-e8-ae-bf-e9-97-ae.md","hash":"1d9055be8c4d34899feac1ba9e4b4fed5af15ea0","modified":1521682083520},{"_id":"source/_posts/hello-world-1.md","hash":"4b7424e62d895f885fb6be6ef73ced78872b1009","modified":1521682083519},{"_id":"source/_posts/java8-e5-88-9d-e8-af-86.md","hash":"0f5745c553b788c1681cf81fc7a154017b657741","modified":1521682083520},{"_id":"source/_posts/redis-e5-85-a5-e9-97-a8.md","hash":"42792b274af03b50a606821728dde5afa035bf8e","modified":1521682083520},{"_id":"source/_posts/redis-e9-9b-86-e7-be-a4-e6-90-ad-e5-bb-ba.md","hash":"d00e65728ca5117011227c4dc3508aee40ee858e","modified":1521682083520},{"_id":"source/_posts/vi-e6-96-87-e4-bb-b6found-a-swap-file-by-the-name.md","hash":"39959e48b6a873dd4a527196b0e22d1aeefed01e","modified":1521682083520},{"_id":"source/_posts/spring-batch-restart-e9-87-8d-e6-8b-89-e6-9c-ba-e5-88-b6.md","hash":"94de34d86564510d3eb414a53c5b6d16c04d6a47","modified":1521682083520},{"_id":"source/_posts/wordpress-e4-bb-8eapache-e8-bf-81-e7-a7-bb-e5-88-b0nginx.md","hash":"6cfdafe7dafebea8b4f3c05b45261b2935e71a76","modified":1521682083520},{"_id":"source/_posts/wordpress-e6-90-ad-e5-bb-ba.md","hash":"26f86fe52d008ade4da0b52867cdc35e0debcd5c","modified":1521682083520},{"_id":"source/_posts/wordpress-twentyfourteen-e9-a1-b5-e9-9d-a2-e4-b8-8d-e5-b1-85-e4-b8-ad-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3.md","hash":"eeb7ae42859be241ecbd5eb4681613d7bd5158a0","modified":1521682083520},{"_id":"themes/gal/source/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1521595499859},{"_id":"themes/gal/source/imgs/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1521595499859},{"_id":"themes/gal/source/imgs/alipay.jpg","hash":"3f70bd1b2f6f06b1dc7a7129636ef297fdb08510","modified":1521595426371},{"_id":"themes/gal/source/imgs/weixin.jpg","hash":"01d3ef9a5bcdd3b528f0e0f6afded1993dbf94de","modified":1521595400207},{"_id":"public/2018/03/13/java8-e5-88-9d-e8-af-86/index.html","hash":"1be76a5b380b805602843f4456c1051bd3dc93ab","modified":1521711903441},{"_id":"public/2018/01/29/e7-bd-91-e7-ab-99-e5-90-8c-e6-97-b6-e6-94-af-e6-8c-81http-e5-92-8chttps-e8-ae-bf-e9-97-ae/index.html","hash":"dbf21a43bf41ff85e60185dfd6b5f3f2d3a4fc49","modified":1521711903441},{"_id":"public/2018/01/29/wordpress-e4-bb-8eapache-e8-bf-81-e7-a7-bb-e5-88-b0nginx/index.html","hash":"d4f44f5fa469385cba889f3868e9c8d97985c3c7","modified":1521711903441},{"_id":"public/2018/01/26/redis-e9-9b-86-e7-be-a4-e6-90-ad-e5-bb-ba/index.html","hash":"c144699b805a19c0bceecdc94c64c78c4d8e0cd8","modified":1521711903441},{"_id":"public/2018/01/24/vi-e6-96-87-e4-bb-b6found-a-swap-file-by-the-name/index.html","hash":"50ad815e8e702c7e4cf14e40ff92b84e1562cb2e","modified":1521711903441},{"_id":"public/2018/01/24/redis-e5-85-a5-e9-97-a8/index.html","hash":"ab528d22e85121eb42dc06ffcfdf6f4d5d4dc4b1","modified":1521711903441},{"_id":"public/2018/01/23/e6-9b-b4-e6-96-b0-e6-9c-ac-e5-9c-b0-e4-bb-a3-e7-a0-81-e5-88-b0github/index.html","hash":"9cc0a5d1348c0b028cd5a5553478e99216d568ec","modified":1521711903441},{"_id":"public/2018/01/23/e6-9c-ac-e5-9c-b0-e4-bb-a3-e7-a0-81-e4-b8-8a-e4-bc-a0-e5-88-b0github/index.html","hash":"4c36975997c7b6eea2cb94312b6cde99e5527c6f","modified":1521711903441},{"_id":"public/2018/01/23/dubbozookeeperspring-boot-e6-90-ad-e5-bb-ba-e5-85-a5-e9-97-a8/index.html","hash":"5b4c2faf7bc8023e9bf829f466e4a0bc1780270f","modified":1521684391515},{"_id":"public/2018/01/12/centos-e6-9c-8d-e5-8a-a1-e5-99-a8-e5-ae-89-e8-a3-85mysql/index.html","hash":"7e0b954bee584aa30e1beba6c736322dab9b8aa8","modified":1521684391515},{"_id":"public/2017/12/26/e5-be-ae-e4-bf-a1-e5-b0-8f-e7-a8-8b-e5-ba-8f-e5-88-9d-e6-8e-a2/index.html","hash":"8d2aa8d1005a0b6c96828f443286cd665da31ae6","modified":1521711903441},{"_id":"public/2017/12/22/spring-batch-restart-e9-87-8d-e6-8b-89-e6-9c-ba-e5-88-b6/index.html","hash":"48b35d010cbcef5e8b9bc182f8c1f5423645690f","modified":1521711903441},{"_id":"public/2017/12/22/wordpress-e6-90-ad-e5-bb-ba/index.html","hash":"ad550d0f989ad2d2352136769213ffe375d24a97","modified":1521711903441},{"_id":"public/2017/12/22/wordpress-twentyfourteen-e9-a1-b5-e9-9d-a2-e4-b8-8d-e5-b1-85-e4-b8-ad-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3/index.html","hash":"67a4941c5823ecd418ebf89a66b2530cbe072143","modified":1521711903441},{"_id":"public/2017/12/22/48/index.html","hash":"2ce1dea142bc2f718eab07e56ee01387b9fe118e","modified":1521684391516},{"_id":"public/2017/12/18/hello-world-1/index.html","hash":"6d8aab6b41c719e59887c4975f3eb71e46dbc7e6","modified":1521711903441},{"_id":"public/categories/CentOS/index.html","hash":"4d82c3fab0e35080c355372b0877f36800ab0524","modified":1523512850894},{"_id":"public/categories/WeChat小程序/index.html","hash":"8ddeae3d8cb5e28f79d99b0fc46a9d07f4d28d69","modified":1523512850894},{"_id":"public/categories/github/index.html","hash":"cdaadea90a8901ee0a5ba52c1f7a1cf99b93410e","modified":1523512850894},{"_id":"public/categories/Dubbo/index.html","hash":"185f8bc3a629c69c10db3c301fe1093b4d8bf143","modified":1523512850894},{"_id":"public/categories/CentOS/杂项/index.html","hash":"082fddd91de6eee3191f3fd44c47921e534d77fa","modified":1523512850894},{"_id":"public/categories/WordPress/index.html","hash":"6d1dfb10be80545f6ec9b9ab8abb57795568e67a","modified":1523512850894},{"_id":"public/categories/Redis/index.html","hash":"ec8c432393c397300d041c28e47b22ea4fc4ea07","modified":1523512850894},{"_id":"public/categories/杂项/index.html","hash":"fc284d7b2012a713daf3034753f24883cfcb273a","modified":1523512850894},{"_id":"public/categories/Spring-batch/index.html","hash":"573c9790b4f935fd5c20bca8c5be32127b17fb18","modified":1523512850895},{"_id":"public/archives/page/2/index.html","hash":"28997771dcad325d88e20cedbd82394fb951971c","modified":1523512850894},{"_id":"public/archives/2017/index.html","hash":"93d56f70dc47b24aee57dbe92f03a7006531c43f","modified":1523512850894},{"_id":"public/archives/2017/12/index.html","hash":"672287d78de12282c6b8217744aac86d27f62122","modified":1523512850894},{"_id":"public/archives/2018/page/2/index.html","hash":"ba4b0d82514fe2a56510c4d7b95a277436c0770d","modified":1523512850894},{"_id":"public/archives/2018/01/index.html","hash":"90803e092fc0dc2d7c3e5cab74cf01daa5417f8f","modified":1523512850894},{"_id":"public/tags/微信，小程序/index.html","hash":"8139076c6e189e3a2a79143d3c5e08e72728e58f","modified":1523512850895},{"_id":"public/tags/CentOS/index.html","hash":"7e8a7b4d95b5a1459675e31c5c34a105d3aa9e8c","modified":1523512850895},{"_id":"public/page/2/index.html","hash":"2e95f7112e2e5d4377be23e7df7956af95e4e4ef","modified":1523512850895},{"_id":"public/css/style.scss","hash":"fb9fea87e87b94ea0c341879a7a11d02ebf8fd01","modified":1521684363548},{"_id":"public/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1521684363548},{"_id":"public/imgs/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1521684363548},{"_id":"public/imgs/weixin.jpg","hash":"01d3ef9a5bcdd3b528f0e0f6afded1993dbf94de","modified":1521684363566},{"_id":"public/imgs/alipay.jpg","hash":"3f70bd1b2f6f06b1dc7a7129636ef297fdb08510","modified":1521684363572},{"_id":"source/_posts/CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群.md","hash":"5b586e53587b407c37d4d5c29387552c573726d0","modified":1521682083520},{"_id":"source/_posts/centos服务器安装mysql.md","hash":"f042596375fed534441157bf93b842331ae20f70","modified":1521682083520},{"_id":"source/_posts/Dubbo+Zookeeper+Spring-boot+dubbo-simple 搭建入门.md","hash":"39b949feb3601b65f50a8d5cbf9db27f9be3971a","modified":1521682083520},{"_id":"themes/gal/source/imgs/preview/preview5.jpg","hash":"d21f0ccb947ef971c139b3951193cb5890d5004d","modified":1521685108472},{"_id":"themes/gal/source/imgs/preview/preview6.jpg","hash":"53a12cc25f7521dcc1809b59838c898f39735e01","modified":1521684939372},{"_id":"themes/gal/source/imgs/favicon.ico","hash":"a6e98673ee6bc38aeb948a2c05694564588476dd","modified":1521688151541},{"_id":"themes/gal/source/favicon.ico","hash":"a6e98673ee6bc38aeb948a2c05694564588476dd","modified":1521688151541},{"_id":"source/favicon.ico","hash":"20c59e96f042970753776c92420583340cb3c6ae","modified":1521705964470},{"_id":"public/2018/01/23/Dubbo+Zookeeper+Spring-boot+dubbo-simple 搭建入门/index.html","hash":"eb3b2fbbb5aea9846de32dc5e100c9170a6ec296","modified":1521711903441},{"_id":"public/2018/01/12/centos服务器安装mysql/index.html","hash":"36f04ee482f95cfb62c050107b0b4e6fb92681fc","modified":1521711903441},{"_id":"public/2017/12/22/CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群/index.html","hash":"f702b527e0706b0c17ed26b928d48f4d94826a5e","modified":1521711903441},{"_id":"public/imgs/preview/preview6.jpg","hash":"53a12cc25f7521dcc1809b59838c898f39735e01","modified":1521705521169},{"_id":"public/imgs/preview/preview5.jpg","hash":"d21f0ccb947ef971c139b3951193cb5890d5004d","modified":1521705521169},{"_id":"public/favicon.ico","hash":"a6e98673ee6bc38aeb948a2c05694564588476dd","modified":1521705521169},{"_id":"themes/gal/layout/page/about.ejs","hash":"019c091fd3756861c120d54d1fc2c2be9215b0a1","modified":1521711644099},{"_id":"themes/gal/layout/about.ejs","hash":"0606b7b4bf3d8755ade63ee75ecb6ee42dba5e6f","modified":1521709623790},{"_id":"themes/gal/layout/_partial/about.ejs","hash":"5e9aa99f43fbab9c22a4f29e17bd3c66d33422e7","modified":1521681905611},{"_id":"source/about/index.md","hash":"61b029e9dd475b1bc3f102ff1d44fffe0d293e18","modified":1521711511478},{"_id":"public/about/index.html","hash":"f26f662427a7f558b4b2e652db847e4a9f3574d9","modified":1523512850891},{"_id":"source/CNAME","hash":"a994532c1fe72df4a634dd248d2865ed9569af88","modified":1522135603613},{"_id":"source/_posts/P13.md","hash":"94de34d86564510d3eb414a53c5b6d16c04d6a47","modified":1521682083520},{"_id":"source/_posts/P1.md","hash":"00e31304f096825e83c3beafeecd96c1c9adb36e","modified":1523512834607},{"_id":"source/_posts/P16.md","hash":"26f86fe52d008ade4da0b52867cdc35e0debcd5c","modified":1521682083520},{"_id":"source/_posts/P10.md","hash":"0f5745c553b788c1681cf81fc7a154017b657741","modified":1521682083520},{"_id":"source/_posts/P11.md","hash":"42792b274af03b50a606821728dde5afa035bf8e","modified":1521682083520},{"_id":"source/_posts/P14.md","hash":"39959e48b6a873dd4a527196b0e22d1aeefed01e","modified":1521682083520},{"_id":"source/_posts/P2.md","hash":"faded450f78ab7183a03b22b184833b97a7cf8d2","modified":1522117384762},{"_id":"source/_posts/P15.md","hash":"6cfdafe7dafebea8b4f3c05b45261b2935e71a76","modified":1521682083520},{"_id":"source/_posts/P3.md","hash":"01e8781f249fb5d45639a1e568cf4c7fd36b2ee0","modified":1522117915103},{"_id":"source/_posts/P6.md","hash":"f5ca74d6dd9de5c96b69fb639408a4c3e1358603","modified":1521682083520},{"_id":"source/_posts/P4.md","hash":"c2a6500639bd7021bac6d4e796840e1e76d856ad","modified":1522118016721},{"_id":"source/_posts/P7.md","hash":"87cd6aef199eeabe5cad0fdac44a7e14a8fdca4b","modified":1521682083521},{"_id":"source/_posts/P9.md","hash":"4b7424e62d895f885fb6be6ef73ced78872b1009","modified":1521682083519},{"_id":"source/_posts/P5.md","hash":"5b586e53587b407c37d4d5c29387552c573726d0","modified":1521682083520},{"_id":"source/_posts/P12.md","hash":"d00e65728ca5117011227c4dc3508aee40ee858e","modified":1521682083520},{"_id":"source/_posts/P17.md","hash":"57aa9de78eaf4f0f66127f27abd6ec0e6c919ada","modified":1522136185598},{"_id":"source/_posts/P8.md","hash":"1d9055be8c4d34899feac1ba9e4b4fed5af15ea0","modified":1521682083520},{"_id":"public/aticle/P17.html","hash":"e008b6fb5c5ec43023ab123bfe28fc9c48260de3","modified":1523512850891},{"_id":"public/aticle/P1.html","hash":"895a88a799219e1f21f45b7a414246f805da77dc","modified":1523512850894},{"_id":"public/aticle/P10.html","hash":"fbebc6afcc766b058c3b262ca510356b895bf32b","modified":1523512850891},{"_id":"public/aticle/P8.html","hash":"36ab521ef8bfd550e5a83132c5bafa9a5e176816","modified":1523512850891},{"_id":"public/aticle/P15.html","hash":"763fe423f140a782ecd10c1e11b6a220a46bf64c","modified":1523512850891},{"_id":"public/aticle/P12.html","hash":"dddc8e367084c7512bc7a340da1c3924cd518453","modified":1523512850891},{"_id":"public/aticle/P14.html","hash":"ab9ccad80fb230f057da5fa45050e987cea4b92a","modified":1523512850892},{"_id":"public/aticle/P11.html","hash":"0c4a62c15be21a8a60ce879dd48a3b90ee234891","modified":1523512850892},{"_id":"public/aticle/P6.html","hash":"b0772bb10db7c73e8cff8d2b0d64613ca7a0cdb8","modified":1523512850892},{"_id":"public/aticle/P7.html","hash":"36b46f3bc4fef4b4fa940f06099b7a2c0583bb64","modified":1523512850892},{"_id":"public/aticle/P3.html","hash":"e0ac8663e33e61eaa8869ea379ef909fbf64cdca","modified":1523512850893},{"_id":"public/aticle/P4.html","hash":"ba10147052e3d898b79591e8bdbe62f192d89723","modified":1523512850893},{"_id":"public/aticle/P13.html","hash":"f2c9938393d7929f6307697de39f1ddcdab79b94","modified":1523512850893},{"_id":"public/aticle/P16.html","hash":"48ce6916ca9f7b96cd2def60faffc9dc76964cca","modified":1523512850893},{"_id":"public/aticle/P2.html","hash":"ad47be69ce144f1a23ac9ac2a41276c24b5541c5","modified":1523512850894},{"_id":"public/aticle/P5.html","hash":"a9301572e81a0dc1b470488893fec7fcc89ff6bb","modified":1523512850894},{"_id":"public/aticle/P9.html","hash":"56a7b2d3cf2ced95e4ef18f3029cdb4c0ff42819","modified":1523512850894},{"_id":"public/CNAME","hash":"a994532c1fe72df4a634dd248d2865ed9569af88","modified":1523512063046}],"Category":[{"name":"CentOS","_id":"cjf1vkwry00022cgpdipiulfd"},{"name":"WeChat小程序","_id":"cjf1vkws800072cgpggcifwab"},{"name":"github","_id":"cjf1vkwsc000d2cgpygbp30be"},{"name":"Dubbo","_id":"cjf1vkwsh000i2cgphqnp3gh8"},{"name":"杂项","parent":"cjf1vkwry00022cgpdipiulfd","_id":"cjf1vkwst000r2cgpaaog4pwf"},{"name":"WordPress","_id":"cjf1vkwsx000x2cgpbqe65fre"},{"name":"Redis","_id":"cjf1vkwsy000z2cgpt7l5z8rr"},{"name":"杂项","_id":"cjf1vkwt000132cgphbzdphc4"},{"name":"Spring-batch","_id":"cjf1vkwt500192cgphgzebgjx"}],"Data":[],"Page":[{"title":"404","date":"2018-03-21T12:50:55.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-03-21 20:50:55\n---\n","updated":"2018-03-22T01:25:05.608Z","path":"404/index.html","_id":"cjf136mrj0000iogydavwbba1","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","date":"2018-03-21T12:50:47.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2018-03-21 20:50:47\n---\n","updated":"2018-03-22T01:25:05.609Z","path":"search/index.html","_id":"cjf136mrj0001iogyxm63qn41","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404","date":"2018-03-21T12:50:55.000Z","_content":"\n自我审核中。。。。\n","source":"about/index.md","raw":"---\ntitle: 404\ndate: 2018-03-21 20:50:55\n---\n\n自我审核中。。。。\n","updated":"2018-03-22T09:38:31.478Z","path":"about/index.html","_id":"cjf2bnzsn0000xwgp5zdsi3ml","comments":1,"layout":"page","content":"<p>自我审核中。。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>自我审核中。。。。</p>\n"}],"Post":[{"title":" Spring-batch restart重拉机制\t\t","id":"64","date":"2017-12-22T06:27:28.000Z","_content":"\n对于Spring-batch中的Reader-processor-writer模式，例如\n<pre class=\"lang:default decode:true\">&lt;batch:step id=\"test-01\"&gt;\n\t&lt;batch:tasklet&gt;\n\t\t&lt;batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\"&gt;\n\t\t\t&lt;batch:writer&gt;\n\t\t\t\t&lt;bean class=\"com.test.TestW\" /&gt;\n\t\t\t&lt;/batch:writer&gt;\n\t\t&lt;/batch:chunk&gt;\n\t&lt;/batch:tasklet&gt;\n&lt;/batch:step&gt;</pre>\n如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。\n\n如果此时将\n<pre class=\"lang:default decode:true \">&lt;batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\"&gt;</pre>\n改为\n<pre class=\"lang:default decode:true \">&lt;batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"2\"&gt;</pre>\n这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。\n\n以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。","source":"_posts/P13.md","raw":"---\ntitle: \" Spring-batch restart重拉机制\\t\\t\"\nid: 64\ncategories:\n  - Spring-batch\ndate: 2017-12-22 14:27:28\ntags:\n---\n\n对于Spring-batch中的Reader-processor-writer模式，例如\n<pre class=\"lang:default decode:true\">&lt;batch:step id=\"test-01\"&gt;\n\t&lt;batch:tasklet&gt;\n\t\t&lt;batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\"&gt;\n\t\t\t&lt;batch:writer&gt;\n\t\t\t\t&lt;bean class=\"com.test.TestW\" /&gt;\n\t\t\t&lt;/batch:writer&gt;\n\t\t&lt;/batch:chunk&gt;\n\t&lt;/batch:tasklet&gt;\n&lt;/batch:step&gt;</pre>\n如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。\n\n如果此时将\n<pre class=\"lang:default decode:true \">&lt;batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\"&gt;</pre>\n改为\n<pre class=\"lang:default decode:true \">&lt;batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"2\"&gt;</pre>\n这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。\n\n以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。","slug":"P13","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf3l0000n4gplnh66r4d","content":"<p>对于Spring-batch中的Reader-processor-writer模式，例如</p>\n<p><pre class=\"lang:default decode:true\">&lt;batch:step id=”test-01”&gt;<br>    &lt;batch:tasklet&gt;<br>        &lt;batch:chunk reader=”testR” processor=”testP” commit-interval=”1”&gt;<br>            &lt;batch:writer&gt;<br>                &lt;bean class=”com.test.TestW” /&gt;<br>            &lt;/batch:writer&gt;<br>        &lt;/batch:chunk&gt;<br>    &lt;/batch:tasklet&gt;<br>&lt;/batch:step&gt;</pre><br>如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。</p>\n<p>如果此时将</p>\n<p><pre class=\"lang:default decode:true \">&lt;batch:chunk reader=”testR” processor=”testP” commit-interval=”1”&gt;</pre><br>改为</p>\n<p><pre class=\"lang:default decode:true \">&lt;batch:chunk reader=”testR” processor=”testP” commit-interval=”2”&gt;</pre><br>这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。</p>\n<p>以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于Spring-batch中的Reader-processor-writer模式，例如</p>\n<p><pre class=\"lang:default decode:true\">&lt;batch:step id=”test-01”&gt;<br>    &lt;batch:tasklet&gt;<br>        &lt;batch:chunk reader=”testR” processor=”testP” commit-interval=”1”&gt;<br>            &lt;batch:writer&gt;<br>                &lt;bean class=”com.test.TestW” /&gt;<br>            &lt;/batch:writer&gt;<br>        &lt;/batch:chunk&gt;<br>    &lt;/batch:tasklet&gt;<br>&lt;/batch:step&gt;</pre><br>如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。</p>\n<p>如果此时将</p>\n<p><pre class=\"lang:default decode:true \">&lt;batch:chunk reader=”testR” processor=”testP” commit-interval=”1”&gt;</pre><br>改为</p>\n<p><pre class=\"lang:default decode:true \">&lt;batch:chunk reader=”testR” processor=”testP” commit-interval=”2”&gt;</pre><br>这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。</p>\n<p>以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。</p>\n"},{"title":" 微信小程序初探","id":"66","date":"2017-12-22T02:20:31.000Z","_content":"\n>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。\n\n<h1>前言：</h1>\n<font size ='4' >距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  \n\n\n<h1>初探：</h1>\n\n\n1. 小程序的组成主要由以下四种类型文件：  \n\n  .js　　　JavaScrip文件  \n  .json　　项目配置文件，负责窗口颜色等等  \n  .wxss　　类似HTML文件  \n  .wxml　　类似CSS文件\n\n2. 小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：\n\n   * app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为* 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。\n   * app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。\n   * app.wxss　　不必须有这个文件，可以定义全局的css样式。\n   * app.wxml　　不必须有这个文件，并不是首页界面。  \n  \n3.  小程序的基本函数如下：  \n\n   * App函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  \n属性|描述|触发时机  \n-:| -: | -:   \nonLaunch|生命周期函数--监听小程序初始化|当小程序初始化完成时，会触发 onLaunch（全局只触发一次）  \nonShow|生命周期函数--监听小程序显示|当小程序启动，或从后台进入前台显示，会触发 onShow  \nonHide|Function|生命周期函数--监听小程序隐藏\t当小程序从前台进入后台，会触发 onHide  \nonError|Function|错误监听函数\t当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息  \n其他||开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问  \n\n   * Page函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。  \n属性 | 类型 | 描述 \n- | :-: | -:  \ndata | Object | 页面的初始数据 \nonLoad | Function | 生命周期函数--监听页面加载 \nonReady | Function | 生命周期函数--监听页面初次渲染完成 \nonShow | Function | 生命周期函数--监听页面显示 \nonHide | Function | 生命周期函数--监听页面隐藏 \nonUnload | Function | 生命周期函数--监听页面卸载 \nonPullDownRefresh | Function | 页面相关事件处理函数--监听用户下拉动作 \nonReachBottom | Function | 页面上拉触底事件的处理函数 \nonShareAppMessage | Function | 用户点击右上角转发 \nonPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问 \n\n4. 更多小程序API请参考官方文档。  \n   [点击传送门](https://developers.weixin.qq.com/miniprogram/dev/api/)  \n\n<h1>实践：</h1>\n\n通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。\n\n[数字爆炸小程序代码github地址](https://github.com/reallinxu/NumBomb.git)\n\n要点笔记：\n\n1. js文件中page中方法data为初始化数据，可以在wxml文件中通过{{demo}}来获取，也可在js定义的方法中通过setData进行修改。\n\n2. 传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。  \n     'getNumJson: function (e){  \n        var numjson = e.currentTarget.dataset.id;  \n     }'  \n\n3. 多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。\n\n4. 页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。  \n    wx.redirectTo({  \n    　　url: '../boom/boom'  \n\t})  \n    当页面在tabbar时，用此方法不会跳转，应使用：  \n\twx.switchTab({  \n\t　　url: '../index/index'  \n\t})  \n5. 图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 \n\n6. 隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden='true'，通过使用class='{{demo}}'在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。\n\n7. 普通方法中修改变量使用:  \n   'baseInput: function (e) {  \n   　　this.setData({  \n 　　　　baseNum: e.detail.value  \n   　　})  \n   }'    \n   wx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。\n\nName | Academy | score \n- | :-: | -: \nHarry Potter | Gryffindor| 90 \nHermione Granger | Gryffindor | 100 \nDraco Malfoy | Slytherin | 90\n\n\n| Name | Academy | score | \n| - | :-: | -: | \n| Harry Potter | Gryffindor| 90 | \n| Hermione Granger | Gryffindor | 100 | \n| Draco Malfoy | Slytherin | 90 |\n\n\n\n\n\n\n\n属性 | 类型 | 描述  \n- | :-: | -:   \ndata | Object | 页面的初始数据  \nonLoad | Function | 生命周期函数--监听页面加载  \nonReady | Function | 生命周期函数--监听页面初次渲染完成  \nonShow | Function | 生命周期函数--监听页面显示  \nonHide | Function | 生命周期函数--监听页面隐藏  \nonUnload | Function | 生命周期函数--监听页面卸载  \nonPullDownRefresh | Function | 页面相关事件处理函数--监听用户下拉动作  \nonReachBottom | Function | 页面上拉触底事件的处理函数  \nonShareAppMessage | Function | 用户点击右上角转发  \nonPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问  ","source":"_posts/P1.md","raw":"---\ntitle: \" 微信小程序初探\"\ntags:\n  - 微信，小程序\nid: 66\ncategories:\n  - WeChat小程序\ndate: 2017-12-22 10:20:31\n---\n\n>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。\n\n<h1>前言：</h1>\n<font size ='4' >距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  \n\n\n<h1>初探：</h1>\n\n\n1. 小程序的组成主要由以下四种类型文件：  \n\n  .js　　　JavaScrip文件  \n  .json　　项目配置文件，负责窗口颜色等等  \n  .wxss　　类似HTML文件  \n  .wxml　　类似CSS文件\n\n2. 小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：\n\n   * app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为* 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。\n   * app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。\n   * app.wxss　　不必须有这个文件，可以定义全局的css样式。\n   * app.wxml　　不必须有这个文件，并不是首页界面。  \n  \n3.  小程序的基本函数如下：  \n\n   * App函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  \n属性|描述|触发时机  \n-:| -: | -:   \nonLaunch|生命周期函数--监听小程序初始化|当小程序初始化完成时，会触发 onLaunch（全局只触发一次）  \nonShow|生命周期函数--监听小程序显示|当小程序启动，或从后台进入前台显示，会触发 onShow  \nonHide|Function|生命周期函数--监听小程序隐藏\t当小程序从前台进入后台，会触发 onHide  \nonError|Function|错误监听函数\t当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息  \n其他||开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问  \n\n   * Page函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。  \n属性 | 类型 | 描述 \n- | :-: | -:  \ndata | Object | 页面的初始数据 \nonLoad | Function | 生命周期函数--监听页面加载 \nonReady | Function | 生命周期函数--监听页面初次渲染完成 \nonShow | Function | 生命周期函数--监听页面显示 \nonHide | Function | 生命周期函数--监听页面隐藏 \nonUnload | Function | 生命周期函数--监听页面卸载 \nonPullDownRefresh | Function | 页面相关事件处理函数--监听用户下拉动作 \nonReachBottom | Function | 页面上拉触底事件的处理函数 \nonShareAppMessage | Function | 用户点击右上角转发 \nonPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问 \n\n4. 更多小程序API请参考官方文档。  \n   [点击传送门](https://developers.weixin.qq.com/miniprogram/dev/api/)  \n\n<h1>实践：</h1>\n\n通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。\n\n[数字爆炸小程序代码github地址](https://github.com/reallinxu/NumBomb.git)\n\n要点笔记：\n\n1. js文件中page中方法data为初始化数据，可以在wxml文件中通过{{demo}}来获取，也可在js定义的方法中通过setData进行修改。\n\n2. 传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。  \n     'getNumJson: function (e){  \n        var numjson = e.currentTarget.dataset.id;  \n     }'  \n\n3. 多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。\n\n4. 页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。  \n    wx.redirectTo({  \n    　　url: '../boom/boom'  \n\t})  \n    当页面在tabbar时，用此方法不会跳转，应使用：  \n\twx.switchTab({  \n\t　　url: '../index/index'  \n\t})  \n5. 图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 \n\n6. 隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden='true'，通过使用class='{{demo}}'在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。\n\n7. 普通方法中修改变量使用:  \n   'baseInput: function (e) {  \n   　　this.setData({  \n 　　　　baseNum: e.detail.value  \n   　　})  \n   }'    \n   wx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。\n\nName | Academy | score \n- | :-: | -: \nHarry Potter | Gryffindor| 90 \nHermione Granger | Gryffindor | 100 \nDraco Malfoy | Slytherin | 90\n\n\n| Name | Academy | score | \n| - | :-: | -: | \n| Harry Potter | Gryffindor| 90 | \n| Hermione Granger | Gryffindor | 100 | \n| Draco Malfoy | Slytherin | 90 |\n\n\n\n\n\n\n\n属性 | 类型 | 描述  \n- | :-: | -:   \ndata | Object | 页面的初始数据  \nonLoad | Function | 生命周期函数--监听页面加载  \nonReady | Function | 生命周期函数--监听页面初次渲染完成  \nonShow | Function | 生命周期函数--监听页面显示  \nonHide | Function | 生命周期函数--监听页面隐藏  \nonUnload | Function | 生命周期函数--监听页面卸载  \nonPullDownRefresh | Function | 页面相关事件处理函数--监听用户下拉动作  \nonReachBottom | Function | 页面上拉触底事件的处理函数  \nonShareAppMessage | Function | 用户点击右上角转发  \nonPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问  ","slug":"P1","published":1,"updated":"2018-04-12T06:00:34.607Z","_id":"cjfw3qf3t0001n4gpalmmxiv7","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。</p>\n</blockquote>\n<h1>前言：</h1><br><font size=\"4\">距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font><br><br><br><h1>初探：</h1>\n\n\n<ol>\n<li><p>小程序的组成主要由以下四种类型文件：  </p>\n<p>.js　　　JavaScrip文件<br>.json　　项目配置文件，负责窗口颜色等等<br>.wxss　　类似HTML文件<br>.wxml　　类似CSS文件</p>\n</li>\n<li><p>小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：</p>\n<ul>\n<li>app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为* 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。</li>\n<li>app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。</li>\n<li>app.wxss　　不必须有这个文件，可以定义全局的css样式。</li>\n<li>app.wxml　　不必须有这个文件，并不是首页界面。  </li>\n</ul>\n</li>\n<li><p>小程序的基本函数如下：  </p>\n<ul>\n<li><p>App函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。<br>属性|描述|触发时机<br>-:| -: | -:<br>onLaunch|生命周期函数–监听小程序初始化|当小程序初始化完成时，会触发 onLaunch（全局只触发一次）<br>onShow|生命周期函数–监听小程序显示|当小程序启动，或从后台进入前台显示，会触发 onShow<br>onHide|Function|生命周期函数–监听小程序隐藏    当小程序从前台进入后台，会触发 onHide<br>onError|Function|错误监听函数    当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息<br>其他||开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问  </p>\n</li>\n<li><p>Page函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。<br>属性 | 类型 | 描述 </p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>| :-: | -:<br>data | Object | 页面的初始数据<br>onLoad | Function | 生命周期函数–监听页面加载<br>onReady | Function | 生命周期函数–监听页面初次渲染完成<br>onShow | Function | 生命周期函数–监听页面显示<br>onHide | Function | 生命周期函数–监听页面隐藏<br>onUnload | Function | 生命周期函数–监听页面卸载<br>onPullDownRefresh | Function | 页面相关事件处理函数–监听用户下拉动作<br>onReachBottom | Function | 页面上拉触底事件的处理函数<br>onShareAppMessage | Function | 用户点击右上角转发<br>onPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问 </li>\n</ul>\n<ol>\n<li>更多小程序API请参考官方文档。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">点击传送门</a>  </li>\n</ol>\n<h1>实践：</h1>\n\n<p>通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。</p>\n<p><a href=\"https://github.com/reallinxu/NumBomb.git\" target=\"_blank\" rel=\"noopener\">数字爆炸小程序代码github地址</a></p>\n<p>要点笔记：</p>\n<ol>\n<li><p>js文件中page中方法data为初始化数据，可以在wxml文件中通过来获取，也可在js定义的方法中通过setData进行修改。</p>\n</li>\n<li><p>传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。<br>  ‘getNumJson: function (e){  </p>\n<pre><code>var numjson = e.currentTarget.dataset.id;  \n</code></pre><p>  }’  </p>\n</li>\n<li><p>多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。</p>\n</li>\n<li><p>页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。<br> wx.redirectTo({<br> 　　url: ‘../boom/boom’<br> })<br> 当页面在tabbar时，用此方法不会跳转，应使用：<br> wx.switchTab({<br> 　　url: ‘../index/index’<br> })  </p>\n</li>\n<li><p>图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 </p>\n</li>\n<li><p>隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden=’true’，通过使用class=’‘在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。</p>\n</li>\n<li><p>普通方法中修改变量使用:<br>‘baseInput: function (e) {<br>　　this.setData({<br>　　　　baseNum: e.detail.value<br>　　})<br>}’<br>wx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th style=\"text-align:center\">Academy</th>\n<th style=\"text-align:right\">score </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90 </td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100 </td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th style=\"text-align:center\">Academy</th>\n<th style=\"text-align:right\">score</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100</td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:right\">描述  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:right\">页面的初始数据  </td>\n</tr>\n<tr>\n<td>onLoad</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面加载  </td>\n</tr>\n<tr>\n<td>onReady</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面初次渲染完成  </td>\n</tr>\n<tr>\n<td>onShow</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面显示  </td>\n</tr>\n<tr>\n<td>onHide</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面隐藏  </td>\n</tr>\n<tr>\n<td>onUnload</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面卸载  </td>\n</tr>\n<tr>\n<td>onPullDownRefresh</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">页面相关事件处理函数–监听用户下拉动作  </td>\n</tr>\n<tr>\n<td>onReachBottom</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">页面上拉触底事件的处理函数  </td>\n</tr>\n<tr>\n<td>onShareAppMessage</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">用户点击右上角转发  </td>\n</tr>\n<tr>\n<td>onPageScroll</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问  </td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。</p>\n</blockquote>\n<h1>前言：</h1><br><font size=\"4\">距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font><br><br><br><h1>初探：</h1>\n\n\n<ol>\n<li><p>小程序的组成主要由以下四种类型文件：  </p>\n<p>.js　　　JavaScrip文件<br>.json　　项目配置文件，负责窗口颜色等等<br>.wxss　　类似HTML文件<br>.wxml　　类似CSS文件</p>\n</li>\n<li><p>小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：</p>\n<ul>\n<li>app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为* 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。</li>\n<li>app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。</li>\n<li>app.wxss　　不必须有这个文件，可以定义全局的css样式。</li>\n<li>app.wxml　　不必须有这个文件，并不是首页界面。  </li>\n</ul>\n</li>\n<li><p>小程序的基本函数如下：  </p>\n<ul>\n<li><p>App函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。<br>属性|描述|触发时机<br>-:| -: | -:<br>onLaunch|生命周期函数–监听小程序初始化|当小程序初始化完成时，会触发 onLaunch（全局只触发一次）<br>onShow|生命周期函数–监听小程序显示|当小程序启动，或从后台进入前台显示，会触发 onShow<br>onHide|Function|生命周期函数–监听小程序隐藏    当小程序从前台进入后台，会触发 onHide<br>onError|Function|错误监听函数    当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息<br>其他||开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问  </p>\n</li>\n<li><p>Page函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。<br>属性 | 类型 | 描述 </p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>| :-: | -:<br>data | Object | 页面的初始数据<br>onLoad | Function | 生命周期函数–监听页面加载<br>onReady | Function | 生命周期函数–监听页面初次渲染完成<br>onShow | Function | 生命周期函数–监听页面显示<br>onHide | Function | 生命周期函数–监听页面隐藏<br>onUnload | Function | 生命周期函数–监听页面卸载<br>onPullDownRefresh | Function | 页面相关事件处理函数–监听用户下拉动作<br>onReachBottom | Function | 页面上拉触底事件的处理函数<br>onShareAppMessage | Function | 用户点击右上角转发<br>onPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问 </li>\n</ul>\n<ol>\n<li>更多小程序API请参考官方文档。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">点击传送门</a>  </li>\n</ol>\n<h1>实践：</h1>\n\n<p>通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。</p>\n<p><a href=\"https://github.com/reallinxu/NumBomb.git\" target=\"_blank\" rel=\"noopener\">数字爆炸小程序代码github地址</a></p>\n<p>要点笔记：</p>\n<ol>\n<li><p>js文件中page中方法data为初始化数据，可以在wxml文件中通过来获取，也可在js定义的方法中通过setData进行修改。</p>\n</li>\n<li><p>传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。<br>  ‘getNumJson: function (e){  </p>\n<pre><code>var numjson = e.currentTarget.dataset.id;  \n</code></pre><p>  }’  </p>\n</li>\n<li><p>多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。</p>\n</li>\n<li><p>页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。<br> wx.redirectTo({<br> 　　url: ‘../boom/boom’<br> })<br> 当页面在tabbar时，用此方法不会跳转，应使用：<br> wx.switchTab({<br> 　　url: ‘../index/index’<br> })  </p>\n</li>\n<li><p>图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 </p>\n</li>\n<li><p>隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden=’true’，通过使用class=’‘在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。</p>\n</li>\n<li><p>普通方法中修改变量使用:<br>‘baseInput: function (e) {<br>　　this.setData({<br>　　　　baseNum: e.detail.value<br>　　})<br>}’<br>wx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th style=\"text-align:center\">Academy</th>\n<th style=\"text-align:right\">score </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90 </td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100 </td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th style=\"text-align:center\">Academy</th>\n<th style=\"text-align:right\">score</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100</td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:right\">描述  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td style=\"text-align:center\">Object</td>\n<td style=\"text-align:right\">页面的初始数据  </td>\n</tr>\n<tr>\n<td>onLoad</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面加载  </td>\n</tr>\n<tr>\n<td>onReady</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面初次渲染完成  </td>\n</tr>\n<tr>\n<td>onShow</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面显示  </td>\n</tr>\n<tr>\n<td>onHide</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面隐藏  </td>\n</tr>\n<tr>\n<td>onUnload</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">生命周期函数–监听页面卸载  </td>\n</tr>\n<tr>\n<td>onPullDownRefresh</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">页面相关事件处理函数–监听用户下拉动作  </td>\n</tr>\n<tr>\n<td>onReachBottom</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">页面上拉触底事件的处理函数  </td>\n</tr>\n<tr>\n<td>onShareAppMessage</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">用户点击右上角转发  </td>\n</tr>\n<tr>\n<td>onPageScroll</td>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:right\">页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问  </td>\n</tr>\n</tbody>\n</table>\n"},{"title":" WordPress搭建\t\t","id":"62","date":"2017-12-22T06:17:01.000Z","_content":"\n具体参考\n\nhttp://www.bandwagonhost.net/401.html\n\nhttp://www.bandwagonhost.net/403.html","source":"_posts/P16.md","raw":"---\ntitle: \" WordPress搭建\\t\\t\"\nid: 62\ncategories:\n  - WordPress\ndate: 2017-12-22 14:17:01\ntags:\n---\n\n具体参考\n\nhttp://www.bandwagonhost.net/401.html\n\nhttp://www.bandwagonhost.net/403.html","slug":"P16","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf3x0002n4gpbgsr6w07","content":"<p>具体参考</p>\n<p><a href=\"http://www.bandwagonhost.net/401.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/401.html</a></p>\n<p><a href=\"http://www.bandwagonhost.net/403.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/403.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>具体参考</p>\n<p><a href=\"http://www.bandwagonhost.net/401.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/401.html</a></p>\n<p><a href=\"http://www.bandwagonhost.net/403.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/403.html</a></p>\n"},{"title":" redis入门\t\t","id":"102","date":"2018-01-24T10:53:33.000Z","_content":"\n1.安装redis\n<pre class=\"lang:default decode:true \">[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n[root@linxu ~]# mkdir /usr/local/redis\n[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n[root@linxu redis-4.0.6]# make\n[root@linxu redis]# cd src\n[root@linxu src]# ./redis-server  #运行 \n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行</pre>\n2.测试redis\n<pre class=\"lang:default decode:true\">第一个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n第二个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-cli\n127.0.0.1:6379&gt; set test hahaah  \nOK\n127.0.0.1:6379&gt; get test\n\"hahaah\"\n127.0.0.1:6379&gt; \n</pre>\n3.利用jedis测试java连接redis\n<pre class=\"lang:default decode:true\">//pom.xml中添加\n&lt;dependency&gt;\n    &lt;groupId&gt;redis.clients&lt;/groupId&gt;\n    &lt;artifactId&gt;jedis&lt;/artifactId&gt;\n    &lt;version&gt;2.9.0&lt;/version&gt;\n&lt;/dependency&gt;</pre>\n测试代码：\n<pre class=\"lang:default decode:true\">package com.redis.demo;\n\nimport redis.clients.jedis.Jedis;\n\npublic class TestRedis {\n\n    public static void main(String[] args) {\n        //连接本地的 Redis 服务\n        Jedis jedis = new Jedis(\"192.168.43.163\",6379);\n        System.out.println(\"连接成功\");\n        //查看服务是否运行\n        System.out.println(\"服务正在运行: \"+jedis.ping());\n    }\n\n}</pre>\n运行时报异常：\n<pre class=\"lang:default decode:true \">Exception in thread \"main\" redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command 'CONFIG SET protected-mode no' from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to 'no', and then restarting the server. 3) If you started the server manually just for testing, restart it with the '--protected-mode no' option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.</pre>\n此时需要修改配置文件redis.conf，修改如下\n<pre class=\"lang:default decode:true\">1.#注释掉bind\n#bind 127.0.0.1\n2.protected-mode yes\n改为\nprotected-mode no</pre>\n重新启动redis即可\n\n&nbsp;","source":"_posts/P11.md","raw":"---\ntitle: \" redis入门\\t\\t\"\nid: 102\ncategories:\n  - Redis\ndate: 2018-01-24 18:53:33\ntags:\n---\n\n1.安装redis\n<pre class=\"lang:default decode:true \">[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n[root@linxu ~]# mkdir /usr/local/redis\n[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n[root@linxu redis-4.0.6]# make\n[root@linxu redis]# cd src\n[root@linxu src]# ./redis-server  #运行 \n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行</pre>\n2.测试redis\n<pre class=\"lang:default decode:true\">第一个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n第二个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-cli\n127.0.0.1:6379&gt; set test hahaah  \nOK\n127.0.0.1:6379&gt; get test\n\"hahaah\"\n127.0.0.1:6379&gt; \n</pre>\n3.利用jedis测试java连接redis\n<pre class=\"lang:default decode:true\">//pom.xml中添加\n&lt;dependency&gt;\n    &lt;groupId&gt;redis.clients&lt;/groupId&gt;\n    &lt;artifactId&gt;jedis&lt;/artifactId&gt;\n    &lt;version&gt;2.9.0&lt;/version&gt;\n&lt;/dependency&gt;</pre>\n测试代码：\n<pre class=\"lang:default decode:true\">package com.redis.demo;\n\nimport redis.clients.jedis.Jedis;\n\npublic class TestRedis {\n\n    public static void main(String[] args) {\n        //连接本地的 Redis 服务\n        Jedis jedis = new Jedis(\"192.168.43.163\",6379);\n        System.out.println(\"连接成功\");\n        //查看服务是否运行\n        System.out.println(\"服务正在运行: \"+jedis.ping());\n    }\n\n}</pre>\n运行时报异常：\n<pre class=\"lang:default decode:true \">Exception in thread \"main\" redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command 'CONFIG SET protected-mode no' from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to 'no', and then restarting the server. 3) If you started the server manually just for testing, restart it with the '--protected-mode no' option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.</pre>\n此时需要修改配置文件redis.conf，修改如下\n<pre class=\"lang:default decode:true\">1.#注释掉bind\n#bind 127.0.0.1\n2.protected-mode yes\n改为\nprotected-mode no</pre>\n重新启动redis即可\n\n&nbsp;","slug":"P11","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf3y0003n4gpiznynzys","content":"<p>1.安装redis</p>\n<p><pre class=\"lang:default decode:true \">[root@linxu ~]# wget <a href=\"http://download.redis.io/releases/redis-4.0.6.tar.gz\" target=\"_blank\" rel=\"noopener\">http://download.redis.io/releases/redis-4.0.6.tar.gz</a><br>[root@linxu ~]# tar xzf redis-4.0.6.tar.gz<br>[root@linxu ~]# mkdir /usr/local/redis<br>[root@linxu ~]# mv redis-4.0.6 /usr/local/redis<br>[root@linxu ~]# cd /usr/local/redis/redis-4.0.6<br>[root@linxu redis-4.0.6]# make<br>[root@linxu redis]# cd src<br>[root@linxu src]# ./redis-server  #运行<br>[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行</pre><br>2.测试redis</p>\n<p><pre class=\"lang:default decode:true\">第一个窗口:<br>[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src<br>[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行<br>第二个窗口:<br>[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src<br>[root@linxu src]# ./redis-cli<br>127.0.0.1:6379&gt; set test hahaah<br>OK<br>127.0.0.1:6379&gt; get test<br>“hahaah”<br>127.0.0.1:6379&gt;<br></pre><br>3.利用jedis测试java连接redis</p>\n<p><pre class=\"lang:default decode:true\">//pom.xml中添加<br>&lt;dependency&gt;<br>    &lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>    &lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>    &lt;version&gt;2.9.0&lt;/version&gt;<br>&lt;/dependency&gt;</pre><br>测试代码：</p>\n<p><pre class=\"lang:default decode:true\">package com.redis.demo;</pre></p>\n<p>import redis.clients.jedis.Jedis;</p>\n<p>public class TestRedis {</p>\n<pre><code>public static void main(String[] args) {\n    //连接本地的 Redis 服务\n    Jedis jedis = new Jedis(&quot;192.168.43.163&quot;,6379);\n    System.out.println(&quot;连接成功&quot;);\n    //查看服务是否运行\n    System.out.println(&quot;服务正在运行: &quot;+jedis.ping());\n}\n</code></pre><p>}<br>运行时报异常：</p>\n<p><pre class=\"lang:default decode:true \">Exception in thread “main” redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command ‘CONFIG SET protected-mode no’ from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to ‘no’, and then restarting the server. 3) If you started the server manually just for testing, restart it with the ‘–protected-mode no’ option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.</pre><br>此时需要修改配置文件redis.conf，修改如下</p>\n<p><pre class=\"lang:default decode:true\">1.#注释掉bind</pre></p>\n<p>#bind 127.0.0.1<br>2.protected-mode yes<br>改为<br>protected-mode no<br>重新启动redis即可</p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.安装redis</p>\n<p><pre class=\"lang:default decode:true \">[root@linxu ~]# wget <a href=\"http://download.redis.io/releases/redis-4.0.6.tar.gz\" target=\"_blank\" rel=\"noopener\">http://download.redis.io/releases/redis-4.0.6.tar.gz</a><br>[root@linxu ~]# tar xzf redis-4.0.6.tar.gz<br>[root@linxu ~]# mkdir /usr/local/redis<br>[root@linxu ~]# mv redis-4.0.6 /usr/local/redis<br>[root@linxu ~]# cd /usr/local/redis/redis-4.0.6<br>[root@linxu redis-4.0.6]# make<br>[root@linxu redis]# cd src<br>[root@linxu src]# ./redis-server  #运行<br>[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行</pre><br>2.测试redis</p>\n<p><pre class=\"lang:default decode:true\">第一个窗口:<br>[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src<br>[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行<br>第二个窗口:<br>[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src<br>[root@linxu src]# ./redis-cli<br>127.0.0.1:6379&gt; set test hahaah<br>OK<br>127.0.0.1:6379&gt; get test<br>“hahaah”<br>127.0.0.1:6379&gt;<br></pre><br>3.利用jedis测试java连接redis</p>\n<p><pre class=\"lang:default decode:true\">//pom.xml中添加<br>&lt;dependency&gt;<br>    &lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>    &lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>    &lt;version&gt;2.9.0&lt;/version&gt;<br>&lt;/dependency&gt;</pre><br>测试代码：</p>\n<p><pre class=\"lang:default decode:true\">package com.redis.demo;</pre></p>\n<p>import redis.clients.jedis.Jedis;</p>\n<p>public class TestRedis {</p>\n<pre><code>public static void main(String[] args) {\n    //连接本地的 Redis 服务\n    Jedis jedis = new Jedis(&quot;192.168.43.163&quot;,6379);\n    System.out.println(&quot;连接成功&quot;);\n    //查看服务是否运行\n    System.out.println(&quot;服务正在运行: &quot;+jedis.ping());\n}\n</code></pre><p>}<br>运行时报异常：</p>\n<p><pre class=\"lang:default decode:true \">Exception in thread “main” redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command ‘CONFIG SET protected-mode no’ from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to ‘no’, and then restarting the server. 3) If you started the server manually just for testing, restart it with the ‘–protected-mode no’ option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.</pre><br>此时需要修改配置文件redis.conf，修改如下</p>\n<p><pre class=\"lang:default decode:true\">1.#注释掉bind</pre></p>\n<p>#bind 127.0.0.1<br>2.protected-mode yes<br>改为<br>protected-mode no<br>重新启动redis即可</p>\n<p>&nbsp;</p>\n"},{"title":" java8初识\t\t","id":"156","date":"2018-03-13T01:19:22.000Z","_content":"\n1.接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)\n\n2.一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)\n\n3.Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)\n\n4.我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)\n\n5.lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)\n\n6.lambda表达式可以访问全部变量。(test3)\n\n7.当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)\n\n8.当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)\n\n9.数据流基础操作。(test5)\n\n9数据流衔接操作只在终止操作调用时被执行。(test6)\n\n10.衔接操作是垂直进行的，数据流执行顺序研究.(test6)\n\n11.Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)\n\n12.要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)\n\n13.Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)\n\n14.executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)\n\nPS:括号内为测试代码，代码地址：https://github.com/reallinxu/java8Test","source":"_posts/P10.md","raw":"---\ntitle: \" java8初识\\t\\t\"\nid: 156\ncategories:\n  - 杂项\ndate: 2018-03-13 09:19:22\ntags:\n---\n\n1.接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)\n\n2.一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)\n\n3.Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)\n\n4.我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)\n\n5.lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)\n\n6.lambda表达式可以访问全部变量。(test3)\n\n7.当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)\n\n8.当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)\n\n9.数据流基础操作。(test5)\n\n9数据流衔接操作只在终止操作调用时被执行。(test6)\n\n10.衔接操作是垂直进行的，数据流执行顺序研究.(test6)\n\n11.Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)\n\n12.要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)\n\n13.Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)\n\n14.executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)\n\nPS:括号内为测试代码，代码地址：https://github.com/reallinxu/java8Test","slug":"P10","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf400005n4gpm7cewrbx","content":"<p>1.接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)</p>\n<p>2.一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)</p>\n<p>3.Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)</p>\n<p>4.我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)</p>\n<p>5.lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)</p>\n<p>6.lambda表达式可以访问全部变量。(test3)</p>\n<p>7.当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)</p>\n<p>8.当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)</p>\n<p>9.数据流基础操作。(test5)</p>\n<p>9数据流衔接操作只在终止操作调用时被执行。(test6)</p>\n<p>10.衔接操作是垂直进行的，数据流执行顺序研究.(test6)</p>\n<p>11.Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)</p>\n<p>12.要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)</p>\n<p>13.Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)</p>\n<p>14.executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)</p>\n<p>PS:括号内为测试代码，代码地址：<a href=\"https://github.com/reallinxu/java8Test\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/java8Test</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)</p>\n<p>2.一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)</p>\n<p>3.Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)</p>\n<p>4.我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)</p>\n<p>5.lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)</p>\n<p>6.lambda表达式可以访问全部变量。(test3)</p>\n<p>7.当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)</p>\n<p>8.当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)</p>\n<p>9.数据流基础操作。(test5)</p>\n<p>9数据流衔接操作只在终止操作调用时被执行。(test6)</p>\n<p>10.衔接操作是垂直进行的，数据流执行顺序研究.(test6)</p>\n<p>11.Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)</p>\n<p>12.要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)</p>\n<p>13.Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)</p>\n<p>14.executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)</p>\n<p>PS:括号内为测试代码，代码地址：<a href=\"https://github.com/reallinxu/java8Test\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/java8Test</a></p>\n"},{"title":" vi文件Found a swap file by the name \t\t","id":"105","date":"2018-01-24T10:59:56.000Z","_content":"\n在vi文件时出现  Found a swap file by the name <span class=\"string\">\".Test.java.swp\"</span>   提示，是因为之前vi异常中断.\n\nls -a可以查看隐藏文件*.swap\n\nrm *.swap即可","source":"_posts/P14.md","raw":"---\ntitle: \" vi文件Found\\_a\\_swap\\_file\\_by\\_the\\_name\\_\\t\\t\"\nid: 105\ncategories:\n  - 杂项\ndate: 2018-01-24 18:59:56\ntags:\n---\n\n在vi文件时出现  Found a swap file by the name <span class=\"string\">\".Test.java.swp\"</span>   提示，是因为之前vi异常中断.\n\nls -a可以查看隐藏文件*.swap\n\nrm *.swap即可","slug":"P14","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf420006n4gpl90baw6m","content":"<p>在vi文件时出现  Found a swap file by the name <span class=\"string\">“.Test.java.swp”</span>   提示，是因为之前vi异常中断.</p>\n<p>ls -a可以查看隐藏文件*.swap</p>\n<p>rm *.swap即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在vi文件时出现  Found a swap file by the name <span class=\"string\">“.Test.java.swp”</span>   提示，是因为之前vi异常中断.</p>\n<p>ls -a可以查看隐藏文件*.swap</p>\n<p>rm *.swap即可</p>\n"},{"title":" WordPress TwentyFourteen页面不居中问题解决","id":"60","date":"2017-12-22T06:12:35.000Z","_content":"\n选择  仪表盘--&gt;外观--&gt;编辑\n\n选择style.css，找到如下代码：\n<pre class=\"lang:default decode:true\">html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, font, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td {\n\tborder: 0;\n\tfont-family: inherit;\n\tfont-size: 100%;\n\tfont-style: inherit;\n\tfont-weight: inherit;\n\tmargin: 0;\n\toutline: 0;\n\tpadding: 0;\n\tvertical-align: baseline;\n}</pre>\n将\n<pre class=\"lang:default decode:true  \">\tmargin: 0;</pre>\n改为\n<pre class=\"lang:default decode:true \">     margin: auto;</pre>\n更新文件即可居中。","source":"_posts/P2.md","raw":"---\ntitle: \" WordPress TwentyFourteen页面不居中问题解决\"\nid: 60\ncategories:\n  - WordPress\ndate: 2017-12-22 14:12:35\ntags:\n---\n\n选择  仪表盘--&gt;外观--&gt;编辑\n\n选择style.css，找到如下代码：\n<pre class=\"lang:default decode:true\">html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, font, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td {\n\tborder: 0;\n\tfont-family: inherit;\n\tfont-size: 100%;\n\tfont-style: inherit;\n\tfont-weight: inherit;\n\tmargin: 0;\n\toutline: 0;\n\tpadding: 0;\n\tvertical-align: baseline;\n}</pre>\n将\n<pre class=\"lang:default decode:true  \">\tmargin: 0;</pre>\n改为\n<pre class=\"lang:default decode:true \">     margin: auto;</pre>\n更新文件即可居中。","slug":"P2","published":1,"updated":"2018-03-27T02:23:04.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf4s000bn4gpcokzln23","content":"<p>选择  仪表盘–&gt;外观–&gt;编辑</p>\n<p>选择style.css，找到如下代码：</p>\n<p><pre class=\"lang:default decode:true\">html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, font, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td {<br>    border: 0;<br>    font-family: inherit;<br>    font-size: 100%;<br>    font-style: inherit;<br>    font-weight: inherit;<br>    margin: 0;<br>    outline: 0;<br>    padding: 0;<br>    vertical-align: baseline;<br>}</pre><br>将</p>\n<p><pre class=\"lang:default decode:true  \">    margin: 0;</pre><br>改为</p>\n<p><pre class=\"lang:default decode:true \">     margin: auto;</pre><br>更新文件即可居中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>选择  仪表盘–&gt;外观–&gt;编辑</p>\n<p>选择style.css，找到如下代码：</p>\n<p><pre class=\"lang:default decode:true\">html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, font, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td {<br>    border: 0;<br>    font-family: inherit;<br>    font-size: 100%;<br>    font-style: inherit;<br>    font-weight: inherit;<br>    margin: 0;<br>    outline: 0;<br>    padding: 0;<br>    vertical-align: baseline;<br>}</pre><br>将</p>\n<p><pre class=\"lang:default decode:true  \">    margin: 0;</pre><br>改为</p>\n<p><pre class=\"lang:default decode:true \">     margin: auto;</pre><br>更新文件即可居中。</p>\n"},{"title":" WordPress从Apache迁移到nginx\t\t","id":"130","date":"2018-01-29T07:02:48.000Z","_content":"\n参考：http://xxx.onlymyzhongyi.com/?p=345\n\n1.停掉httpd当前服务，禁用重启\n<pre class=\"lang:default decode:true \">#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p \nchkconfig httpd off</pre>\n2.安装nginx\n<pre class=\"lang:default decode:true \">yum -y install nginx</pre>\n3.安装php-fpm\n<pre class=\"lang:default decode:true\">yum install php-fpm\n/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\nchkconfig php-fpm on</pre>\n4.编辑nginx配置文件\n<pre class=\"lang:default decode:true \">vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }\n</pre>\n5.新建日志目录并赋权限\n<pre class=\"lang:default decode:true \">mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm /var/log/nginx/aaa</pre>\n6.安装最新的php-mysql\n<pre class=\"lang:default decode:true \">yum update\nyum install php-mysql</pre>\n7.启动nginx\n<pre class=\"lang:default decode:true \">service nginx start</pre>\n8.此时访问可能会出现数据库错误\n<pre class=\"lang:default decode:true \">vi wp-config.php\n#修改以下部分\ndefine( 'WP_DEBUG', true );</pre>\n再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下\n<pre class=\"lang:default decode:true\">define( 'DB_HOST', '127.0.0.1' );   #原为localhost</pre>\n9.修改线程数，优化内存\n<pre class=\"lang:default decode:true \">vi /etc/php-fpm.d/www.conf   #修改如下\n;最大线程数\npm.max_children = 3\n;初始线程数\npm.start_servers = 1\n;最小空余线程数\npm.min_spare_servers = 1\n;最大空余线程数\npm.max_spare_servers = 1\n;php_admin内存最大限制\nphp_admin_value[memory_limit] = 128M</pre>\n&nbsp;\n\n&nbsp;\n\n&nbsp;","source":"_posts/P15.md","raw":"---\ntitle: \" WordPress从Apache迁移到nginx\\t\\t\"\nid: 130\ncategories:\n  - WordPress\ndate: 2018-01-29 15:02:48\ntags:\n---\n\n参考：http://xxx.onlymyzhongyi.com/?p=345\n\n1.停掉httpd当前服务，禁用重启\n<pre class=\"lang:default decode:true \">#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p \nchkconfig httpd off</pre>\n2.安装nginx\n<pre class=\"lang:default decode:true \">yum -y install nginx</pre>\n3.安装php-fpm\n<pre class=\"lang:default decode:true\">yum install php-fpm\n/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\nchkconfig php-fpm on</pre>\n4.编辑nginx配置文件\n<pre class=\"lang:default decode:true \">vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }\n</pre>\n5.新建日志目录并赋权限\n<pre class=\"lang:default decode:true \">mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm /var/log/nginx/aaa</pre>\n6.安装最新的php-mysql\n<pre class=\"lang:default decode:true \">yum update\nyum install php-mysql</pre>\n7.启动nginx\n<pre class=\"lang:default decode:true \">service nginx start</pre>\n8.此时访问可能会出现数据库错误\n<pre class=\"lang:default decode:true \">vi wp-config.php\n#修改以下部分\ndefine( 'WP_DEBUG', true );</pre>\n再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下\n<pre class=\"lang:default decode:true\">define( 'DB_HOST', '127.0.0.1' );   #原为localhost</pre>\n9.修改线程数，优化内存\n<pre class=\"lang:default decode:true \">vi /etc/php-fpm.d/www.conf   #修改如下\n;最大线程数\npm.max_children = 3\n;初始线程数\npm.start_servers = 1\n;最小空余线程数\npm.min_spare_servers = 1\n;最大空余线程数\npm.max_spare_servers = 1\n;php_admin内存最大限制\nphp_admin_value[memory_limit] = 128M</pre>\n&nbsp;\n\n&nbsp;\n\n&nbsp;","slug":"P15","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf4u000cn4gppi9evi6y","content":"<p>参考：<a href=\"http://xxx.onlymyzhongyi.com/?p=345\" target=\"_blank\" rel=\"noopener\">http://xxx.onlymyzhongyi.com/?p=345</a></p>\n<p>1.停掉httpd当前服务，禁用重启</p>\n<p><pre class=\"lang:default decode:true \">#停掉httpd<br>service httpd stop</pre></p>\n<p>#开机重启后，apache服务不再启动p<br>chkconfig httpd off<br>2.安装nginx</p>\n<p><pre class=\"lang:default decode:true \">yum -y install nginx</pre><br>3.安装php-fpm</p>\n<p><pre class=\"lang:default decode:true\">yum install php-fpm<br>/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启<br>chkconfig php-fpm on</pre><br>4.编辑nginx配置文件</p>\n<p><pre class=\"lang:default decode:true \">vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下</pre></p>\n<p>#转发给wordpress网站<br>server {<br>    listen 80;<br>    server_name <a href=\"http://www.reallinxu.com\" target=\"_blank\" rel=\"noopener\">www.reallinxu.com</a>;<br>    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info<br>    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error </p>\n<pre><code>location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n}\n\nerror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\nlocation = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n}\n\nerror_page 500 502 503 504 /50x.html;\nlocation = /50x.html {\n         root /data/www/www.reallinxu.com;\n}\n\n# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\nlocation ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n}\nlocation ~ /\\.ht {\n         deny all;\n}\n\nrewrite /wp-admin$ $scheme://$host$uri/ permanent;\n</code></pre><p> }<br><br>5.新建日志目录并赋权限</p>\n<p><pre class=\"lang:default decode:true \">mkdir -p /var/log/nginx/aaa<br>chown -R nginx:adm /var/log/nginx/aaa</pre><br>6.安装最新的php-mysql</p>\n<p><pre class=\"lang:default decode:true \">yum update<br>yum install php-mysql</pre><br>7.启动nginx</p>\n<p><pre class=\"lang:default decode:true \">service nginx start</pre><br>8.此时访问可能会出现数据库错误</p>\n<p><pre class=\"lang:default decode:true \">vi wp-config.php</pre></p>\n<p>#修改以下部分<br>define( ‘WP_DEBUG’, true );<br>再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下</p>\n<p><pre class=\"lang:default decode:true\">define( ‘DB_HOST’, ‘127.0.0.1’ );   #原为localhost</pre><br>9.修改线程数，优化内存</p>\n<p><pre class=\"lang:default decode:true \">vi /etc/php-fpm.d/<a href=\"http://www.conf\" target=\"_blank\" rel=\"noopener\">www.conf</a>   #修改如下<br>;最大线程数<br>pm.max_children = 3<br>;初始线程数<br>pm.start_servers = 1<br>;最小空余线程数<br>pm.min_spare_servers = 1<br>;最大空余线程数<br>pm.max_spare_servers = 1<br>;php_admin内存最大限制<br>php_admin_value[memory_limit] = 128M</pre><br>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考：<a href=\"http://xxx.onlymyzhongyi.com/?p=345\" target=\"_blank\" rel=\"noopener\">http://xxx.onlymyzhongyi.com/?p=345</a></p>\n<p>1.停掉httpd当前服务，禁用重启</p>\n<p><pre class=\"lang:default decode:true \">#停掉httpd<br>service httpd stop</pre></p>\n<p>#开机重启后，apache服务不再启动p<br>chkconfig httpd off<br>2.安装nginx</p>\n<p><pre class=\"lang:default decode:true \">yum -y install nginx</pre><br>3.安装php-fpm</p>\n<p><pre class=\"lang:default decode:true\">yum install php-fpm<br>/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启<br>chkconfig php-fpm on</pre><br>4.编辑nginx配置文件</p>\n<p><pre class=\"lang:default decode:true \">vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下</pre></p>\n<p>#转发给wordpress网站<br>server {<br>    listen 80;<br>    server_name <a href=\"http://www.reallinxu.com\" target=\"_blank\" rel=\"noopener\">www.reallinxu.com</a>;<br>    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info<br>    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error </p>\n<pre><code>location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n}\n\nerror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\nlocation = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n}\n\nerror_page 500 502 503 504 /50x.html;\nlocation = /50x.html {\n         root /data/www/www.reallinxu.com;\n}\n\n# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\nlocation ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n}\nlocation ~ /\\.ht {\n         deny all;\n}\n\nrewrite /wp-admin$ $scheme://$host$uri/ permanent;\n</code></pre><p> }<br><br>5.新建日志目录并赋权限</p>\n<p><pre class=\"lang:default decode:true \">mkdir -p /var/log/nginx/aaa<br>chown -R nginx:adm /var/log/nginx/aaa</pre><br>6.安装最新的php-mysql</p>\n<p><pre class=\"lang:default decode:true \">yum update<br>yum install php-mysql</pre><br>7.启动nginx</p>\n<p><pre class=\"lang:default decode:true \">service nginx start</pre><br>8.此时访问可能会出现数据库错误</p>\n<p><pre class=\"lang:default decode:true \">vi wp-config.php</pre></p>\n<p>#修改以下部分<br>define( ‘WP_DEBUG’, true );<br>再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下</p>\n<p><pre class=\"lang:default decode:true\">define( ‘DB_HOST’, ‘127.0.0.1’ );   #原为localhost</pre><br>9.修改线程数，优化内存</p>\n<p><pre class=\"lang:default decode:true \">vi /etc/php-fpm.d/<a href=\"http://www.conf\" target=\"_blank\" rel=\"noopener\">www.conf</a>   #修改如下<br>;最大线程数<br>pm.max_children = 3<br>;初始线程数<br>pm.start_servers = 1<br>;最小空余线程数<br>pm.min_spare_servers = 1<br>;最大空余线程数<br>pm.max_spare_servers = 1<br>;php_admin内存最大限制<br>php_admin_value[memory_limit] = 128M</pre><br>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n"},{"title":" centos服务器安装mysql","id":"75","date":"2018-01-12T08:14:23.000Z","_content":"\n1.安装mysql\n<pre class=\"lang:default decode:true \">[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n[root@localhost ~]yum install mysql #安装客户端\n[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]yum install mysql-community-server #安装server\n[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装</pre>\n2.服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限\n<pre class=\"lang:default decode:true \">[root@localhost ~]grant all on *.* to test@'%' identified by '123456'; *.*，表示赋予用户操作服务器上所有数据库所有表的权限。 %，表示所有ip\ngrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’</pre>\n3.删除权限\n<pre class=\"lang:default decode:true\">[root@localhost ~]grant all on *.* to test@'%' identified by '123456'; *.*，表示赋予用户操作服务器上所有数据库所有表的权限。 %，表示所有ip\nrevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址</pre>\n&nbsp;","source":"_posts/P4.md","raw":"---\ntitle: \" centos服务器安装mysql\"\nid: 75\ncategories:\n  - CentOS\ndate: 2018-01-12 16:14:23\ntags:\n---\n\n1.安装mysql\n<pre class=\"lang:default decode:true \">[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n[root@localhost ~]yum install mysql #安装客户端\n[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]yum install mysql-community-server #安装server\n[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装</pre>\n2.服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限\n<pre class=\"lang:default decode:true \">[root@localhost ~]grant all on *.* to test@'%' identified by '123456'; *.*，表示赋予用户操作服务器上所有数据库所有表的权限。 %，表示所有ip\ngrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’</pre>\n3.删除权限\n<pre class=\"lang:default decode:true\">[root@localhost ~]grant all on *.* to test@'%' identified by '123456'; *.*，表示赋予用户操作服务器上所有数据库所有表的权限。 %，表示所有ip\nrevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址</pre>\n&nbsp;","slug":"P4","published":1,"updated":"2018-03-27T02:33:36.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf4w000dn4gpll0m2euq","content":"<p>1.安装mysql</p>\n<p><pre class=\"lang:default decode:true \">[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。<br>[root@localhost ~]yum install mysql #安装客户端<br>[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)<br>[root@localhost ~]wget <a href=\"http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</a><br>[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm<br>[root@localhost ~]yum install mysql-community-server #安装server<br>[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装</pre><br>2.服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限</p>\n<p><pre class=\"lang:default decode:true \">[root@localhost ~]grant all on <em>.</em> to test@’%’ identified by ‘123456’; <em>.</em>，表示赋予用户操作服务器上所有数据库所有表的权限。 %，表示所有ip<br>grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’</pre><br>3.删除权限</p>\n<p><pre class=\"lang:default decode:true\">[root@localhost ~]grant all on <em>.</em> to test@’%’ identified by ‘123456’; <em>.</em>，表示赋予用户操作服务器上所有数据库所有表的权限。 %，表示所有ip<br>revoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址</pre><br>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.安装mysql</p>\n<p><pre class=\"lang:default decode:true \">[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。<br>[root@localhost ~]yum install mysql #安装客户端<br>[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)<br>[root@localhost ~]wget <a href=\"http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</a><br>[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm<br>[root@localhost ~]yum install mysql-community-server #安装server<br>[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装</pre><br>2.服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限</p>\n<p><pre class=\"lang:default decode:true \">[root@localhost ~]grant all on <em>.</em> to test@’%’ identified by ‘123456’; <em>.</em>，表示赋予用户操作服务器上所有数据库所有表的权限。 %，表示所有ip<br>grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’</pre><br>3.删除权限</p>\n<p><pre class=\"lang:default decode:true\">[root@localhost ~]grant all on <em>.</em> to test@’%’ identified by ‘123456’; <em>.</em>，表示赋予用户操作服务器上所有数据库所有表的权限。 %，表示所有ip<br>revoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址</pre><br>&nbsp;</p>\n"},{"title":" Dubbo+Zookeeper+Spring-boot+dubbo-simple 搭建入门","id":"80","date":"2018-01-23T08:16:32.000Z","_content":"\n1.安装Zookeeper\n<pre class=\"lang:default decode:true \">[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n[root@linxu conf]# vi zoo.cfg \n#修改配置对应项\ndataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\ndataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n[root@linxu conf]# vi /etc/profile\n末尾添加\nexport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\nexport PATH=$ZOOKEEPER_HOME/bin:$PATH\nexport PATH\n[root@linxu conf]# source /etc/profile #使生效\n[root@linxu conf]# zkServer.sh start   #启动\n[root@linxu conf]# zkServer.sh status  #查看状态\n[root@linxu conf]# zkServer.sh stop    #停止\n[root@linxu conf]# zkServer.sh restart #重启\n\n</pre>\n2.部署dubbo-admin\n\n从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)\n\ndubbo地址：https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问http://localhost:8080/dubbo-admin-2.5.8/\n\n3.本地使用spring-boot创建提供者（provider）和消费者(consume)\n\n代码：https://github.com/reallinxu/spring-boot-dubbo\n\n分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。\n\nPS：provider和consume的接口位置必须一致\n\n4.搭建dubbo-simple监控\n\n从github上下载dubbox源码，编译dubbo-monitor-simple\n\ndubbox地址：https://github.com/reallinxu/dubbox\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器\n<pre class=\"lang:default decode:true\">[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n修改dubbo.properties\ndubbo.container=log4j,spring,registry,jetty\ndubbo.application.name=simple-monitor\ndubbo.application.owner=\n#dubbo.registry.address=multicast://224.5.6.7:1234\ndubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n#dubbo.registry.address=redis://127.0.0.1:6379\n#dubbo.registry.address=dubbo://127.0.0.1:9090\ndubbo.protocol.port=7070\ndubbo.jetty.port=7072  #jetty端口，避免冲突\ndubbo.jetty.directory=${user.home}/monitor\ndubbo.charts.directory=${dubbo.jetty.directory}/charts\ndubbo.statistics.directory=${user.home}/monitor/statistics\ndubbo.log4j.file=logs/dubbo-monitor-simple.log\ndubbo.log4j.level=WARN</pre>\n启动dubbo-simple\n<pre class=\"lang:default decode:true \">[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n[root@linxu bin]# sh start.sh</pre>\n启动成功后登陆访问http://192.168.43.163:7072 (端口为jetty端口)\n\n如果查看不到监控提供者\n\ncom.alibaba.dubbo.monitor.MonitorService\n\n请核对dubbo.properties zookeeper地址和端口是否正确\n\n&nbsp;","source":"_posts/P3.md","raw":"---\ntitle: \" Dubbo+Zookeeper+Spring-boot+dubbo-simple 搭建入门\"\nid: 80\ncategories:\n  - Dubbo\ndate: 2018-01-23 16:16:32\ntags:\n---\n\n1.安装Zookeeper\n<pre class=\"lang:default decode:true \">[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n[root@linxu conf]# vi zoo.cfg \n#修改配置对应项\ndataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\ndataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n[root@linxu conf]# vi /etc/profile\n末尾添加\nexport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\nexport PATH=$ZOOKEEPER_HOME/bin:$PATH\nexport PATH\n[root@linxu conf]# source /etc/profile #使生效\n[root@linxu conf]# zkServer.sh start   #启动\n[root@linxu conf]# zkServer.sh status  #查看状态\n[root@linxu conf]# zkServer.sh stop    #停止\n[root@linxu conf]# zkServer.sh restart #重启\n\n</pre>\n2.部署dubbo-admin\n\n从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)\n\ndubbo地址：https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问http://localhost:8080/dubbo-admin-2.5.8/\n\n3.本地使用spring-boot创建提供者（provider）和消费者(consume)\n\n代码：https://github.com/reallinxu/spring-boot-dubbo\n\n分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。\n\nPS：provider和consume的接口位置必须一致\n\n4.搭建dubbo-simple监控\n\n从github上下载dubbox源码，编译dubbo-monitor-simple\n\ndubbox地址：https://github.com/reallinxu/dubbox\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器\n<pre class=\"lang:default decode:true\">[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n修改dubbo.properties\ndubbo.container=log4j,spring,registry,jetty\ndubbo.application.name=simple-monitor\ndubbo.application.owner=\n#dubbo.registry.address=multicast://224.5.6.7:1234\ndubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n#dubbo.registry.address=redis://127.0.0.1:6379\n#dubbo.registry.address=dubbo://127.0.0.1:9090\ndubbo.protocol.port=7070\ndubbo.jetty.port=7072  #jetty端口，避免冲突\ndubbo.jetty.directory=${user.home}/monitor\ndubbo.charts.directory=${dubbo.jetty.directory}/charts\ndubbo.statistics.directory=${user.home}/monitor/statistics\ndubbo.log4j.file=logs/dubbo-monitor-simple.log\ndubbo.log4j.level=WARN</pre>\n启动dubbo-simple\n<pre class=\"lang:default decode:true \">[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n[root@linxu bin]# sh start.sh</pre>\n启动成功后登陆访问http://192.168.43.163:7072 (端口为jetty端口)\n\n如果查看不到监控提供者\n\ncom.alibaba.dubbo.monitor.MonitorService\n\n请核对dubbo.properties zookeeper地址和端口是否正确\n\n&nbsp;","slug":"P3","published":1,"updated":"2018-03-27T02:31:55.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf4y000en4gpnc51znrh","content":"<p>1.安装Zookeeper</p>\n<p><pre class=\"lang:default decode:true \">[root@linxu ~]#  wget <a href=\"http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\" target=\"_blank\" rel=\"noopener\">http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz</a><br>[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用<br>[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz<br>[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir<br>[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf<br>[root@linxu conf]# cp zoo_sample.cfg zoo.cfg<br>[root@linxu conf]# vi zoo.cfg </pre></p>\n<p>#修改配置对应项<br>dataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data<br>dataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs<br>[root@linxu conf]# vi /etc/profile<br>末尾添加<br>export ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/<br>export PATH=$ZOOKEEPER_HOME/bin:$PATH<br>export PATH<br>[root@linxu conf]# source /etc/profile #使生效<br>[root@linxu conf]# zkServer.sh start   #启动<br>[root@linxu conf]# zkServer.sh status  #查看状态<br>[root@linxu conf]# zkServer.sh stop    #停止<br>[root@linxu conf]# zkServer.sh restart #重启</p>\n<p><br>2.部署dubbo-admin</p>\n<p>从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)</p>\n<p>dubbo地址：<a href=\"https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/dubbo/tree/dubbo-2.5.8</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问<a href=\"http://localhost:8080/dubbo-admin-2.5.8/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/dubbo-admin-2.5.8/</a></p>\n<p>3.本地使用spring-boot创建提供者（provider）和消费者(consume)</p>\n<p>代码：<a href=\"https://github.com/reallinxu/spring-boot-dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/spring-boot-dubbo</a></p>\n<p>分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。</p>\n<p>PS：provider和consume的接口位置必须一致</p>\n<p>4.搭建dubbo-simple监控</p>\n<p>从github上下载dubbox源码，编译dubbo-monitor-simple</p>\n<p>dubbox地址：<a href=\"https://github.com/reallinxu/dubbox\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/dubbox</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器</p>\n<p><pre class=\"lang:default decode:true\">[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz<br>[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf<br>修改dubbo.properties<br>dubbo.container=log4j,spring,registry,jetty<br>dubbo.application.name=simple-monitor<br>dubbo.application.owner=</pre></p>\n<p>#dubbo.registry.address=multicast://224.5.6.7:1234<br>dubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址</p>\n<p>#dubbo.registry.address=redis://127.0.0.1:6379</p>\n<p>#dubbo.registry.address=dubbo://127.0.0.1:9090<br>dubbo.protocol.port=7070<br>dubbo.jetty.port=7072  #jetty端口，避免冲突<br>dubbo.jetty.directory=${user.home}/monitor<br>dubbo.charts.directory=${dubbo.jetty.directory}/charts<br>dubbo.statistics.directory=${user.home}/monitor/statistics<br>dubbo.log4j.file=logs/dubbo-monitor-simple.log<br>dubbo.log4j.level=WARN<br>启动dubbo-simple</p>\n<p><pre class=\"lang:default decode:true \">[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin<br>[root@linxu bin]# sh start.sh</pre><br>启动成功后登陆访问<a href=\"http://192.168.43.163:7072\" target=\"_blank\" rel=\"noopener\">http://192.168.43.163:7072</a> (端口为jetty端口)</p>\n<p>如果查看不到监控提供者</p>\n<p>com.alibaba.dubbo.monitor.MonitorService</p>\n<p>请核对dubbo.properties zookeeper地址和端口是否正确</p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.安装Zookeeper</p>\n<p><pre class=\"lang:default decode:true \">[root@linxu ~]#  wget <a href=\"http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\" target=\"_blank\" rel=\"noopener\">http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz</a><br>[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用<br>[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz<br>[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir<br>[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf<br>[root@linxu conf]# cp zoo_sample.cfg zoo.cfg<br>[root@linxu conf]# vi zoo.cfg </pre></p>\n<p>#修改配置对应项<br>dataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data<br>dataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs<br>[root@linxu conf]# vi /etc/profile<br>末尾添加<br>export ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/<br>export PATH=$ZOOKEEPER_HOME/bin:$PATH<br>export PATH<br>[root@linxu conf]# source /etc/profile #使生效<br>[root@linxu conf]# zkServer.sh start   #启动<br>[root@linxu conf]# zkServer.sh status  #查看状态<br>[root@linxu conf]# zkServer.sh stop    #停止<br>[root@linxu conf]# zkServer.sh restart #重启</p>\n<p><br>2.部署dubbo-admin</p>\n<p>从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)</p>\n<p>dubbo地址：<a href=\"https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/dubbo/tree/dubbo-2.5.8</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问<a href=\"http://localhost:8080/dubbo-admin-2.5.8/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/dubbo-admin-2.5.8/</a></p>\n<p>3.本地使用spring-boot创建提供者（provider）和消费者(consume)</p>\n<p>代码：<a href=\"https://github.com/reallinxu/spring-boot-dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/spring-boot-dubbo</a></p>\n<p>分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。</p>\n<p>PS：provider和consume的接口位置必须一致</p>\n<p>4.搭建dubbo-simple监控</p>\n<p>从github上下载dubbox源码，编译dubbo-monitor-simple</p>\n<p>dubbox地址：<a href=\"https://github.com/reallinxu/dubbox\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/dubbox</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器</p>\n<p><pre class=\"lang:default decode:true\">[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz<br>[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf<br>修改dubbo.properties<br>dubbo.container=log4j,spring,registry,jetty<br>dubbo.application.name=simple-monitor<br>dubbo.application.owner=</pre></p>\n<p>#dubbo.registry.address=multicast://224.5.6.7:1234<br>dubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址</p>\n<p>#dubbo.registry.address=redis://127.0.0.1:6379</p>\n<p>#dubbo.registry.address=dubbo://127.0.0.1:9090<br>dubbo.protocol.port=7070<br>dubbo.jetty.port=7072  #jetty端口，避免冲突<br>dubbo.jetty.directory=${user.home}/monitor<br>dubbo.charts.directory=${dubbo.jetty.directory}/charts<br>dubbo.statistics.directory=${user.home}/monitor/statistics<br>dubbo.log4j.file=logs/dubbo-monitor-simple.log<br>dubbo.log4j.level=WARN<br>启动dubbo-simple</p>\n<p><pre class=\"lang:default decode:true \">[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin<br>[root@linxu bin]# sh start.sh</pre><br>启动成功后登陆访问<a href=\"http://192.168.43.163:7072\" target=\"_blank\" rel=\"noopener\">http://192.168.43.163:7072</a> (端口为jetty端口)</p>\n<p>如果查看不到监控提供者</p>\n<p>com.alibaba.dubbo.monitor.MonitorService</p>\n<p>请核对dubbo.properties zookeeper地址和端口是否正确</p>\n<p>&nbsp;</p>\n"},{"title":" 本地代码上传到github\t\t","id":"89","date":"2018-01-23T08:22:40.000Z","_content":"\n**第一步：建立git仓库**\ncd到你的本地项目根目录下，执行git命令\n<pre class=\"lang:default decode:true\">git init</pre>\n**第二步：将项目的所有文件添加到仓库中**\n<pre class=\"lang:default decode:true\">git add .</pre>\n**如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n\n**第三步：将add的文件commit到仓库**\n<pre class=\"lang:default decode:true\">git commit -m \"注释语句\"</pre>\n\n* * *\n\n**第四步：去github上创建自己的Repository**\n\n**第五步：重点来了，将本地的仓库关联到github上**\n<pre class=\"lang:default decode:true\">git remote add origin https://github.com/reallinxu/spring-boot-dubbo</pre>\n**后面的https链接地址换成你自己的仓库url地址**\n\n**第六步：上传github之前，要先pull一下，执行如下命令：**\n<pre class=\"lang:default decode:true\">git pull origin master</pre>\n**第七步，也就是最后一步，上传代码到github远程仓库**\n<pre class=\"lang:default decode:true \">git push -u origin master</pre>","source":"_posts/P7.md","raw":"---\ntitle: \" 本地代码上传到github\\t\\t\"\nid: 89\ncategories:\n  - github\ndate: 2018-01-23 16:22:40\ntags:\n---\n\n**第一步：建立git仓库**\ncd到你的本地项目根目录下，执行git命令\n<pre class=\"lang:default decode:true\">git init</pre>\n**第二步：将项目的所有文件添加到仓库中**\n<pre class=\"lang:default decode:true\">git add .</pre>\n**如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n\n**第三步：将add的文件commit到仓库**\n<pre class=\"lang:default decode:true\">git commit -m \"注释语句\"</pre>\n\n* * *\n\n**第四步：去github上创建自己的Repository**\n\n**第五步：重点来了，将本地的仓库关联到github上**\n<pre class=\"lang:default decode:true\">git remote add origin https://github.com/reallinxu/spring-boot-dubbo</pre>\n**后面的https链接地址换成你自己的仓库url地址**\n\n**第六步：上传github之前，要先pull一下，执行如下命令：**\n<pre class=\"lang:default decode:true\">git pull origin master</pre>\n**第七步，也就是最后一步，上传代码到github远程仓库**\n<pre class=\"lang:default decode:true \">git push -u origin master</pre>","slug":"P7","published":1,"updated":"2018-03-22T01:28:03.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf50000gn4gppzehm9cj","content":"<p><strong>第一步：建立git仓库</strong><br>cd到你的本地项目根目录下，执行git命令</p>\n<pre class=\"lang:default decode:true\">git init</pre>\n**第二步：将项目的所有文件添加到仓库中**\n<pre class=\"lang:default decode:true\">git add .</pre>\n**如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n\n**第三步：将add的文件commit到仓库**\n<pre class=\"lang:default decode:true\">git commit -m \"注释语句\"</pre>\n\n<hr>\n<p><strong>第四步：去github上创建自己的Repository</strong></p>\n<p><strong>第五步：重点来了，将本地的仓库关联到github上</strong></p>\n<pre class=\"lang:default decode:true\">git remote add origin https://github.com/reallinxu/spring-boot-dubbo</pre>\n**后面的https链接地址换成你自己的仓库url地址**\n\n**第六步：上传github之前，要先pull一下，执行如下命令：**\n<pre class=\"lang:default decode:true\">git pull origin master</pre>\n**第七步，也就是最后一步，上传代码到github远程仓库**\n<pre class=\"lang:default decode:true \">git push -u origin master</pre>","site":{"data":{}},"excerpt":"","more":"<p><strong>第一步：建立git仓库</strong><br>cd到你的本地项目根目录下，执行git命令</p>\n<pre class=\"lang:default decode:true\">git init</pre>\n**第二步：将项目的所有文件添加到仓库中**\n<pre class=\"lang:default decode:true\">git add .</pre>\n**如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n\n**第三步：将add的文件commit到仓库**\n<pre class=\"lang:default decode:true\">git commit -m \"注释语句\"</pre>\n\n<hr>\n<p><strong>第四步：去github上创建自己的Repository</strong></p>\n<p><strong>第五步：重点来了，将本地的仓库关联到github上</strong></p>\n<pre class=\"lang:default decode:true\">git remote add origin https://github.com/reallinxu/spring-boot-dubbo</pre>\n**后面的https链接地址换成你自己的仓库url地址**\n\n**第六步：上传github之前，要先pull一下，执行如下命令：**\n<pre class=\"lang:default decode:true\">git pull origin master</pre>\n**第七步，也就是最后一步，上传代码到github远程仓库**\n<pre class=\"lang:default decode:true \">git push -u origin master</pre>"},{"title":" 更新本地代码到github\t\t","id":"93","date":"2018-01-23T08:28:47.000Z","_content":"\n**第一步：查看当前的git仓库状态，可以使用git status**\n\n<pre class=\"lang:default decode:true\">git status</pre>\n\n**第二步：更新全部**\n\n<pre class=\"lang:default decode:true\">git add *</pre>\n\n**第三步：接着输入git commit -m \"更新说明\"**\n\n<pre class=\"lang:default decode:true\">git commit -m \"更新说明\"</pre>\n\n**第四步：先git pull,拉取当前分支最新代码**\n\n<pre class=\"lang:default decode:true\">git pull</pre>\n\n**第五步：push到远程master分支上**\n\n<pre class=\"lang:default decode:true  \">git push origin master</pre>","source":"_posts/P6.md","raw":"---\ntitle: \" 更新本地代码到github\\t\\t\"\nid: 93\ncategories:\n  - github\ndate: 2018-01-23 16:28:47\ntags:\n---\n\n**第一步：查看当前的git仓库状态，可以使用git status**\n\n<pre class=\"lang:default decode:true\">git status</pre>\n\n**第二步：更新全部**\n\n<pre class=\"lang:default decode:true\">git add *</pre>\n\n**第三步：接着输入git commit -m \"更新说明\"**\n\n<pre class=\"lang:default decode:true\">git commit -m \"更新说明\"</pre>\n\n**第四步：先git pull,拉取当前分支最新代码**\n\n<pre class=\"lang:default decode:true\">git pull</pre>\n\n**第五步：push到远程master分支上**\n\n<pre class=\"lang:default decode:true  \">git push origin master</pre>","slug":"P6","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf54000in4gpcbm4tdlv","content":"<p><strong>第一步：查看当前的git仓库状态，可以使用git status</strong></p>\n<pre class=\"lang:default decode:true\">git status</pre>\n\n<p><strong>第二步：更新全部</strong></p>\n<pre class=\"lang:default decode:true\">git add *</pre>\n\n<p><strong>第三步：接着输入git commit -m “更新说明”</strong></p>\n<pre class=\"lang:default decode:true\">git commit -m \"更新说明\"</pre>\n\n<p><strong>第四步：先git pull,拉取当前分支最新代码</strong></p>\n<pre class=\"lang:default decode:true\">git pull</pre>\n\n<p><strong>第五步：push到远程master分支上</strong></p>\n<pre class=\"lang:default decode:true  \">git push origin master</pre>","site":{"data":{}},"excerpt":"","more":"<p><strong>第一步：查看当前的git仓库状态，可以使用git status</strong></p>\n<pre class=\"lang:default decode:true\">git status</pre>\n\n<p><strong>第二步：更新全部</strong></p>\n<pre class=\"lang:default decode:true\">git add *</pre>\n\n<p><strong>第三步：接着输入git commit -m “更新说明”</strong></p>\n<pre class=\"lang:default decode:true\">git commit -m \"更新说明\"</pre>\n\n<p><strong>第四步：先git pull,拉取当前分支最新代码</strong></p>\n<pre class=\"lang:default decode:true\">git pull</pre>\n\n<p><strong>第五步：push到远程master分支上</strong></p>\n<pre class=\"lang:default decode:true  \">git push origin master</pre>"},{"title":" CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群\t\t","id":"48","date":"2017-12-22T02:20:31.000Z","_content":"\n1.CentOS联网设置\n<pre class=\"lang:default decode:true\">网络接口配置文件\n[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\n# Intel Corporation 82545EM Gigabit Ethernet Controller (Copper)\nTYPE=Ethernet       #网卡类型\nDEVICE=eth0         #网卡接口名称\nONBOOT=yes          #系统启动时是否自动加载\nBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\nIPADDR=192.168.1.11      #网卡IP地址\nNETMASK=255.255.255.0    #网卡网络地址\nGATEWAY=192.168.1.1      #网卡网关地址\nDNS1=10.203.104.41       #网卡DNS地址\nHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\nBROADCAST=192.168.1.255  #网卡广播地址 \n\nPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。</pre>\n2.CentOS安装jdk\n<pre class=\"lang:default decode:true \">使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。\n将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。\n使用SecureCRT连接虚拟机，开始准备安装jdk。\n1.创建Java文件夹\n[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir java\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n2.将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下\n[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java\n3.设置环境变量\n[root@localhost ~]# vi ~/.bashrc\n文件末尾加上以下几行：\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_144\nexport CLASSPATH=.:${JAVA_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n使生效：\n[root@localhost jdk1.8.0_144]# source ~/.bashrc\n4.验证是否安装成功\n[root@localhost jdk1.8.0_144]# java\n[root@localhost jdk1.8.0_144]# javac\n[root@localhost jdk1.8.0_144]# java -version</pre>\n3.CentOS安装Nexus\n<pre class=\"lang:default decode:true \">将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。\n使用SecureCRT连接虚拟机，开始准备安装nexus。\n1.创建Nexus文件夹\n[root@localhost ~]# cd /usr/local\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n[root@localhost local]# mkdir nexus\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src\n2.将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压\n[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n[root@localhost ~]# cd /usr/local/nexus\n[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz\n3.启动nexus\n[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n[root@localhost bin]# ./nexus start\nWARNING: ************************************************************\nWARNING: Detected execution as \"root\" user.  This is NOT recommended!\nWARNING: ************************************************************\nStarting nexus\n[root@localhost bin]# ./nexus status\nWARNING: ************************************************************\nWARNING: Detected execution as \"root\" user.  This is NOT recommended!\nWARNING: ************************************************************\nnexus is running.\n4.验证是否启动成功\n在浏览器中输入{ip}:8081(默认为8081端口)。\n此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。\n关闭防火墙命令如下：\n[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n此时再通过浏览器进入即可。</pre>\n4.CentOS安装Tomcat\n<pre class=\"lang:default decode:true \">将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。\n使用SecureCRT连接虚拟机，开始准备安装tomcat。\n1.创建Tomcat文件夹\n[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir tomcat\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat\n2.将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压\n[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n[root@localhost ~]# cd /usr/local/tomcat/\n[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz \n3.启动Tomcat\n[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n[root@localhost bin]# ./startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\nUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\nUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\nTomcat started.\n4.验证是否安装成功\n用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。</pre>\n5.CentOS安装RabbitMq\n<pre class=\"lang:default decode:true \">1.安装Erlang\n使用SecureCRT连接虚拟机，开始准备安装Erlang。\n[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n[root@localhost bin]# yum install erlang\n安装  1 软件包 (+110 依赖软件包)\n\n总下载量：51 M\n安装大小：117 M\nIs this ok [y/d/N]: \n输入：y\n是否继续？[y/N]：\n输入: y\n\n2.安装RabbitMq\n1.将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。\n使用SecureCRT连接虚拟机，开始准备安装RabbitMq。\n[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n准备中...                          ################################# [100%]\n正在升级/安装...\n   1:rabbitmq-server-3.3.5-1          ################################# [100%]\n[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\nThe following plugins have been enabled:\n  mochiweb\n  webmachine\n  rabbitmq_web_dispatch\n  amqp_client\n  rabbitmq_management_agent\n  rabbitmq_management\nPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n[root@localhost ~]# chkconfig --level 3 rabbitmq-server on\n2.配置文件路径\n[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n寻找行：PID_FILE=/var/run/rabbitmq/pid\n在以上内容之下，插入行\nexport RABBITMQ_MNESIA=/rabbitmq/mnesia\n3.配置访问权限\n[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins\n4.启动RabbitMq\n[root@localhost ~]# service rabbitmq-server start\n[root@localhost ~]# rabbitmqctl add_user admin admin\n[root@localhost ~]# rabbitmqctl set_user_tags admin administrator\n5.验证RabbitMq\n用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\n\n3.配置RabbitMq集群\n1.修改hosts文件\n    vi /etc/hosts\n    将两台虚拟机的Ip配置进去：\n    192.168.43.69 test1\n    192.168.43.216 test2\n    重启两台虚拟机reboot\n2.启动第一台虚拟机的Rabbitmq:\n    service rabbitmq-server start\n    将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n    更改.erlang.cookie的访问权限为400\n    chmod 400 /var/lib/rabbitmq/.erlang.cookie\n    更改.erlang.cookie的文件所有人为rabbitmq\n    chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n    启动第二台虚拟机的Rabbitmq：\n    service rabbitmq-server start\n    rabbitmqctl stop_app\n    rabbitmqctl join_cluster rabbit@test1\n    rabbitmqctl start_app\n3.验证集群是否成功\n    用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\n\n    PS：cookie文件会有两处都存在，root目录下cookie可以直接删除。\n       如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。</pre>\n软件包地址：[http://download.csdn.net/download/anonymous_l/10021072](http://download.csdn.net/download/anonymous_l/10021072)","source":"_posts/P5.md","raw":"---\ntitle: \" CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群\\t\\t\"\ntags:\n  - CentOS\nid: 48\ncategories:\n  - CentOS\ndate: 2017-12-22 10:20:31\n---\n\n1.CentOS联网设置\n<pre class=\"lang:default decode:true\">网络接口配置文件\n[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\n# Intel Corporation 82545EM Gigabit Ethernet Controller (Copper)\nTYPE=Ethernet       #网卡类型\nDEVICE=eth0         #网卡接口名称\nONBOOT=yes          #系统启动时是否自动加载\nBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\nIPADDR=192.168.1.11      #网卡IP地址\nNETMASK=255.255.255.0    #网卡网络地址\nGATEWAY=192.168.1.1      #网卡网关地址\nDNS1=10.203.104.41       #网卡DNS地址\nHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\nBROADCAST=192.168.1.255  #网卡广播地址 \n\nPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。</pre>\n2.CentOS安装jdk\n<pre class=\"lang:default decode:true \">使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。\n将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。\n使用SecureCRT连接虚拟机，开始准备安装jdk。\n1.创建Java文件夹\n[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir java\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n2.将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下\n[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java\n3.设置环境变量\n[root@localhost ~]# vi ~/.bashrc\n文件末尾加上以下几行：\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_144\nexport CLASSPATH=.:${JAVA_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n使生效：\n[root@localhost jdk1.8.0_144]# source ~/.bashrc\n4.验证是否安装成功\n[root@localhost jdk1.8.0_144]# java\n[root@localhost jdk1.8.0_144]# javac\n[root@localhost jdk1.8.0_144]# java -version</pre>\n3.CentOS安装Nexus\n<pre class=\"lang:default decode:true \">将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。\n使用SecureCRT连接虚拟机，开始准备安装nexus。\n1.创建Nexus文件夹\n[root@localhost ~]# cd /usr/local\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n[root@localhost local]# mkdir nexus\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src\n2.将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压\n[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n[root@localhost ~]# cd /usr/local/nexus\n[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz\n3.启动nexus\n[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n[root@localhost bin]# ./nexus start\nWARNING: ************************************************************\nWARNING: Detected execution as \"root\" user.  This is NOT recommended!\nWARNING: ************************************************************\nStarting nexus\n[root@localhost bin]# ./nexus status\nWARNING: ************************************************************\nWARNING: Detected execution as \"root\" user.  This is NOT recommended!\nWARNING: ************************************************************\nnexus is running.\n4.验证是否启动成功\n在浏览器中输入{ip}:8081(默认为8081端口)。\n此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。\n关闭防火墙命令如下：\n[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n此时再通过浏览器进入即可。</pre>\n4.CentOS安装Tomcat\n<pre class=\"lang:default decode:true \">将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。\n使用SecureCRT连接虚拟机，开始准备安装tomcat。\n1.创建Tomcat文件夹\n[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir tomcat\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat\n2.将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压\n[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n[root@localhost ~]# cd /usr/local/tomcat/\n[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz \n3.启动Tomcat\n[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n[root@localhost bin]# ./startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\nUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\nUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\nTomcat started.\n4.验证是否安装成功\n用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。</pre>\n5.CentOS安装RabbitMq\n<pre class=\"lang:default decode:true \">1.安装Erlang\n使用SecureCRT连接虚拟机，开始准备安装Erlang。\n[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n[root@localhost bin]# yum install erlang\n安装  1 软件包 (+110 依赖软件包)\n\n总下载量：51 M\n安装大小：117 M\nIs this ok [y/d/N]: \n输入：y\n是否继续？[y/N]：\n输入: y\n\n2.安装RabbitMq\n1.将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。\n使用SecureCRT连接虚拟机，开始准备安装RabbitMq。\n[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n准备中...                          ################################# [100%]\n正在升级/安装...\n   1:rabbitmq-server-3.3.5-1          ################################# [100%]\n[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\nThe following plugins have been enabled:\n  mochiweb\n  webmachine\n  rabbitmq_web_dispatch\n  amqp_client\n  rabbitmq_management_agent\n  rabbitmq_management\nPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n[root@localhost ~]# chkconfig --level 3 rabbitmq-server on\n2.配置文件路径\n[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n寻找行：PID_FILE=/var/run/rabbitmq/pid\n在以上内容之下，插入行\nexport RABBITMQ_MNESIA=/rabbitmq/mnesia\n3.配置访问权限\n[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins\n4.启动RabbitMq\n[root@localhost ~]# service rabbitmq-server start\n[root@localhost ~]# rabbitmqctl add_user admin admin\n[root@localhost ~]# rabbitmqctl set_user_tags admin administrator\n5.验证RabbitMq\n用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\n\n3.配置RabbitMq集群\n1.修改hosts文件\n    vi /etc/hosts\n    将两台虚拟机的Ip配置进去：\n    192.168.43.69 test1\n    192.168.43.216 test2\n    重启两台虚拟机reboot\n2.启动第一台虚拟机的Rabbitmq:\n    service rabbitmq-server start\n    将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n    更改.erlang.cookie的访问权限为400\n    chmod 400 /var/lib/rabbitmq/.erlang.cookie\n    更改.erlang.cookie的文件所有人为rabbitmq\n    chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n    启动第二台虚拟机的Rabbitmq：\n    service rabbitmq-server start\n    rabbitmqctl stop_app\n    rabbitmqctl join_cluster rabbit@test1\n    rabbitmqctl start_app\n3.验证集群是否成功\n    用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\n\n    PS：cookie文件会有两处都存在，root目录下cookie可以直接删除。\n       如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。</pre>\n软件包地址：[http://download.csdn.net/download/anonymous_l/10021072](http://download.csdn.net/download/anonymous_l/10021072)","slug":"P5","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf58000kn4gp53xi0yhv","content":"<p>1.CentOS联网设置</p>\n<p><pre class=\"lang:default decode:true\">网络接口配置文件<br>[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33</pre></p>\n<h1 id=\"Intel-Corporation-82545EM-Gigabit-Ethernet-Controller-Copper\"><a href=\"#Intel-Corporation-82545EM-Gigabit-Ethernet-Controller-Copper\" class=\"headerlink\" title=\"Intel Corporation 82545EM Gigabit Ethernet Controller (Copper)\"></a>Intel Corporation 82545EM Gigabit Ethernet Controller (Copper)</h1><p>TYPE=Ethernet       #网卡类型<br>DEVICE=eth0         #网卡接口名称<br>ONBOOT=yes          #系统启动时是否自动加载<br>BOOTPROTO=static    #启用地址协议 –static:静态协议 –bootp协议 –dhcp协议<br>IPADDR=192.168.1.11      #网卡IP地址<br>NETMASK=255.255.255.0    #网卡网络地址<br>GATEWAY=192.168.1.1      #网卡网关地址<br>DNS1=10.203.104.41       #网卡DNS地址<br>HWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址<br>BROADCAST=192.168.1.255  #网卡广播地址 </p>\n<p>PS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。<br>2.CentOS安装jdk</p>\n<p><pre class=\"lang:default decode:true \">使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。<br>将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。<br>使用SecureCRT连接虚拟机，开始准备安装jdk。<br>1.创建Java文件夹<br>[root@localhost ~]# cd /usr/local<br>[root@localhost local]# mkdir java<br>[root@localhost local]# ls<br>bin  etc  games  include  java  lib  lib64  libexec  sbin  share  src<br>2.将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下<br>[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz<br>[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java<br>3.设置环境变量<br>[root@localhost ~]# vi ~/.bashrc<br>文件末尾加上以下几行：<br>export JAVA_HOME=/usr/local/java/jdk1.8.0_144<br>export CLASSPATH=.:${JAVA_HOME}/lib<br>export PATH=${JAVA_HOME}/bin:$PATH<br>使生效：<br>[root@localhost jdk1.8.0_144]# source ~/.bashrc<br>4.验证是否安装成功<br>[root@localhost jdk1.8.0_144]# java<br>[root@localhost jdk1.8.0_144]# javac<br>[root@localhost jdk1.8.0_144]# java -version</pre><br>3.CentOS安装Nexus</p>\n<p><pre class=\"lang:default decode:true \">将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。<br>使用SecureCRT连接虚拟机，开始准备安装nexus。<br>1.创建Nexus文件夹<br>[root@localhost ~]# cd /usr/local<br>[root@localhost local]# ls<br>bin  etc  games  include  java  lib  lib64  libexec  sbin  share  src<br>[root@localhost local]# mkdir nexus<br>[root@localhost local]# ls<br>bin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src<br>2.将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压<br>[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus<br>[root@localhost ~]# cd /usr/local/nexus<br>[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz<br>3.启动nexus<br>[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin<br>[root@localhost bin]# ./nexus start<br>WARNING: <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>WARNING: Detected execution as “root” user.  This is NOT recommended!<br>WARNING: <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>Starting nexus<br>[root@localhost bin]# ./nexus status<br>WARNING: <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>WARNING: Detected execution as “root” user.  This is NOT recommended!<br>WARNING: <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>nexus is running.<br>4.验证是否启动成功<br>在浏览器中输入{ip}:8081(默认为8081端口)。<br>此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。<br>关闭防火墙命令如下：<br>[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)<br>[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动<br>[root@localhost bin]# firewall-cmd –state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）<br>此时再通过浏览器进入即可。</pre><br>4.CentOS安装Tomcat</p>\n<p><pre class=\"lang:default decode:true \">将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。<br>使用SecureCRT连接虚拟机，开始准备安装tomcat。<br>1.创建Tomcat文件夹<br>[root@localhost ~]# cd /usr/local<br>[root@localhost local]# mkdir tomcat<br>[root@localhost local]# ls<br>bin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat<br>2.将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压<br>[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/<br>[root@localhost ~]# cd /usr/local/tomcat/<br>[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz<br>3.启动Tomcat<br>[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin<br>[root@localhost bin]# ./startup.sh<br>Using CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23<br>Using CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23<br>Using CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp<br>Using JRE_HOME:        /usr/local/java/jdk1.8.0_144<br>Using CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar<br>Tomcat started.<br>4.验证是否安装成功<br>用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。</pre><br>5.CentOS安装RabbitMq</p>\n<p><pre class=\"lang:default decode:true \">1.安装Erlang<br>使用SecureCRT连接虚拟机，开始准备安装Erlang。<br>[root@localhost bin]# rpm -ivh <a href=\"http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</a><br>[root@localhost bin]# yum install erlang<br>安装  1 软件包 (+110 依赖软件包)</pre></p>\n<p>总下载量：51 M<br>安装大小：117 M<br>Is this ok [y/d/N]:<br>输入：y<br>是否继续？[y/N]：<br>输入: y</p>\n<p>2.安装RabbitMq<br>1.将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。<br>使用SecureCRT连接虚拟机，开始准备安装RabbitMq。<br>[root@localhost ~]# rpm –import rabbitmq-signing-key-public.asc<br>[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm<br>准备中…                          ################################# [100%]<br>正在升级/安装…<br>   1:rabbitmq-server-3.3.5-1          ################################# [100%]<br>[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management<br>The following plugins have been enabled:<br>  mochiweb<br>  webmachine<br>  rabbitmq_web_dispatch<br>  amqp_client<br>  rabbitmq_management_agent<br>  rabbitmq_management<br>Plugin configuration has changed. Restart RabbitMQ for changes to take effect.<br>[root@localhost ~]# chkconfig –level 3 rabbitmq-server on<br>2.配置文件路径<br>[root@localhost ~]# vi /etc/init.d/rabbitmq-server<br>寻找行：PID_FILE=/var/run/rabbitmq/pid<br>在以上内容之下，插入行<br>export RABBITMQ_MNESIA=/rabbitmq/mnesia<br>3.配置访问权限<br>[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins<br>4.启动RabbitMq<br>[root@localhost ~]# service rabbitmq-server start<br>[root@localhost ~]# rabbitmqctl add_user admin admin<br>[root@localhost ~]# rabbitmqctl set_user_tags admin administrator<br>5.验证RabbitMq<br>用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)</p>\n<p>3.配置RabbitMq集群<br>1.修改hosts文件<br>    vi /etc/hosts<br>    将两台虚拟机的Ip配置进去：<br>    192.168.43.69 test1<br>    192.168.43.216 test2<br>    重启两台虚拟机reboot<br>2.启动第一台虚拟机的Rabbitmq:<br>    service rabbitmq-server start<br>    将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖<br>    更改.erlang.cookie的访问权限为400<br>    chmod 400 /var/lib/rabbitmq/.erlang.cookie<br>    更改.erlang.cookie的文件所有人为rabbitmq<br>    chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie<br>    启动第二台虚拟机的Rabbitmq：<br>    service rabbitmq-server start<br>    rabbitmqctl stop_app<br>    rabbitmqctl join_cluster rabbit@test1<br>    rabbitmqctl start_app<br>3.验证集群是否成功<br>    用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)</p>\n<pre><code>PS：cookie文件会有两处都存在，root目录下cookie可以直接删除。\n   如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。&lt;/pre&gt;\n</code></pre><p>软件包地址：<a href=\"http://download.csdn.net/download/anonymous_l/10021072\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/download/anonymous_l/10021072</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.CentOS联网设置</p>\n<p><pre class=\"lang:default decode:true\">网络接口配置文件<br>[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33</pre></p>\n<h1 id=\"Intel-Corporation-82545EM-Gigabit-Ethernet-Controller-Copper\"><a href=\"#Intel-Corporation-82545EM-Gigabit-Ethernet-Controller-Copper\" class=\"headerlink\" title=\"Intel Corporation 82545EM Gigabit Ethernet Controller (Copper)\"></a>Intel Corporation 82545EM Gigabit Ethernet Controller (Copper)</h1><p>TYPE=Ethernet       #网卡类型<br>DEVICE=eth0         #网卡接口名称<br>ONBOOT=yes          #系统启动时是否自动加载<br>BOOTPROTO=static    #启用地址协议 –static:静态协议 –bootp协议 –dhcp协议<br>IPADDR=192.168.1.11      #网卡IP地址<br>NETMASK=255.255.255.0    #网卡网络地址<br>GATEWAY=192.168.1.1      #网卡网关地址<br>DNS1=10.203.104.41       #网卡DNS地址<br>HWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址<br>BROADCAST=192.168.1.255  #网卡广播地址 </p>\n<p>PS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。<br>2.CentOS安装jdk</p>\n<p><pre class=\"lang:default decode:true \">使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。<br>将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。<br>使用SecureCRT连接虚拟机，开始准备安装jdk。<br>1.创建Java文件夹<br>[root@localhost ~]# cd /usr/local<br>[root@localhost local]# mkdir java<br>[root@localhost local]# ls<br>bin  etc  games  include  java  lib  lib64  libexec  sbin  share  src<br>2.将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下<br>[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz<br>[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java<br>3.设置环境变量<br>[root@localhost ~]# vi ~/.bashrc<br>文件末尾加上以下几行：<br>export JAVA_HOME=/usr/local/java/jdk1.8.0_144<br>export CLASSPATH=.:${JAVA_HOME}/lib<br>export PATH=${JAVA_HOME}/bin:$PATH<br>使生效：<br>[root@localhost jdk1.8.0_144]# source ~/.bashrc<br>4.验证是否安装成功<br>[root@localhost jdk1.8.0_144]# java<br>[root@localhost jdk1.8.0_144]# javac<br>[root@localhost jdk1.8.0_144]# java -version</pre><br>3.CentOS安装Nexus</p>\n<p><pre class=\"lang:default decode:true \">将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。<br>使用SecureCRT连接虚拟机，开始准备安装nexus。<br>1.创建Nexus文件夹<br>[root@localhost ~]# cd /usr/local<br>[root@localhost local]# ls<br>bin  etc  games  include  java  lib  lib64  libexec  sbin  share  src<br>[root@localhost local]# mkdir nexus<br>[root@localhost local]# ls<br>bin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src<br>2.将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压<br>[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus<br>[root@localhost ~]# cd /usr/local/nexus<br>[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz<br>3.启动nexus<br>[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin<br>[root@localhost bin]# ./nexus start<br>WARNING: <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>WARNING: Detected execution as “root” user.  This is NOT recommended!<br>WARNING: <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>Starting nexus<br>[root@localhost bin]# ./nexus status<br>WARNING: <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>WARNING: Detected execution as “root” user.  This is NOT recommended!<br>WARNING: <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>nexus is running.<br>4.验证是否启动成功<br>在浏览器中输入{ip}:8081(默认为8081端口)。<br>此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。<br>关闭防火墙命令如下：<br>[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)<br>[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动<br>[root@localhost bin]# firewall-cmd –state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）<br>此时再通过浏览器进入即可。</pre><br>4.CentOS安装Tomcat</p>\n<p><pre class=\"lang:default decode:true \">将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。<br>使用SecureCRT连接虚拟机，开始准备安装tomcat。<br>1.创建Tomcat文件夹<br>[root@localhost ~]# cd /usr/local<br>[root@localhost local]# mkdir tomcat<br>[root@localhost local]# ls<br>bin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat<br>2.将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压<br>[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/<br>[root@localhost ~]# cd /usr/local/tomcat/<br>[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz<br>3.启动Tomcat<br>[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin<br>[root@localhost bin]# ./startup.sh<br>Using CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23<br>Using CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23<br>Using CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp<br>Using JRE_HOME:        /usr/local/java/jdk1.8.0_144<br>Using CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar<br>Tomcat started.<br>4.验证是否安装成功<br>用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。</pre><br>5.CentOS安装RabbitMq</p>\n<p><pre class=\"lang:default decode:true \">1.安装Erlang<br>使用SecureCRT连接虚拟机，开始准备安装Erlang。<br>[root@localhost bin]# rpm -ivh <a href=\"http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\" target=\"_blank\" rel=\"noopener\">http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</a><br>[root@localhost bin]# yum install erlang<br>安装  1 软件包 (+110 依赖软件包)</pre></p>\n<p>总下载量：51 M<br>安装大小：117 M<br>Is this ok [y/d/N]:<br>输入：y<br>是否继续？[y/N]：<br>输入: y</p>\n<p>2.安装RabbitMq<br>1.将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。<br>使用SecureCRT连接虚拟机，开始准备安装RabbitMq。<br>[root@localhost ~]# rpm –import rabbitmq-signing-key-public.asc<br>[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm<br>准备中…                          ################################# [100%]<br>正在升级/安装…<br>   1:rabbitmq-server-3.3.5-1          ################################# [100%]<br>[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management<br>The following plugins have been enabled:<br>  mochiweb<br>  webmachine<br>  rabbitmq_web_dispatch<br>  amqp_client<br>  rabbitmq_management_agent<br>  rabbitmq_management<br>Plugin configuration has changed. Restart RabbitMQ for changes to take effect.<br>[root@localhost ~]# chkconfig –level 3 rabbitmq-server on<br>2.配置文件路径<br>[root@localhost ~]# vi /etc/init.d/rabbitmq-server<br>寻找行：PID_FILE=/var/run/rabbitmq/pid<br>在以上内容之下，插入行<br>export RABBITMQ_MNESIA=/rabbitmq/mnesia<br>3.配置访问权限<br>[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins<br>4.启动RabbitMq<br>[root@localhost ~]# service rabbitmq-server start<br>[root@localhost ~]# rabbitmqctl add_user admin admin<br>[root@localhost ~]# rabbitmqctl set_user_tags admin administrator<br>5.验证RabbitMq<br>用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)</p>\n<p>3.配置RabbitMq集群<br>1.修改hosts文件<br>    vi /etc/hosts<br>    将两台虚拟机的Ip配置进去：<br>    192.168.43.69 test1<br>    192.168.43.216 test2<br>    重启两台虚拟机reboot<br>2.启动第一台虚拟机的Rabbitmq:<br>    service rabbitmq-server start<br>    将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖<br>    更改.erlang.cookie的访问权限为400<br>    chmod 400 /var/lib/rabbitmq/.erlang.cookie<br>    更改.erlang.cookie的文件所有人为rabbitmq<br>    chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie<br>    启动第二台虚拟机的Rabbitmq：<br>    service rabbitmq-server start<br>    rabbitmqctl stop_app<br>    rabbitmqctl join_cluster rabbit@test1<br>    rabbitmqctl start_app<br>3.验证集群是否成功<br>    用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)</p>\n<pre><code>PS：cookie文件会有两处都存在，root目录下cookie可以直接删除。\n   如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。&lt;/pre&gt;\n</code></pre><p>软件包地址：<a href=\"http://download.csdn.net/download/anonymous_l/10021072\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/download/anonymous_l/10021072</a></p>\n"},{"title":" Redis集群搭建\t\t","id":"108","date":"2018-01-26T06:36:50.000Z","_content":"\nredis安装请参考：\n\nhttp://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\n\n1.单台机器redis集群搭建\n<pre class=\"lang:default decode:true \">[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n[root@linxu ~]# cd /usr/local/redis-cluster    \n[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n[root@linxu redis-cluster]# mkdir bin\n[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\nport 9001（每个节点的端口号）\ndaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;号强制后台运行)\nbind 192.168.43.163（绑定当前机器 IP）\ndir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\npidfile /var/run/redis_9001.pid（pid 9001和port要对应）\ncluster-enabled yes（启动集群模式）\ncluster-config-file nodes-9001.conf（9001和port要对应）\ncluster-node-timeout 15000\nappendonly yes(是否开启AOF，默认关闭no)\n\nPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n[root@linxu bin]# cd /usr/local/redis-cluster/bin \n[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n[root@linxu bin]# ./redis-server  ../9002/redis.conf\n[root@linxu bin]# ./redis-server  ../9003/redis.conf\n[root@linxu bin]# ./redis-server  ../9004/redis.conf\n[root@linxu bin]# ./redis-server  ../9005/redis.conf\n[root@linxu bin]# ./redis-server  ../9006/redis.conf\n[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n[root@linxu bin]# cd  #返回根目录\n[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n[root@linxu ruby-2.5.0]# ./configure\n[root@linxu ruby-2.5.0]# make\n[root@linxu ruby-2.5.0]# make install\n[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n[root@linxu ~]# gem install redis\n\nPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n    [root@linxu ~]# yum install curl  #安装curl\n    [root@linxu ~]# curl -L get.rvm.io | bash -s stable \n    如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n    [root@linxu ~]#  source /etc/profile.d/rvm.sh\n    此时再执行[root@linxu ~]# gem install redis即可\n\n[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n192.168.43.216:9001&gt; set name da\n-&gt; Redirected to slot [5798] located at 192.168.43.216:9002\nOK\n192.168.43.216:9002&gt; \n\nPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002\n</pre>\n2.不同机器搭建redis集群\n<pre class=\"lang:default decode:true\">#此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点\n#第一台  192.168.43.216 节点 10001 10002 10003\n#第二台  192.168.43.163 节点 10004 10005 10006\n#将六个节点全部启动\n[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动\n#启动后创建集群\n./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n192.168.43.216:10001&gt; set a 1\n-&gt; Redirected to slot [15495] located at 192.168.43.163:10005\nOK\n</pre>\n&nbsp;","source":"_posts/P12.md","raw":"---\ntitle: \" Redis集群搭建\\t\\t\"\nid: 108\ncategories:\n  - Redis\ndate: 2018-01-26 14:36:50\ntags:\n---\n\nredis安装请参考：\n\nhttp://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\n\n1.单台机器redis集群搭建\n<pre class=\"lang:default decode:true \">[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n[root@linxu ~]# cd /usr/local/redis-cluster    \n[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n[root@linxu redis-cluster]# mkdir bin\n[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\nport 9001（每个节点的端口号）\ndaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;号强制后台运行)\nbind 192.168.43.163（绑定当前机器 IP）\ndir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\npidfile /var/run/redis_9001.pid（pid 9001和port要对应）\ncluster-enabled yes（启动集群模式）\ncluster-config-file nodes-9001.conf（9001和port要对应）\ncluster-node-timeout 15000\nappendonly yes(是否开启AOF，默认关闭no)\n\nPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n[root@linxu bin]# cd /usr/local/redis-cluster/bin \n[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n[root@linxu bin]# ./redis-server  ../9002/redis.conf\n[root@linxu bin]# ./redis-server  ../9003/redis.conf\n[root@linxu bin]# ./redis-server  ../9004/redis.conf\n[root@linxu bin]# ./redis-server  ../9005/redis.conf\n[root@linxu bin]# ./redis-server  ../9006/redis.conf\n[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n[root@linxu bin]# cd  #返回根目录\n[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n[root@linxu ruby-2.5.0]# ./configure\n[root@linxu ruby-2.5.0]# make\n[root@linxu ruby-2.5.0]# make install\n[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n[root@linxu ~]# gem install redis\n\nPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n    [root@linxu ~]# yum install curl  #安装curl\n    [root@linxu ~]# curl -L get.rvm.io | bash -s stable \n    如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n    [root@linxu ~]#  source /etc/profile.d/rvm.sh\n    此时再执行[root@linxu ~]# gem install redis即可\n\n[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n192.168.43.216:9001&gt; set name da\n-&gt; Redirected to slot [5798] located at 192.168.43.216:9002\nOK\n192.168.43.216:9002&gt; \n\nPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002\n</pre>\n2.不同机器搭建redis集群\n<pre class=\"lang:default decode:true\">#此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点\n#第一台  192.168.43.216 节点 10001 10002 10003\n#第二台  192.168.43.163 节点 10004 10005 10006\n#将六个节点全部启动\n[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动\n#启动后创建集群\n./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n192.168.43.216:10001&gt; set a 1\n-&gt; Redirected to slot [15495] located at 192.168.43.163:10005\nOK\n</pre>\n&nbsp;","slug":"P12","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf5c000mn4gp6vc4o88l","content":"<p>redis安装请参考：</p>\n<p><a href=\"http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"noopener\">http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/</a></p>\n<p>1.单台机器redis集群搭建</p>\n<p><pre class=\"lang:default decode:true \">[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录<br>[root@linxu ~]# cd /usr/local/redis-cluster<br>[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录<br>[root@linxu redis-cluster]# mkdir bin<br>[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src<br>[root@linxu src]# cp <em> /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中<br>[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录<br>[root@linxu redis-4.0.6]# cp </em> /usr/local/redis-cluster/9001   #其他9002-9006同样操作<br>[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作<br>[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件<br>port 9001（每个节点的端口号）<br>daemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;号强制后台运行)<br>bind 192.168.43.163（绑定当前机器 IP）<br>dir /usr/local/redis-cluster/9001/data/（数据文件存放位置）<br>pidfile /var/run/redis_9001.pid（pid 9001和port要对应）<br>cluster-enabled yes（启动集群模式）<br>cluster-config-file nodes-9001.conf（9001和port要对应）<br>cluster-node-timeout 15000<br>appendonly yes(是否开启AOF，默认关闭no)</pre></p>\n<p>PS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改</p>\n<p>[root@linxu bin]# cd /usr/local/redis-cluster/bin<br>[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点<br>[root@linxu bin]# ./redis-server  ../9002/redis.conf<br>[root@linxu bin]# ./redis-server  ../9003/redis.conf<br>[root@linxu bin]# ./redis-server  ../9004/redis.conf<br>[root@linxu bin]# ./redis-server  ../9005/redis.conf<br>[root@linxu bin]# ./redis-server  ../9006/redis.conf<br>[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）<br>[root@linxu bin]# cd  #返回根目录<br>[root@linxu ~]# wget <a href=\"https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz\" target=\"_blank\" rel=\"noopener\">https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz</a> #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载<br>[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz<br>[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/<br>[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0<br>[root@linxu ruby-2.5.0]# ./configure<br>[root@linxu ruby-2.5.0]# make<br>[root@linxu ruby-2.5.0]# make install<br>[root@linxu ruby-2.5.0]# ruby -v   #查看版本<br>[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems<br>[root@linxu ~]# gem install redis</p>\n<p>PS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下<br>    [root@linxu ~]# yum install curl  #安装curl<br>    [root@linxu ~]# curl -L get.rvm.io | bash -s stable<br>    如果执行无法完成，替换为\\curl -sSL <a href=\"https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer</a> | bash<br>    [root@linxu ~]#  source /etc/profile.d/rvm.sh<br>    此时再执行[root@linxu ~]# gem install redis即可</p>\n<p>[root@linxu bin]# ./redis-trib.rb create –replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群<br>[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证<br>192.168.43.216:9001&gt; set name da<br>-&gt; Redirected to slot [5798] located at 192.168.43.216:9002<br>OK<br>192.168.43.216:9002&gt; </p>\n<p>PS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002<br><br>2.不同机器搭建redis集群</p>\n<p><pre class=\"lang:default decode:true\">#此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点</pre></p>\n<p>#第一台  192.168.43.216 节点 10001 10002 10003</p>\n<p>#第二台  192.168.43.163 节点 10004 10005 10006</p>\n<p>#将六个节点全部启动<br>[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动</p>\n<p>#启动后创建集群<br>./redis-trib.rb  create  –replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003<br>[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证<br>192.168.43.216:10001&gt; set a 1<br>-&gt; Redirected to slot [15495] located at 192.168.43.163:10005<br>OK<br><br>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>redis安装请参考：</p>\n<p><a href=\"http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"noopener\">http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/</a></p>\n<p>1.单台机器redis集群搭建</p>\n<p><pre class=\"lang:default decode:true \">[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录<br>[root@linxu ~]# cd /usr/local/redis-cluster<br>[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录<br>[root@linxu redis-cluster]# mkdir bin<br>[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src<br>[root@linxu src]# cp <em> /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中<br>[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录<br>[root@linxu redis-4.0.6]# cp </em> /usr/local/redis-cluster/9001   #其他9002-9006同样操作<br>[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作<br>[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件<br>port 9001（每个节点的端口号）<br>daemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;号强制后台运行)<br>bind 192.168.43.163（绑定当前机器 IP）<br>dir /usr/local/redis-cluster/9001/data/（数据文件存放位置）<br>pidfile /var/run/redis_9001.pid（pid 9001和port要对应）<br>cluster-enabled yes（启动集群模式）<br>cluster-config-file nodes-9001.conf（9001和port要对应）<br>cluster-node-timeout 15000<br>appendonly yes(是否开启AOF，默认关闭no)</pre></p>\n<p>PS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改</p>\n<p>[root@linxu bin]# cd /usr/local/redis-cluster/bin<br>[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点<br>[root@linxu bin]# ./redis-server  ../9002/redis.conf<br>[root@linxu bin]# ./redis-server  ../9003/redis.conf<br>[root@linxu bin]# ./redis-server  ../9004/redis.conf<br>[root@linxu bin]# ./redis-server  ../9005/redis.conf<br>[root@linxu bin]# ./redis-server  ../9006/redis.conf<br>[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）<br>[root@linxu bin]# cd  #返回根目录<br>[root@linxu ~]# wget <a href=\"https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz\" target=\"_blank\" rel=\"noopener\">https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz</a> #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载<br>[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz<br>[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/<br>[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0<br>[root@linxu ruby-2.5.0]# ./configure<br>[root@linxu ruby-2.5.0]# make<br>[root@linxu ruby-2.5.0]# make install<br>[root@linxu ruby-2.5.0]# ruby -v   #查看版本<br>[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems<br>[root@linxu ~]# gem install redis</p>\n<p>PS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下<br>    [root@linxu ~]# yum install curl  #安装curl<br>    [root@linxu ~]# curl -L get.rvm.io | bash -s stable<br>    如果执行无法完成，替换为\\curl -sSL <a href=\"https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer</a> | bash<br>    [root@linxu ~]#  source /etc/profile.d/rvm.sh<br>    此时再执行[root@linxu ~]# gem install redis即可</p>\n<p>[root@linxu bin]# ./redis-trib.rb create –replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群<br>[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证<br>192.168.43.216:9001&gt; set name da<br>-&gt; Redirected to slot [5798] located at 192.168.43.216:9002<br>OK<br>192.168.43.216:9002&gt; </p>\n<p>PS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002<br><br>2.不同机器搭建redis集群</p>\n<p><pre class=\"lang:default decode:true\">#此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点</pre></p>\n<p>#第一台  192.168.43.216 节点 10001 10002 10003</p>\n<p>#第二台  192.168.43.163 节点 10004 10005 10006</p>\n<p>#将六个节点全部启动<br>[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动</p>\n<p>#启动后创建集群<br>./redis-trib.rb  create  –replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003<br>[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证<br>192.168.43.216:10001&gt; set a 1<br>-&gt; Redirected to slot [15495] located at 192.168.43.163:10005<br>OK<br><br>&nbsp;</p>\n"},{"title":" Hello，World！\t\t","id":"1","date":"2017-12-18T09:28:35.000Z","_content":"\n第一次搭建，有点小激动，感谢夏某某的服务器和指导。","source":"_posts/P9.md","raw":"---\ntitle: \" Hello，World！\\t\\t\"\nid: 1\ncategories:\n  - CentOS\n  - 杂项\ndate: 2017-12-18 17:28:35\ntags:\n---\n\n第一次搭建，有点小激动，感谢夏某某的服务器和指导。","slug":"P9","published":1,"updated":"2018-03-22T01:28:03.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf5f000pn4gp0da8wvtv","content":"<p>第一次搭建，有点小激动，感谢夏某某的服务器和指导。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一次搭建，有点小激动，感谢夏某某的服务器和指导。</p>\n"},{"title":" 将本地代码传入github","id":"82","_content":"\n**第一步：建立git仓库**\ncd到你的本地项目根目录下，执行git命令\n\n    git init\n**第二步：将项目的所有文件添加到仓库中**  \n  \n    git add .  \n    如果想添加某个特定的文件，只需把.换成特定的文件名即可\n\n**第三步：将add的文件commit到仓库**  \n\n    git commit -m \"注释语句\"  \n\n**第四步：将commit的文件push到仓库**  \n\n    git push -u origin dev\n ","source":"_posts/P17.md","raw":"---\ntitle: \" 将本地代码传入github\"\nid: 82\ncategories:\n  - CentOS\ntags:\n---\n\n**第一步：建立git仓库**\ncd到你的本地项目根目录下，执行git命令\n\n    git init\n**第二步：将项目的所有文件添加到仓库中**  \n  \n    git add .  \n    如果想添加某个特定的文件，只需把.换成特定的文件名即可\n\n**第三步：将add的文件commit到仓库**  \n\n    git commit -m \"注释语句\"  \n\n**第四步：将commit的文件push到仓库**  \n\n    git push -u origin dev\n ","slug":"P17","published":1,"date":"2018-03-22T01:28:03.521Z","updated":"2018-03-27T07:36:25.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf5h000rn4gpkynn9vx5","content":"<p><strong>第一步：建立git仓库</strong><br>cd到你的本地项目根目录下，执行git命令</p>\n<pre><code>git init\n</code></pre><p><strong>第二步：将项目的所有文件添加到仓库中</strong>  </p>\n<pre><code>git add .  \n如果想添加某个特定的文件，只需把.换成特定的文件名即可\n</code></pre><p><strong>第三步：将add的文件commit到仓库</strong>  </p>\n<pre><code>git commit -m &quot;注释语句&quot;  \n</code></pre><p><strong>第四步：将commit的文件push到仓库</strong>  </p>\n<pre><code>git push -u origin dev\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><strong>第一步：建立git仓库</strong><br>cd到你的本地项目根目录下，执行git命令</p>\n<pre><code>git init\n</code></pre><p><strong>第二步：将项目的所有文件添加到仓库中</strong>  </p>\n<pre><code>git add .  \n如果想添加某个特定的文件，只需把.换成特定的文件名即可\n</code></pre><p><strong>第三步：将add的文件commit到仓库</strong>  </p>\n<pre><code>git commit -m &quot;注释语句&quot;  \n</code></pre><p><strong>第四步：将commit的文件push到仓库</strong>  </p>\n<pre><code>git push -u origin dev\n</code></pre>"},{"title":" 网站同时支持http和https访问\t\t","id":"133","date":"2018-01-29T07:08:53.000Z","_content":"\n1.在腾讯云申请SSL证书https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\n\n2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中\n\n3.修改nginx配置文件如下：\n<pre class=\"lang:default decode:true \">vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    listen 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    #ssl on;    #此处注释\n    ssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    ssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    location / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }\n</pre>\n4.重启nginx即可。","source":"_posts/P8.md","raw":"---\ntitle: \" 网站同时支持http和https访问\\t\\t\"\nid: 133\ncategories:\n  - WordPress\ndate: 2018-01-29 15:08:53\ntags:\n---\n\n1.在腾讯云申请SSL证书https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\n\n2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中\n\n3.修改nginx配置文件如下：\n<pre class=\"lang:default decode:true \">vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    listen 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    #ssl on;    #此处注释\n    ssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    ssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    location / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }\n</pre>\n4.重启nginx即可。","slug":"P8","published":1,"updated":"2018-03-22T01:28:03.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfw3qf6k000xn4gprpy5k83y","content":"<p>1.在腾讯云申请SSL证书<a href=\"https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\" target=\"_blank\" rel=\"noopener\">https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。</a></p>\n<p>2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中</p>\n<p>3.修改nginx配置文件如下：</p>\n<p><pre class=\"lang:default decode:true \">vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下</pre></p>\n<p>#转发给wordpress网站<br>server {<br>    listen 80;<br>    listen 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https<br>    server_name <a href=\"http://www.reallinxu.com\" target=\"_blank\" rel=\"noopener\">www.reallinxu.com</a>;<br>    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info<br>    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error </p>\n<pre><code>#ssl on;    #此处注释\nssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\nssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\nlocation / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n}\n\nerror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\nlocation = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n}\n\nerror_page 500 502 503 504 /50x.html;\nlocation = /50x.html {\n         root /data/www/www.reallinxu.com;\n}\n\n# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\nlocation ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n}\nlocation ~ /\\.ht {\n         deny all;\n}\n\nrewrite /wp-admin$ $scheme://$host$uri/ permanent;\n</code></pre><p> }<br><br>4.重启nginx即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.在腾讯云申请SSL证书<a href=\"https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\" target=\"_blank\" rel=\"noopener\">https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。</a></p>\n<p>2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中</p>\n<p>3.修改nginx配置文件如下：</p>\n<p><pre class=\"lang:default decode:true \">vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下</pre></p>\n<p>#转发给wordpress网站<br>server {<br>    listen 80;<br>    listen 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https<br>    server_name <a href=\"http://www.reallinxu.com\" target=\"_blank\" rel=\"noopener\">www.reallinxu.com</a>;<br>    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info<br>    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error </p>\n<pre><code>#ssl on;    #此处注释\nssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\nssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\nlocation / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n}\n\nerror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\nlocation = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n}\n\nerror_page 500 502 503 504 /50x.html;\nlocation = /50x.html {\n         root /data/www/www.reallinxu.com;\n}\n\n# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\nlocation ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n}\nlocation ~ /\\.ht {\n         deny all;\n}\n\nrewrite /wp-admin$ $scheme://$host$uri/ permanent;\n</code></pre><p> }<br><br>4.重启nginx即可。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfw3qf3l0000n4gplnh66r4d","category_id":"cjf1vkwt500192cgphgzebgjx","_id":"cjfw3qf3z0004n4gp1i9e5632"},{"post_id":"cjfw3qf3x0002n4gpbgsr6w07","category_id":"cjf1vkwsx000x2cgpbqe65fre","_id":"cjfw3qf430007n4gpiez90x0d"},{"post_id":"cjfw3qf3y0003n4gpiznynzys","category_id":"cjf1vkwsy000z2cgpt7l5z8rr","_id":"cjfw3qf450008n4gp2wnr7ayv"},{"post_id":"cjfw3qf400005n4gpm7cewrbx","category_id":"cjf1vkwt000132cgphbzdphc4","_id":"cjfw3qf470009n4gp6ivpy1s0"},{"post_id":"cjfw3qf420006n4gpl90baw6m","category_id":"cjf1vkwt000132cgphbzdphc4","_id":"cjfw3qf47000an4gp9py1b957"},{"post_id":"cjfw3qf4s000bn4gpcokzln23","category_id":"cjf1vkwsx000x2cgpbqe65fre","_id":"cjfw3qf4z000fn4gptfmksppr"},{"post_id":"cjfw3qf4u000cn4gppi9evi6y","category_id":"cjf1vkwsx000x2cgpbqe65fre","_id":"cjfw3qf52000hn4gpojfn5rvm"},{"post_id":"cjfw3qf4w000dn4gpll0m2euq","category_id":"cjf1vkwry00022cgpdipiulfd","_id":"cjfw3qf56000jn4gp5llbpqyj"},{"post_id":"cjfw3qf4y000en4gpnc51znrh","category_id":"cjf1vkwsh000i2cgphqnp3gh8","_id":"cjfw3qf5a000ln4gpr8jggbn1"},{"post_id":"cjfw3qf50000gn4gppzehm9cj","category_id":"cjf1vkwsc000d2cgpygbp30be","_id":"cjfw3qf5e000nn4gpl8zzpfzc"},{"post_id":"cjfw3qf54000in4gpcbm4tdlv","category_id":"cjf1vkwsc000d2cgpygbp30be","_id":"cjfw3qf5g000qn4gpedun0m45"},{"post_id":"cjfw3qf58000kn4gp53xi0yhv","category_id":"cjf1vkwry00022cgpdipiulfd","_id":"cjfw3qf5j000sn4gpgs6n8op3"},{"post_id":"cjfw3qf5c000mn4gp6vc4o88l","category_id":"cjf1vkwsy000z2cgpt7l5z8rr","_id":"cjfw3qf5j000tn4gpy5510ocq"},{"post_id":"cjfw3qf5f000pn4gp0da8wvtv","category_id":"cjf1vkwry00022cgpdipiulfd","_id":"cjfw3qf5k000un4gp76v7b6g7"},{"post_id":"cjfw3qf5f000pn4gp0da8wvtv","category_id":"cjf1vkwst000r2cgpaaog4pwf","_id":"cjfw3qf5k000vn4gpzazliax7"},{"post_id":"cjfw3qf5h000rn4gpkynn9vx5","category_id":"cjf1vkwry00022cgpdipiulfd","_id":"cjfw3qf5k000wn4gphdw7wct4"},{"post_id":"cjfw3qf6k000xn4gprpy5k83y","category_id":"cjf1vkwsx000x2cgpbqe65fre","_id":"cjfw3qf6n000yn4gpszm3pt96"},{"post_id":"cjfw3qf3t0001n4gpalmmxiv7","category_id":"cjf1vkws800072cgpggcifwab","_id":"cjfw3xt6c0001e4gp94plf7rg"}],"PostTag":[{"post_id":"cjfw3qf58000kn4gp53xi0yhv","tag_id":"cjf1vkwsa00092cgpb0zgg9s3","_id":"cjfw3qf5f000on4gpzggu6sbu"},{"post_id":"cjfw3qf3t0001n4gpalmmxiv7","tag_id":"cjf1vkws300042cgpa79jvnak","_id":"cjfw3xt6c0000e4gpsr57kvt7"}],"Tag":[{"name":"微信，小程序","_id":"cjf1vkws300042cgpa79jvnak"},{"name":"CentOS","_id":"cjf1vkwsa00092cgpb0zgg9s3"}]}}