{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/imgs/DBCB-2.png","path":"imgs/DBCB-2.png","modified":0,"renderable":0},{"_id":"source/imgs/TCC.jpg","path":"imgs/TCC.jpg","modified":0,"renderable":0},{"_id":"source/imgs/init.jpg","path":"imgs/init.jpg","modified":0,"renderable":0},{"_id":"source/imgs/MessageConverter.png","path":"imgs/MessageConverter.png","modified":0,"renderable":0},{"_id":"source/imgs/DBCB-1.png","path":"imgs/DBCB-1.png","modified":0,"renderable":0},{"_id":"source/imgs/DBCB-3.png","path":"imgs/DBCB-3.png","modified":0,"renderable":0},{"_id":"source/imgs/msglive.jpg","path":"imgs/msglive.jpg","modified":0,"renderable":0},{"_id":"source/imgs/lombokhttpproxy.JPG","path":"imgs/lombokhttpproxy.JPG","modified":0,"renderable":0},{"_id":"source/imgs/MsgRewind.jpg","path":"imgs/MsgRewind.jpg","modified":0,"renderable":0},{"_id":"source/imgs/feign/feign-core4.jpg","path":"imgs/feign/feign-core4.jpg","modified":0,"renderable":0},{"_id":"source/imgs/feign/feign-core8.jpg","path":"imgs/feign/feign-core8.jpg","modified":0,"renderable":0},{"_id":"source/imgs/idea/ex2.jpg","path":"imgs/idea/ex2.jpg","modified":0,"renderable":0},{"_id":"source/imgs/idea/ex1.jpg","path":"imgs/idea/ex1.jpg","modified":0,"renderable":0},{"_id":"source/imgs/idea/ex4.jpg","path":"imgs/idea/ex4.jpg","modified":0,"renderable":0},{"_id":"source/imgs/idea/ex3.jpg","path":"imgs/idea/ex3.jpg","modified":0,"renderable":0},{"_id":"source/imgs/idea/ex5.jpg","path":"imgs/idea/ex5.jpg","modified":0,"renderable":0},{"_id":"source/imgs/idea/ex6.jpg","path":"imgs/idea/ex6.jpg","modified":0,"renderable":0},{"_id":"source/imgs/idea/ex7.jpg","path":"imgs/idea/ex7.jpg","modified":0,"renderable":0},{"_id":"source/imgs/feign/feign-core5.jpg","path":"imgs/feign/feign-core5.jpg","modified":0,"renderable":0},{"_id":"source/imgs/TSF.JPG","path":"imgs/TSF.JPG","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/touxiang.jpg","path":"images/touxiang.jpg","modified":0,"renderable":1},{"_id":"source/imgs/feign/feign-core7.jpg","path":"imgs/feign/feign-core7.jpg","modified":0,"renderable":0},{"_id":"source/imgs/feign/new-project.jpg","path":"imgs/feign/new-project.jpg","modified":0,"renderable":0},{"_id":"source/imgs/feign/feign-core1.jpg","path":"imgs/feign/feign-core1.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"source/imgs/feign/feign-core6.jpg","path":"imgs/feign/feign-core6.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/imgs/feign/feign-core2.jpg","path":"imgs/feign/feign-core2.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"source/imgs/feign/feign-core3.jpg","path":"imgs/feign/feign-core3.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/imgs/线程状态图.png","path":"imgs/线程状态图.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1588664135616},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1588664135620},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1588664135624},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1588664135626},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1588664135628},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1588664135763},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1588663538344},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1588664135631},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1588664135633},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1588664135638},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1588664135643},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1588664135645},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1588664135649},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1588664135647},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1588664135653},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1588664135660},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1588664135657},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1588664135662},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1588664135664},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1588664135744},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1588664135742},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1588664135746},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1588664135748},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588664135751},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588664135757},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1588664135761},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1588664135766},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1588664135672},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1588664135676},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1588664135678},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1588664135681},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1588664135688},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1588664135684},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1588664135692},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1588664135695},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1588664135697},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1588664135700},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1588664135726},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1588664135728},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1588664135732},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1588664135730},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1588664135735},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1588664135740},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1588664135774},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1588664135811},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1588664135843},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588664135847},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588664135849},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588664135854},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588664135860},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588664135857},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588664135863},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1588664135890},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1588664135893},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1588664135896},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1588664135899},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1588664135707},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1588664135710},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1588664135712},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1588664135716},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1588664135714},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1588664135720},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1588664135777},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1588664135779},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1588664135781},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1588664135790},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1588664135784},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1588664135793},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1588664135795},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1588664135803},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1588664135797},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1588664135807},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1588664135800},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1588664135809},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1588664135816},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1588664135820},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1588664135830},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588664135866},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1588664135871},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1588664135877},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1588664135882},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1588664135879},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1588664135886},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1588664135828},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1588664135825},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1588664135840},{"_id":"source/favicon.ico","hash":"20c59e96f042970753776c92420583340cb3c6ae","modified":1587980999000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1587980999000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1587980999000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1587980999000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1587980999000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1587980999000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1587980999000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1587980999000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1587980999000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1587980999000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1587980999000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1587980999000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1587980999000},{"_id":"themes/next/_config.yml","hash":"aaa468cf70a66cd1af603cfbe8543abc17f1ef70","modified":1587980999000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1587980999000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1587980999000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1587980999000},{"_id":"themes/next/编辑1","hash":"e69eca94a5e2aceb94845a07d7b021b0f0ee3bb2","modified":1587980999000},{"_id":"source/404/index.md","hash":"a0eeba7e29492602ba664de34188898cd5697e9e","modified":1587980999000},{"_id":"source/_posts/Docker-Learning.md","hash":"dfff38d77b6e0e7282532eede14a38cc29eed3c0","modified":1587980999000},{"_id":"source/_posts/Dockerfile构建java环境镜像.md","hash":"34d533a523f0cd4059f45823eae023f070340426","modified":1587980999000},{"_id":"source/_posts/Docker容器中搭建rabbitmq集群.md","hash":"564649eed1e1b6ccb9822d2ce7f8458dcd37be2c","modified":1587980999000},{"_id":"source/_posts/QLExpress.md","hash":"5442c7cfbf9fb8569c3007a9fef69611e50f7101","modified":1587980999000},{"_id":"source/_posts/Docker容器中搭建Redis集群.md","hash":"cf6422058b48704a5dc6091e0dec7a4e0591b9cd","modified":1587980999000},{"_id":"source/_posts/Wechat-Public-Manage--1.md","hash":"a872eb74eb80535eda27f963a1716310509de4bc","modified":1587980999000},{"_id":"source/_posts/centos-mq.md","hash":"9c33c9e4cda2f460450dec97686a2d050da7b115","modified":1587980999000},{"_id":"source/_posts/centos-mysql.md","hash":"9f8fd62cec3b1f705712be0c89d7ee7def9a357e","modified":1587980999000},{"_id":"source/_posts/data-structure-1.md","hash":"34bd27cab0b385438a921aa09b7f59e5f6b062a5","modified":1587980999000},{"_id":"source/_posts/dubbo.md","hash":"51b662b6587b0bc5709323d6ee963b916e601536","modified":1587980999000},{"_id":"source/_posts/feign.md","hash":"2f4f77a454c3a61e835d4daac160475a58e75e5a","modified":1587980999000},{"_id":"source/_posts/git.md","hash":"e06ed7bdc30a45f71d34c5f30cb108d73533b2dd","modified":1587980999000},{"_id":"source/_posts/java a=a++引发的思考.md","hash":"2746b371bac91248a64e156a16e6c650e78a8b1d","modified":1587980999000},{"_id":"source/_posts/helloworld.md","hash":"dda274a26ff23658004255e27e9519b140089c40","modified":1587980999000},{"_id":"source/_posts/java8.md","hash":"c029a084c1a4405880dfdc830f537c2afc8e1128","modified":1587980999000},{"_id":"source/_posts/java多线程与高并发(一).md","hash":"6c158c4cc22e396a0f8c8250f6e6785d557b9606","modified":1587980999000},{"_id":"source/_posts/lombok.md","hash":"4dd26f1ef935ef3a3a45713affa2dea64196c727","modified":1587980999000},{"_id":"source/_posts/nginx.md","hash":"e4eeb3f52a18614065b3b5771959aa35bcc96ed4","modified":1587980999000},{"_id":"source/_posts/java多线程与高并发(二).md","hash":"22e9072bbc9f5a3717035357f5b790e951b9ac20","modified":1587980999000},{"_id":"source/_posts/redis.md","hash":"f6066cc71dfdc2068d43c08b5a3e88bdda453dc1","modified":1587980999000},{"_id":"source/_posts/redis集群.md","hash":"7d6f5afac9aa08cb9affb2263365d788c7b8e8ce","modified":1587980999000},{"_id":"source/_posts/time.md","hash":"e7b2c2fdefcf23a95b12af3c454a6a02dc3a0e87","modified":1587980999000},{"_id":"source/_posts/springbatch.md","hash":"c9de694de8d336f78a5b6a3e3e33dfd7080f4797","modified":1587980999000},{"_id":"source/_posts/springboot-notes.md","hash":"cb9ee8e40e7fd3398cc6c860a9d006d5c5d4d4ea","modified":1587980999000},{"_id":"source/_posts/wechat.md","hash":"786971f3e8008c800af315e6dbaa4231cfbccaee","modified":1587980999000},{"_id":"source/_posts/wordpress-https.md","hash":"4f2158eebb090a1e8d8834830e2f40a5a92742bf","modified":1587980999000},{"_id":"source/_posts/wordpress-nginx.md","hash":"0edf2e2dbd57147dec67814e3d19a0a1cfbe10cc","modified":1587980999000},{"_id":"source/_posts/wordpress.md","hash":"ab5c7c14198e3b970386408cdfcd6d8fffb01967","modified":1587980999000},{"_id":"source/_posts/时序图.md","hash":"08830a007f8f8c1c3f8ef534e4e3b54f8133d8ef","modified":1587980999000},{"_id":"source/_posts/分布式锁.md","hash":"3b62153912a172201c60173e03bb15837ed82cfe","modified":1587980999000},{"_id":"source/_posts/设计模式.md","hash":"82308e1e2bd1cb5d7029481e71584d2193b23cf3","modified":1587980999000},{"_id":"source/categories/index.md","hash":"d3b2563a93ace1872d8639bc229a22c1b514c1df","modified":1587980999000},{"_id":"source/about/index.md","hash":"0973879e3e6abdb13198b45cd5ef6c422bd9e9c7","modified":1587980999000},{"_id":"source/_posts/金融云.md","hash":"73d2775184a9c27271f049c8fac6cf1d63620ee8","modified":1587980999000},{"_id":"source/search/index.md","hash":"44d667e4920b2084fe61b6581fd9c5f386b17d00","modified":1587980999000},{"_id":"source/imgs/DBCB-2.png","hash":"8c2825cc373eb892475a2cb8a4d424b368880deb","modified":1587980999000},{"_id":"source/imgs/TCC.jpg","hash":"5d4f7ccfe51ef34c98a1b9f2a3ca58a62e40b460","modified":1587980999000},{"_id":"source/imgs/init.jpg","hash":"7fdba7a8b4734770f78259beaaa6547784160465","modified":1587980999000},{"_id":"source/tags/index.md","hash":"ec80d4cf36641e3180cd525c1fe78e50aa2942d9","modified":1587980999000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1587980999000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1587980999000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1587980999000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1587980999000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1587980999000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1587980999000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1587980999000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1587980999000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1587980999000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1587980999000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1587980999000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1587980999000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1587980999000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1587980999000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1587980999000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1587980999000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1587980999000},{"_id":"themes/next/languages/zh-CN.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1587980999000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1587980999000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1587980999000},{"_id":"themes/next/layout/_layout.swig","hash":"6476caa34d9c93b172e64affdcce87bba741bf26","modified":1587980999000},{"_id":"source/imgs/MessageConverter.png","hash":"0576d1cffea5ad3d674da3ec90545ea794f6c7d7","modified":1587980999000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1587980999000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1587980999000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1587980999000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1587980999000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1587980999000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1587980999000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1587980999000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1587980999000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1587980999000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1587980999000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1587980999000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1587980999000},{"_id":"source/imgs/DBCB-1.png","hash":"1c9bd54eefac9a91fb9813f8a37bd5138bc99ece","modified":1587980999000},{"_id":"source/imgs/DBCB-3.png","hash":"2d53122ef6cdf04cab9e316dc49ed583ff66f75b","modified":1587980999000},{"_id":"source/imgs/msglive.jpg","hash":"78f9f85ddce58dfab34885849bc645966f7529eb","modified":1587980999000},{"_id":"source/imgs/lombokhttpproxy.JPG","hash":"960bd5d8e6dec1607a2f7c6c34c2db66330f2d54","modified":1587980999000},{"_id":"source/imgs/MsgRewind.jpg","hash":"5b986332b4ce59d44d6d62d21a60b6c145fc38dc","modified":1587980999000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587980999000},{"_id":"source/imgs/feign/feign-core4.jpg","hash":"da8c79df926cbedbd2a0de5a286eea9e314d28a9","modified":1587980999000},{"_id":"source/imgs/feign/feign-core8.jpg","hash":"e367d82bd2c24df9e292e060332e5ae51c18de82","modified":1587980999000},{"_id":"source/imgs/idea/ex2.jpg","hash":"cb407d67e579425fd2f11cc948df1c6dc7f2f8a5","modified":1587980999000},{"_id":"source/imgs/idea/ex1.jpg","hash":"6122284c58d0f6e23cf30a1a861c00c3eaf716c7","modified":1587980999000},{"_id":"source/imgs/idea/ex4.jpg","hash":"cb7ae63f9afa843a97e59fae58f7e388153ea858","modified":1587980999000},{"_id":"source/imgs/idea/ex3.jpg","hash":"2d338dc5fdc304a4ac90e9c2b84f664c0e66ed15","modified":1587980999000},{"_id":"source/imgs/idea/ex5.jpg","hash":"ba66aa8b3d23a97ea1e83b5b3c626b829c687e5a","modified":1587980999000},{"_id":"source/imgs/idea/ex6.jpg","hash":"da95fc378676c5db23c742b81c2b06e54e8d4062","modified":1587980999000},{"_id":"source/imgs/idea/ex7.jpg","hash":"940cf04c69713ee3ea53994c0bbf6a6a6c1ad61d","modified":1587980999000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1587980999000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1587980999000},{"_id":"source/imgs/feign/feign-core5.jpg","hash":"d77dcad8faeace41441b2b6c592fe8d623f62768","modified":1587980999000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1587980999000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"a7e076bb4a12040771d15a8e80f50c7d13a5a452","modified":1587980999000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1587980999000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1587980999000},{"_id":"themes/next/layout/_macro/post.swig","hash":"ce5131f00bd3560d7e9dc3dec5eda1db04b99982","modified":1587980999000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1587980999000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1587980999000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1587980999000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"406acb5f2894633e637e65d21b6db76bc34a117f","modified":1587980999000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1587980999000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1587980999000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1587980999000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1587980999000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1587980999000},{"_id":"themes/next/layout/_partials/编辑1","hash":"f56e037b369020c94a8cc1046f44c57d8acce52b","modified":1587980999000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1587980999000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1587980999000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1587980999000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1587980999000},{"_id":"source/imgs/TSF.JPG","hash":"3d30c1dca6e4257f220c9b82bf44eb9997d0a913","modified":1587980999000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1587980999000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1587980999000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1587980999000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1587980999000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1587980999000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1587980999000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1587980999000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1587980999000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1587980999000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1587980999000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1587980999000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1587980999000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1587980999000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1587980999000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1587980999000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1587980999000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1587980999000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1587980999000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1587980999000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1587980999000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1587980999000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1587980999000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1587980999000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1587980999000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1587980999000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1587980999000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1587980999000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1587980999000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1587980999000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1587980999000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1587980999000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1587980999000},{"_id":"themes/next/source/images/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1587980999000},{"_id":"source/imgs/feign/feign-core7.jpg","hash":"7c60048e1bf9937e7851b935aaa6666817e6fb2c","modified":1587980999000},{"_id":"source/imgs/feign/new-project.jpg","hash":"992bf82171264cf08a17de1f6f9ce0cb5bdaab70","modified":1587980999000},{"_id":"source/imgs/feign/feign-core1.jpg","hash":"c73ed18c66e37a99f6d7a1bf4eb423afe473ff08","modified":1587980999000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587980999000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587980999000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1587980999000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587980999000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587980999000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587980999000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587980999000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587980999000},{"_id":"source/imgs/feign/feign-core6.jpg","hash":"e47a2e60b27ebd3f6b26d8c212dc506e03afcc6e","modified":1587980999000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1587980999000},{"_id":"source/imgs/feign/feign-core2.jpg","hash":"fbab1066a18de73d550bee046dd42443f8329c09","modified":1587980999000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1587980999000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1587980999000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1587980999000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1587980999000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1587980999000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1587980999000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1587980999000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1587980999000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1587980999000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1587980999000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1587980999000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1587980999000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1587980999000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1587980999000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a99b62ddec9be7e454ae661710dcd04a5bb256c0","modified":1587980999000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1587980999000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1587980999000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1587980999000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1587980999000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1587980999000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1587980999000},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1587980999000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"01d3ef9a5bcdd3b528f0e0f6afded1993dbf94de","modified":1587980999000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1587980999000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1587980999000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1587980999000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1587980999000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1587980999000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1587980999000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1587980999000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1587980999000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1587980999000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1587980999000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1587980999000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1587980999000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1587980999000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1587980999000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1587980999000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1587980999000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1587980999000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1587980999000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1587980999000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1587980999000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1587980999000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1587980999000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1587980999000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1587980999000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1587980999000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1587980999000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1587980999000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1587980999000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1587980999000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1587980999000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1587980999000},{"_id":"themes/next/source/images/alipay.jpg","hash":"3f70bd1b2f6f06b1dc7a7129636ef297fdb08510","modified":1587980999000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1587980999000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1587980999000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1587980999000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1587980999000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1587980999000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1587980999000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1587980999000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1587980999000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1587980999000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1587980999000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1587980999000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1587980999000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1587980999000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1587980999000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1587980999000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1587980999000},{"_id":"source/imgs/feign/feign-core3.jpg","hash":"f16a14565c3e90a362ac00fd22abdf9542481664","modified":1587980999000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1587980999000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1587980999000},{"_id":"source/imgs/线程状态图.png","hash":"28f78f88554c386b1245a6b0c7b3652fdf07505b","modified":1587980999000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1587980999000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1587980999000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1587980999000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1587980999000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1587980999000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1587980999000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1587980999000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1587980999000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1587980999000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1587980999000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1587980999000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1587980999000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1587980999000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1587980999000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1587980999000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1587980999000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1587980999000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1587980999000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1587980999000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"29a7ab7e908054c4c8d82b2556dbf3d72580efb8","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"17e4df556a1001fc2a4e8fba9cf69574fea095f1","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1587980999000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1587980999000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1587980999000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1587980999000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1587980999000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1587980999000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1587980999000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1587980999000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1587980999000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1587980999000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1587980999000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1587980999000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1587980999000},{"_id":"public/404/index.html","hash":"2813e9f6aef7aaae63545f19c599ccc403b4fde6","modified":1588666411645},{"_id":"public/about/index.html","hash":"4e447a4ba55ae6006e6547fae123f3770efacdbf","modified":1588666411645},{"_id":"public/search/index.html","hash":"a6321daff085356123bf055daaa22aa21eaadfc9","modified":1588666411645},{"_id":"public/tags/index.html","hash":"fd9fafce4269a3981a0f270dbcd69fe778770e3e","modified":1588666411645},{"_id":"public/archives/page/4/index.html","hash":"98bcf7fe1997a689a386d6e6a92a42ce15999a0d","modified":1588666411645},{"_id":"public/archives/2018/03/index.html","hash":"a79b0e4c688780912dc6a491b36c1c2072cfd373","modified":1588666411645},{"_id":"public/archives/2018/04/index.html","hash":"76ee9df9e55119aff0ab90990a6f092452d9a5c9","modified":1588666411645},{"_id":"public/archives/2018/05/index.html","hash":"ab67c8190a5bf7901a3e585d2861bd003e74ac49","modified":1588666411645},{"_id":"public/archives/2018/07/index.html","hash":"50c45a5f5eca16dd297368383ba493d2b7b7e5eb","modified":1588666411645},{"_id":"public/archives/2018/09/index.html","hash":"633311f36f57d364fec708720a800250e01be63c","modified":1588666411645},{"_id":"public/archives/2018/12/index.html","hash":"06f33575a27c46cbafefd7916af7c25da0fbe19d","modified":1588666411645},{"_id":"public/archives/2019/index.html","hash":"7f6243de7016e825228ccf6b7ef92aa905379b16","modified":1588666411645},{"_id":"public/archives/2019/08/index.html","hash":"952bc02e2a392a2d224517ec944cf4663997479d","modified":1588666411645},{"_id":"public/archives/2019/12/index.html","hash":"9bfe74f8b19b5528b97fb23658597405f6a7d563","modified":1588666411645},{"_id":"public/archives/2020/01/index.html","hash":"d5251db0ce458584eeed333d92ec4ecfb5b866fb","modified":1588666411645},{"_id":"public/archives/2020/04/index.html","hash":"87602783e12681abe09066e19b9e0876bcb6b8a9","modified":1588666411645},{"_id":"public/categories/Docker/index.html","hash":"a6228c6fa6c4109096b73a30b46c187ff7214ab3","modified":1588666411645},{"_id":"public/categories/QLExpress/index.html","hash":"758e01c6b92451f59b23c15abdfad24c3775c783","modified":1588666411645},{"_id":"public/categories/Wechat-Public-Manage/index.html","hash":"fbb38cd549fc5d34d5334306fc67f87ea48febbf","modified":1588666411645},{"_id":"public/categories/CentOS/index.html","hash":"8ac5b011ad9f0599fa9296ed71c0f86fdcb7aaa7","modified":1588666411645},{"_id":"public/categories/数据结构/index.html","hash":"770c32f7bc07e07d36c12b941fc2bce00f8e14ec","modified":1588666411645},{"_id":"public/categories/Dubbo/index.html","hash":"8b781d530c1188662ae463a47fc465f868825625","modified":1588666411645},{"_id":"public/categories/spring-cloud/index.html","hash":"0c00ec88ba8424130e451bdca6a3c995ea45c205","modified":1588666411645},{"_id":"public/categories/Git/index.html","hash":"86b12365d3b435f2ca8049f0cfb023db7cea1f38","modified":1588666411645},{"_id":"public/categories/Essay/index.html","hash":"770a73f82a7ac9d5a70a48e13ea37c72f78e0d3a","modified":1588666411645},{"_id":"public/categories/Java/index.html","hash":"84f0171a9d2ff39eb518cf64f3308394256ec06b","modified":1588666411645},{"_id":"public/categories/java多线程与高并发/index.html","hash":"03710d33965439ca1ae4fdbdf1bbcc1acfb02cd1","modified":1588666411645},{"_id":"public/categories/Lombok/index.html","hash":"fca765e39d3d1aec433d0bdaf810095b8ca404c2","modified":1588666411645},{"_id":"public/categories/nginx/index.html","hash":"7a463b11587a89fd0dc6dacdf1f1f5db3caece6a","modified":1588666411645},{"_id":"public/categories/Redis/index.html","hash":"014ce883ba6e158cec35f1870e26d972d92f52d8","modified":1588666411645},{"_id":"public/categories/Spring-batch/index.html","hash":"23b94dd633c44080568cdae830f69b5d1c40c1c6","modified":1588666411645},{"_id":"public/categories/others/index.html","hash":"8b3cd8289e71f0fda5ed317ef7e589d4e29c73fb","modified":1588666411645},{"_id":"public/categories/WordPress/index.html","hash":"cd160135f716e30e57d34bc658051eab6ff73cba","modified":1588666411645},{"_id":"public/categories/WeChat小程序/index.html","hash":"b4aa916fb3d9730bb565f0b3abff021e5e91686b","modified":1588666411645},{"_id":"public/categories/idea插件/index.html","hash":"3646b9164829fc1c7bb907f47f81fcca8861d15f","modified":1588666411645},{"_id":"public/categories/java/index.html","hash":"b5cd10558099c9eb2e2679e82ea9cda9e9b6c097","modified":1588666411645},{"_id":"public/categories/分布式/index.html","hash":"c197b9922151716eebeb561b997bc0a86df3ca4f","modified":1588666411645},{"_id":"public/categories/Tencent-financial-cloud/index.html","hash":"b050803e0ae9d0098a1fdc5e64d33c1782e9eeb2","modified":1588666411645},{"_id":"public/tags/Docker/index.html","hash":"70e7262a8bfc0b7516eb3e6659a85b6b517d2b0c","modified":1588666411645},{"_id":"public/tags/docker/index.html","hash":"58765a710cc9b97881530fc2c48e79b764eda76c","modified":1588666411645},{"_id":"public/tags/QLExpress/index.html","hash":"65fc973ea445fb42b64602f55c3989422ae67f29","modified":1588666411645},{"_id":"public/tags/Wechat-Public-Manage/index.html","hash":"4c2476cae62f280d7661871c35344d32cc235f5e","modified":1588666411645},{"_id":"public/tags/CentOS/index.html","hash":"778ec58cc12f1d75984b67ae42c40a877686b25d","modified":1588666411645},{"_id":"public/tags/数据结构/index.html","hash":"3d4e021451db74f335c2f8280c276d9e0a7c61d5","modified":1588666411645},{"_id":"public/tags/spring-cloud/index.html","hash":"39ccecd0f3503f6f887c7d92fabd6be6dc4f94b1","modified":1588666411645},{"_id":"public/tags/Essay/index.html","hash":"6ffb06dedc6c22bc59d6ed0cac1a540f8423fe43","modified":1588666411645},{"_id":"public/tags/java基础/index.html","hash":"ae5fa0a2dab6a633a3f8764a218c98a3a447811a","modified":1588666411645},{"_id":"public/tags/java/index.html","hash":"0f392f7629c0babf18947ce3e94996d2c5052125","modified":1588666411645},{"_id":"public/tags/java多线程与高并发/index.html","hash":"946a87527b8c0d3ffa7f1991aff91f117a71e9a7","modified":1588666411645},{"_id":"public/tags/lombok/index.html","hash":"17b33884ce9adda1b84fb65f2a962f2eb596ae0f","modified":1588666411645},{"_id":"public/tags/nginx/index.html","hash":"ba9c75f4e9102a7e5f83ee10ce4eba496343b11d","modified":1588666411645},{"_id":"public/tags/others/index.html","hash":"4dd0a0a9055daf061f5ec5c8c6be38f1263ea065","modified":1588666411645},{"_id":"public/tags/微信，小程序/index.html","hash":"c3d5276d81967290ed93de6c90585c66c0bdb03a","modified":1588666411645},{"_id":"public/tags/idea插件/index.html","hash":"3b7670958a166d1255076efbdac020de1c97c051","modified":1588666411645},{"_id":"public/categories/index.html","hash":"48427baba3bb957355128f9424d0dbd0a307ddea","modified":1588666411645},{"_id":"public/aticle/分布式锁.html","hash":"f92fc6d9b26911092687117a4036b5c74c0b0de9","modified":1588666411645},{"_id":"public/aticle/设计模式.html","hash":"aea5b10139f3694bd3d740ee0e2d2426efc3838d","modified":1588666411645},{"_id":"public/aticle/QLExpress.html","hash":"9ec63ee8fed24941553f803587e1563ffafc2fb0","modified":1588666411645},{"_id":"public/aticle/feign.html","hash":"4d759f70e1521811a38610fd0f7dbc50a7fef17c","modified":1588666411645},{"_id":"public/aticle/时序图.html","hash":"11631d93da73505ad92331b4e0f1c3bf50c6186d","modified":1588666411645},{"_id":"public/aticle/java多线程与高并发(二).html","hash":"16e6637ee1b1fea0007da729e30e6c3f9024ca38","modified":1588666411645},{"_id":"public/aticle/java多线程与高并发(一).html","hash":"159bd89a5dc08aa7c6c5a8b938a9c71278ddb700","modified":1588666411645},{"_id":"public/aticle/data-structure-1.html","hash":"cd62ff7e01736478155d2d6124d319d5a7bcb5c2","modified":1588666411645},{"_id":"public/aticle/Wechat-Public-Manage--1.html","hash":"878af86744743d01013abe19548f7108b48cb2f4","modified":1588666411645},{"_id":"public/aticle/time.html","hash":"8cd3c0aeea6aad93e68bbbbb56a65e37882691e1","modified":1588666411645},{"_id":"public/aticle/nginx.html","hash":"08faf96ac721fcf6e62033d4ed1fe36477ce0f57","modified":1588666411645},{"_id":"public/aticle/金融云.html","hash":"2d516a6a2cef897e3890f7c0453127af787175ef","modified":1588666411645},{"_id":"public/aticle/lombok.html","hash":"2c67cf6689acb6174dd886d0afed3b20f0f055a7","modified":1588666411645},{"_id":"public/aticle/springboot-notes.html","hash":"fa59e9699d280257a2ce65f6b2354e36d0283597","modified":1588666411645},{"_id":"public/aticle/Docker容器中搭建Redis集群.html","hash":"f3ec7e4f34bf3e1c9bd70e6b488d6d87f99d3e57","modified":1588666411645},{"_id":"public/aticle/Docker容器中搭建rabbitmq集群.html","hash":"4dcefcbd3a11f3f605cb60b9b67a35a6b99b01aa","modified":1588666411645},{"_id":"public/aticle/Dockerfile构建java环境镜像.html","hash":"87240d428fea981e462d67cc1b376edcd6df027f","modified":1588666411645},{"_id":"public/aticle/Docker-Learning.html","hash":"1f76726c9a1cffba24ddcd9a5ee8c3d4ee5c6e64","modified":1588666411645},{"_id":"public/aticle/java a=a++引发的思考.html","hash":"e7aeee2140b869291d2036811fe0cab536e807fd","modified":1588666411645},{"_id":"public/aticle/java8.html","hash":"8d1c12e482101f90849d6f65db65c7ade01162df","modified":1588666411645},{"_id":"public/aticle/wordpress-https.html","hash":"f631274202a9245f7d525ee0b54941e2dd57b13f","modified":1588666411645},{"_id":"public/aticle/wordpress-nginx.html","hash":"120fc213e59ed8572821ee439b5cf33a3ff11da3","modified":1588666411645},{"_id":"public/aticle/redis集群.html","hash":"ac39c0be5a7e50f2102a662c095b0dbebf9f1301","modified":1588666411645},{"_id":"public/aticle/redis.html","hash":"88e06f0cc55a0185536253beb92fe9abd1ce078d","modified":1588666411645},{"_id":"public/aticle/git.html","hash":"d39e62c3d8f21f68824e7a2c8de19541959aa36c","modified":1588666411645},{"_id":"public/aticle/dubbo.html","hash":"b6fbdb79efe7323b6a58c2edb83b6712cb490b24","modified":1588666411645},{"_id":"public/aticle/centos-mysql.html","hash":"5283ab94faf2f1e5d85e4cc2876298c691e01e3f","modified":1588666411645},{"_id":"public/aticle/springbatch.html","hash":"819d6b9a38dc3f235cbb491a0a729816d2568abe","modified":1588666411645},{"_id":"public/aticle/wordpress.html","hash":"02a51c4442d54c48583d4c7eed6f0494332da8a3","modified":1588666411645},{"_id":"public/aticle/centos-mq.html","hash":"9d82b52172748f3181f9e48931716d578565ef23","modified":1588666411645},{"_id":"public/aticle/wechat.html","hash":"decc6bad8d7dff9e687d76f004f9ec6136506475","modified":1588666411645},{"_id":"public/aticle/helloworld.html","hash":"bdc39694c1f58830bb021372bb9fe40abfe11c5f","modified":1588666411645},{"_id":"public/archives/index.html","hash":"0cedd6edcbbb0e9e921511b3aeb4257adbf9d154","modified":1588666411645},{"_id":"public/archives/page/2/index.html","hash":"606516e96e30d8906fff5a7c0c8134fce4707ef6","modified":1588666411645},{"_id":"public/archives/page/3/index.html","hash":"569a51dd1b250220651a9ba83e7500d545934d30","modified":1588666411645},{"_id":"public/archives/2017/index.html","hash":"84932250e91089e2b95cd7c253981d350fa08986","modified":1588666411645},{"_id":"public/archives/2017/12/index.html","hash":"6af6ae6079f3e78645332b19dc65d462cbd81a2d","modified":1588666411645},{"_id":"public/archives/2018/index.html","hash":"16bc4bce2f8d0efa3786d6285a9e3efb2654ea6b","modified":1588666411645},{"_id":"public/archives/2018/page/2/index.html","hash":"cabef0f10a94ede3fdc9c661e135982f7f03dc8f","modified":1588666411645},{"_id":"public/archives/2018/01/index.html","hash":"9f5be1629312b0c53752c1060244a0b161d0f339","modified":1588666411645},{"_id":"public/archives/2020/index.html","hash":"dfbbd6c84184766a8a6daceb9bc0628483ef52aa","modified":1588666411645},{"_id":"public/index.html","hash":"1225edba0252c65140a9f35f0f026bcfbdb414a5","modified":1588666411645},{"_id":"public/page/2/index.html","hash":"29efd3e18c64baf9f8466e5246adc3592ce89525","modified":1588666411645},{"_id":"public/page/3/index.html","hash":"c7dca53d17cc1835ef7a6f819d1c912cbdfdfbc0","modified":1588666411645},{"_id":"public/page/4/index.html","hash":"c01267db265871d6e6f1f3c4d1f47820fc529066","modified":1588666411645},{"_id":"public/tags/分布式/index.html","hash":"6cf42dcca4f705dbff80112872c4e262772d786e","modified":1588666411645},{"_id":"public/tags/financial-cloud/index.html","hash":"d0e8f1658bfea19da742bf3b225ba2c7bf5cbe37","modified":1588666411645},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588666411645},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588666411645},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588666411645},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588666411645},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588666411645},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588666411645},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1588666411645},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1588666411645},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1588666411645},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588666411645},{"_id":"public/favicon.ico","hash":"20c59e96f042970753776c92420583340cb3c6ae","modified":1588666411645},{"_id":"public/imgs/DBCB-2.png","hash":"8c2825cc373eb892475a2cb8a4d424b368880deb","modified":1588666411645},{"_id":"public/imgs/TCC.jpg","hash":"5d4f7ccfe51ef34c98a1b9f2a3ca58a62e40b460","modified":1588666411645},{"_id":"public/imgs/init.jpg","hash":"7fdba7a8b4734770f78259beaaa6547784160465","modified":1588666411645},{"_id":"public/imgs/MessageConverter.png","hash":"0576d1cffea5ad3d674da3ec90545ea794f6c7d7","modified":1588666411645},{"_id":"public/imgs/feign/feign-core4.jpg","hash":"da8c79df926cbedbd2a0de5a286eea9e314d28a9","modified":1588666411645},{"_id":"public/imgs/idea/ex2.jpg","hash":"cb407d67e579425fd2f11cc948df1c6dc7f2f8a5","modified":1588666411645},{"_id":"public/imgs/feign/feign-core8.jpg","hash":"e367d82bd2c24df9e292e060332e5ae51c18de82","modified":1588666411645},{"_id":"public/imgs/idea/ex1.jpg","hash":"6122284c58d0f6e23cf30a1a861c00c3eaf716c7","modified":1588666411645},{"_id":"public/imgs/idea/ex4.jpg","hash":"cb7ae63f9afa843a97e59fae58f7e388153ea858","modified":1588666411645},{"_id":"public/imgs/idea/ex3.jpg","hash":"2d338dc5fdc304a4ac90e9c2b84f664c0e66ed15","modified":1588666411645},{"_id":"public/imgs/idea/ex5.jpg","hash":"ba66aa8b3d23a97ea1e83b5b3c626b829c687e5a","modified":1588666411645},{"_id":"public/imgs/idea/ex6.jpg","hash":"da95fc378676c5db23c742b81c2b06e54e8d4062","modified":1588666411645},{"_id":"public/imgs/idea/ex7.jpg","hash":"940cf04c69713ee3ea53994c0bbf6a6a6c1ad61d","modified":1588666411645},{"_id":"public/imgs/feign/feign-core5.jpg","hash":"d77dcad8faeace41441b2b6c592fe8d623f62768","modified":1588666411645},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1588666411645},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1588666411645},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1588666411645},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1588666411645},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1588666411645},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1588666411645},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1588666411645},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1588666411645},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1588666411645},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1588666411645},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1588666411645},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1588666411645},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1588666411645},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1588666411645},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1588666411645},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1588666411645},{"_id":"public/images/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1588666411645},{"_id":"public/imgs/feign/feign-core1.jpg","hash":"c73ed18c66e37a99f6d7a1bf4eb423afe473ff08","modified":1588666411645},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1588666411645},{"_id":"public/imgs/feign/feign-core6.jpg","hash":"e47a2e60b27ebd3f6b26d8c212dc506e03afcc6e","modified":1588666411645},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1588666411645},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1588666411645},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1588666411645},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588666411645},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588666411645},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588666411645},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588666411645},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588666411645},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1588666411645},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588666411645},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1588666411645},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1588666411645},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1588666411645},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588666411645},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1588666411645},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1588666411645},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1588666411645},{"_id":"public/imgs/DBCB-1.png","hash":"1c9bd54eefac9a91fb9813f8a37bd5138bc99ece","modified":1588666411645},{"_id":"public/imgs/DBCB-3.png","hash":"2d53122ef6cdf04cab9e316dc49ed583ff66f75b","modified":1588666411645},{"_id":"public/imgs/msglive.jpg","hash":"78f9f85ddce58dfab34885849bc645966f7529eb","modified":1588666411645},{"_id":"public/imgs/lombokhttpproxy.JPG","hash":"960bd5d8e6dec1607a2f7c6c34c2db66330f2d54","modified":1588666411645},{"_id":"public/imgs/MsgRewind.jpg","hash":"5b986332b4ce59d44d6d62d21a60b6c145fc38dc","modified":1588666411645},{"_id":"public/imgs/feign/feign-core7.jpg","hash":"7c60048e1bf9937e7851b935aaa6666817e6fb2c","modified":1588666411645},{"_id":"public/imgs/feign/new-project.jpg","hash":"992bf82171264cf08a17de1f6f9ce0cb5bdaab70","modified":1588666411645},{"_id":"public/imgs/feign/feign-core2.jpg","hash":"fbab1066a18de73d550bee046dd42443f8329c09","modified":1588666411645},{"_id":"public/images/wechatpay.jpg","hash":"01d3ef9a5bcdd3b528f0e0f6afded1993dbf94de","modified":1588666411645},{"_id":"public/images/alipay.jpg","hash":"3f70bd1b2f6f06b1dc7a7129636ef297fdb08510","modified":1588666411645},{"_id":"public/imgs/feign/feign-core3.jpg","hash":"f16a14565c3e90a362ac00fd22abdf9542481664","modified":1588666411645},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1588666411645},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1588666411645},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1588666411645},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1588666411645},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588666411645},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1588666411645},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588666411645},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1588666411645},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1588666411645},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1588666411645},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1588666411645},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1588666411645},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1588666411645},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1588666411645},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1588666411645},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1588666411645},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1588666411645},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1588666411645},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1588666411645},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1588666411645},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1588666411645},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1588666411645},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1588666411645},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1588666411645},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1588666411645},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1588666411645},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1588666411645},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1588666411645},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1588666411645},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1588666411645},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1588666411645},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1588666411645},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1588666411645},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1588666411645},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1588666411645},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1588666411645},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1588666411645},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1588666411645},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1588666411645},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588666411645},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1588666411645},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1588666411645},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588666411645},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1588666411645},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1588666411645},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1588666411645},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1588666411645},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1588666411645},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1588666411645},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1588666411645},{"_id":"public/css/main.css","hash":"b44a255ecdf0ec53e9ad4d56c4a45b2e2a7ee9d7","modified":1588666411645},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1588666411645},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1588666411645},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1588666411645},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1588666411645},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1588666411645},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1588666411645},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1588666411645},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1588666411645},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1588666411645},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1588666411645},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1588666411645},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1588666411645},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1588666411645},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1588666411645},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1588666411645},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1588666411645},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1588666411645},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1588666411645},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1588666411645},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1588666411645},{"_id":"public/imgs/TSF.JPG","hash":"3d30c1dca6e4257f220c9b82bf44eb9997d0a913","modified":1588666411645},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1588666411645},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1588666411645},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1588666411645},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1588666411645},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1588666411645},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1588666411645},{"_id":"public/imgs/线程状态图.png","hash":"28f78f88554c386b1245a6b0c7b3652fdf07505b","modified":1588666411645}],"Category":[{"name":"Docker","_id":"ck9tmg7tm0004v8gp7q74en8b"},{"name":"QLExpress","_id":"ck9tmg7u7000ov8gpclrcf2ju"},{"name":"Wechat-Public-Manage","_id":"ck9tmg7uf000vv8gp6kxd9uck"},{"name":"CentOS","_id":"ck9tmg7uk0011v8gpbrcxc35r"},{"name":"数据结构","_id":"ck9tmg7ut001cv8gp0nk37r7s"},{"name":"Dubbo","_id":"ck9tmg7uz001kv8gp4r9f0rx6"},{"name":"spring cloud","_id":"ck9tmg7v3001qv8gp0pby6tr8"},{"name":"Git","_id":"ck9tmg7v6001wv8gpc6ui1ji8"},{"name":"Essay","_id":"ck9tmg7v90022v8gp4q7qdzrs"},{"name":"Java","_id":"ck9tmg7vf0029v8gphjlzah16"},{"name":"java多线程与高并发","_id":"ck9tmg7vl002kv8gp4uku8tlp"},{"name":"Lombok","_id":"ck9tmg7vl002pv8gpgk1bfepc"},{"name":"nginx","_id":"ck9tmg7vm002tv8gpedtle6r2"},{"name":"Redis","_id":"ck9tmg7vo0030v8gp2eb6dv86"},{"name":"Spring-batch","_id":"ck9tmg7vq0038v8gp5fhfa2do"},{"name":"others","_id":"ck9tmg7vr003dv8gp0zez31c7"},{"name":"WordPress","_id":"ck9tmg7vr003gv8gpdfly17d4"},{"name":"WeChat小程序","_id":"ck9tmg7vs003jv8gpfoelbamr"},{"name":"idea插件","_id":"ck9tmg7vv003pv8gpcfkr8q7r"},{"name":"java","_id":"ck9tmg7vw003sv8gpfw1uedzx"},{"name":"分布式","_id":"ck9tmg7vx003uv8gp10qh0wao"},{"name":"Tencent financial cloud","_id":"ck9tmg7vy003wv8gpcc9gdigm"}],"Data":[],"Page":[{"title":"404","date":"2018-03-21T12:50:55.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-03-21 20:50:55\n---\n","updated":"2020-04-27T09:49:59.000Z","path":"404/index.html","comments":1,"layout":"page","_id":"ck9tmg7t50000v8gpez3bga2u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404","date":"2018-03-21T12:50:55.000Z","_content":"\n自我审核中。。。。\n","source":"about/index.md","raw":"---\ntitle: 404\ndate: 2018-03-21 20:50:55\n---\n\n自我审核中。。。。\n","updated":"2020-04-27T09:49:59.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck9tmg7tg0002v8gp6c02c3wz","content":"<p>自我审核中。。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>自我审核中。。。。</p>\n"},{"title":"categories","date":"2018-04-26T09:08:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-04-26 17:08:23\ntype: \"categories\"\ncomments: false  \n\n---\n","updated":"2020-04-27T09:49:59.000Z","path":"categories/index.html","layout":"page","_id":"ck9tmg7tp0006v8gpag3pcq64","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","date":"2018-03-21T12:50:47.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2018-03-21 20:50:47\n---\n","updated":"2020-04-27T09:49:59.000Z","path":"search/index.html","comments":1,"layout":"page","_id":"ck9tmg7ts0008v8gp7sba8m4d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-04-26T09:10:39.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-04-26 17:10:39\ntype: \"tags\"\ncomments: false\n\n---\n","updated":"2020-04-27T09:49:59.000Z","path":"tags/index.html","layout":"page","_id":"ck9tmg7tu000av8gp9uoo6q4f","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Docker入门及基础命令","id":"101","date":"2018-05-16T02:20:31.000Z","author":["linxu"],"_content":"![](https://i.imgur.com/0p0flPx.jpg)\n# Docker入门 #  \n## Docker介绍 ##\n>关于 Docker 是什么，有个著名的隐喻：集装箱。但是它却起了个“码头工人”（docker 的英文翻译）的名字。这无疑给使用者很多暗示：“快来用吧！用了 Docker，就像世界出现了集装箱，这样你的业务就可以随意的、无拘无束的运行在任何地方（Docker 公司的口号：Build，Ship，and Run Any App，Anywhere），于是码头工人就基本都可以下岗了。”但是人们往往忽略了一个问题，隐喻的好处是方便人理解一个不容易理解的概念，但并不能解释其概念本身。 　　　　　　　　　　　　　　　　　　 　　—————————邹立巍《什么是 Docker?》\n\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\n\nDocker主要关键词是容器和镜像，可以从仓库中获取所需要的镜像，通过镜像创建容器。每一个容器都相当于一个完全独立的虚拟机(Docker不是虚拟机)，但是所占用内存消耗和启动时间等都远远小于虚拟机。在容器中可以根据所需安装软件，部署应用服务等。\n\n## Docker与Vm对比 ##\n![](https://i.imgur.com/Vx4ilht.jpg)\n\n图中可以看出docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有优势。docker利用的是宿主机的内核，而不需要Guest OS,因此新建一个docker容器只需要几秒钟。docker不需要增加Guest OS，所以在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。\n\n## 安装Docker ##\ndocker的安装非常简单，centOs中直接使用  \n\n\tyum install docker\n即可安装。\n\n## Docker基础命令 ##\n1. 启动docker  \n\t```\n\tservice docker start    \t#启动\n\tservice docker stop \t\t#停止\n\tservice docker restart \t \t#重启\n\t```\n2. 运行创建容器\n\t```\n\tsudo docker run -i -t ubuntu /bin/bash\n\t-i 保证容器中STDIN是开启的。STDIN是标准输入，一般指键盘输入到缓冲区里的东西。\n\t-t 为创建的容器分配一个伪tty终端。\n\t```\n3. 安装Vim  \n\t```\n\tapt-get update && apt-get install vim #容器中执行\n\t```\n4. 退出容器\n\t```\n\texit\n\t```\n5. 查看容器列表\n\t```\n\tdocker ps     \t\t#列出所有运行中的容器\n\tdocker ps -a  \t\t#列出所有容器\n\tdocker PS -l  \t\t#列出最后一次运行的容器\n\tdocker PS -n x    \t#列出最后一次运行的x个容器\n\t```\n6. 创建指定名称的容器\n\t```\n\tsudo docker run --name reallinxu -i -t ubuntu /bin/bash\n\t```\n7. 删除容器\n\t```\n\tdocker rm reallinxu  #可以通过容器名称、CONTAINER ID删除\n\t```\n8. 启动容器\n\t```\n\tdocker start b74cf5d6a711   #启动一个已停止的容器\n\tdocker restart b74cf5d6a711 #重新启动容器\n\t```\n9. 附着容器会话\n\t```\n\tdocker attach 48db85aa8845\n\t```\n10. 创建守护容器\n\t```\n\tsudo docker run --name daemon_aaa -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n\t#-d docker会让容器后台运行\n\t#-c 设置容器CPU权重，在CPU共享场景使用\n\t```\n11. 获取容器日志  \n\t```\n\tsudo docker logs daemon_aaa \t\t#输出最后几条log\n\tsudo docker logs -f daemon_aaa\t\t#动态监控log\n\tdocker logs --tail 10 daemon_aaa\t#获取日志最后10行\n\tdocker logs --tail 0 -f daemon_aaa\t#跟踪容器最新log\n\t```\n12. 查看容器内进程\n\t```\n\tsudo docker top daemon_aaa  \n\t```\n13. 在容器内部运行进程\n\t```\n\tsudo docker exec -d daemon_aaa touch /etc/new_config_file\n\t#-d 表示需要运行一个后台进程\n\tsudo docker exec -t -i daemon_aaa /bin/bash\n\t#创建一个新的bash会话，通过docker exec可以在运行中的容器中进行操作管理\n\t```\n14. 停止守护容器\n\t```\n\tsudo docker stop daemon_aaa #向容器发送SIGTERM信号\n\tsudo docker kill daemon_aaa #向容器发送SIGKILL信号,可以快速停止\n\t```\n15. 自动重启容器\n\t```\n\tsudo docker run --restart=always --name daemon_ccc -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n\t#--restart=always 无论退出代码是什么都会自动重启\n\t#--restart=on-failure 退出代码非0时重启\n\t#--restart=on-failure:5 非0时重启，最多重启5次\n\t```\n16. 获取容器信息\n\t```\n\tdocker inspect daemon_aaa   #查看容器详细信息\n\tdocker inspect --format='{{.State.Running}}' daemon_aaa #查看指定属性，区分大小写\n\tdocker inspect --format='{{.State.Running}} {{.Name}}'  daemon_aaa daemon_bbb #查看多个容器多个属性\n\t#所有容器都放在/var/lib/docker/containers文件夹下\n\t```\n17. 删除所有容器小技巧\n\t```\n\tdocker rm `docker ps -a -q`   #返回所有容器id传给rm\n\t```\n\n## 使用docker镜像和仓库 ##  \n1. 拉取指定仓库的镜像，默认为latest\n\t```\n\tdocker pull ubuntu\n\t```\n2. 查看本地镜像\n\t```\n\tdocker images\n\t```\n3. 镜像标签\n\t```\n\tdocker run -t -u --name haha ubuntu:12.04 /bin/bash\n\t#通过镜像ubuntu:12.04启动一个容器，不指定标签则为latest\n\t```\n4. docker hub上查找镜像\n\t```\n\tdocker search puppet\n\t```\n5. docker commit方法构建\n\tdockerhub注册账号：https://hub.docker.com/\n\t登录dockerhub\n\t```\n\tdocker login #登录dockerhub,个人认证信息保存在$HOME/.dockercfg\n\tsudo docker commit 9de0d8b43b0f reallinxu/ubuntu1  #提交一个镜像\n\tdocker commit -m=\"test\" --author=\"reallinxu\" 1d61b09d590d reallinxu/hah:hah\n\t#-m 提交信息\n\t#--author 作者\n\t#:hah 标签\n\t#docker commit提交的只是创建的容器与容器的当前状态有差异的部分，这使得更新非常轻量\n\t```\n6. dockerfile方法构建\n\t创建文件\n\t```\n\tmkdir static_web\n\tcd static_web\n\ttouch Dockerfile\n\tvi Dockerfile\n\t# Version: 0.0.1\n\tFROM ubuntu:14.04  #从指定镜像创建容器\n\tMAINTAINER reallinxu \"xxxxx@qq.com\" #指定用户名和作者\n\tRUN apt-get update #更新apt-get\n\tRUN apt-get install -y nginx  #安装ngnix\n\tRUN echo 'Hi,I am in your container' >/usr/share/nginx/html/index.html\n\tEXPOSE 80 #向外部公开80端口，可以公开多个端口\n\t```\n7. docker build构建镜像\n\t```\n\tsudo docker build -t=\"reallinxu/static_web\" .\t#默认latest标签\n\tsudo docker build -t=\"reallinxu/static_web:v1\" . #指定标签\n\tsudo docker build -t=\"reallinxu/static_web:v1\" gitURL  #可以通过git根目录下文件构建\n\t#build时会按照文件顺序一步步执行\n\t```\n8. 镜像推送到dockerhub\n\t```\n\tsudo docker commit 9de0d8b43b0f reallinxu/ubuntu1:test #构建镜像的时候最好加上tag，不加可能会报错\n\tsudo docker push 9de0d8b43b0f reallinxu/ubuntu1:test #推送到dockerhub\n\t```\n9. 删除镜像\n\t```\n\tdocker rmi reallinxu/ubuntu1:test\n\tdocker rmi `docker images -a -q`  #小技巧，返回所有镜像ID，再移除\n\t```\n\n# Docker进阶 #\n## 启动阿里云加速 ##\ndocker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容  \n\t```\n\t{\n\t\t\"registry-mirrors\": [\"https://almtd3fa.mirror.aliyuncs.com\"]\n\t}\n\t#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker\n\tsystemctl daemon-reload\n\tservice docker restart\n\t```\n## Docker中运行jar ##\n1. 下载java8镜像：\n\t```\n\tdocker pull frolvlad/alpine-oraclejdk8\n\t```\n2. 创建一个简单的spring-boot项目，开放8080端口，生成可执行的jar文件。\n3. 将demo-0.0.1-SNAPSHOT.jar放到/usr下，执行命令创建容器并执行jar\n\t```\n\tdocker run -d -p 8080:8080 -v /usr/demo-0.0.1-SNAPSHOT.jar:/usr/demo-0.0.1-SNAPSHOT.jar --name springboot frolvlad/alpine-oraclejdk8 java -jar /usr/demo-0.0.1-SNAPSHOT.jar\n\t#-d 容器后台运行\n\t#-p 主机端口与容器端口映射\n\t```\n4. 浏览器中输入ip:8080验证是否启动成功。\n\n## docker宿主机与容器文件交互 ##  \n\n1. 从主机复制到容器  \n\t```\n\tsudo docker cp host_path containerID:container_path\n\t```\n   从容器复制到主机\n\t```\n\tsudo docker cp containerID:container_path host_path\n\t```\n2. 挂载数据卷\n\t```\n\tdocker run -v /path/to/hostdir:/mnt $container(image name or image id)  在容器内拷贝  \n\tcp /mnt/sourcefile /path/to/destfile \n\t```","source":"_posts/Docker-Learning.md","raw":"---\ntitle: \"Docker入门及基础命令\"\ntags:\n  - Docker\nid: 101\ncategories:\n  - Docker\ndate: 2018-05-16 10:20:31\nauthor: \n  - linxu\n---\n![](https://i.imgur.com/0p0flPx.jpg)\n# Docker入门 #  \n## Docker介绍 ##\n>关于 Docker 是什么，有个著名的隐喻：集装箱。但是它却起了个“码头工人”（docker 的英文翻译）的名字。这无疑给使用者很多暗示：“快来用吧！用了 Docker，就像世界出现了集装箱，这样你的业务就可以随意的、无拘无束的运行在任何地方（Docker 公司的口号：Build，Ship，and Run Any App，Anywhere），于是码头工人就基本都可以下岗了。”但是人们往往忽略了一个问题，隐喻的好处是方便人理解一个不容易理解的概念，但并不能解释其概念本身。 　　　　　　　　　　　　　　　　　　 　　—————————邹立巍《什么是 Docker?》\n\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\n\nDocker主要关键词是容器和镜像，可以从仓库中获取所需要的镜像，通过镜像创建容器。每一个容器都相当于一个完全独立的虚拟机(Docker不是虚拟机)，但是所占用内存消耗和启动时间等都远远小于虚拟机。在容器中可以根据所需安装软件，部署应用服务等。\n\n## Docker与Vm对比 ##\n![](https://i.imgur.com/Vx4ilht.jpg)\n\n图中可以看出docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有优势。docker利用的是宿主机的内核，而不需要Guest OS,因此新建一个docker容器只需要几秒钟。docker不需要增加Guest OS，所以在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。\n\n## 安装Docker ##\ndocker的安装非常简单，centOs中直接使用  \n\n\tyum install docker\n即可安装。\n\n## Docker基础命令 ##\n1. 启动docker  \n\t```\n\tservice docker start    \t#启动\n\tservice docker stop \t\t#停止\n\tservice docker restart \t \t#重启\n\t```\n2. 运行创建容器\n\t```\n\tsudo docker run -i -t ubuntu /bin/bash\n\t-i 保证容器中STDIN是开启的。STDIN是标准输入，一般指键盘输入到缓冲区里的东西。\n\t-t 为创建的容器分配一个伪tty终端。\n\t```\n3. 安装Vim  \n\t```\n\tapt-get update && apt-get install vim #容器中执行\n\t```\n4. 退出容器\n\t```\n\texit\n\t```\n5. 查看容器列表\n\t```\n\tdocker ps     \t\t#列出所有运行中的容器\n\tdocker ps -a  \t\t#列出所有容器\n\tdocker PS -l  \t\t#列出最后一次运行的容器\n\tdocker PS -n x    \t#列出最后一次运行的x个容器\n\t```\n6. 创建指定名称的容器\n\t```\n\tsudo docker run --name reallinxu -i -t ubuntu /bin/bash\n\t```\n7. 删除容器\n\t```\n\tdocker rm reallinxu  #可以通过容器名称、CONTAINER ID删除\n\t```\n8. 启动容器\n\t```\n\tdocker start b74cf5d6a711   #启动一个已停止的容器\n\tdocker restart b74cf5d6a711 #重新启动容器\n\t```\n9. 附着容器会话\n\t```\n\tdocker attach 48db85aa8845\n\t```\n10. 创建守护容器\n\t```\n\tsudo docker run --name daemon_aaa -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n\t#-d docker会让容器后台运行\n\t#-c 设置容器CPU权重，在CPU共享场景使用\n\t```\n11. 获取容器日志  \n\t```\n\tsudo docker logs daemon_aaa \t\t#输出最后几条log\n\tsudo docker logs -f daemon_aaa\t\t#动态监控log\n\tdocker logs --tail 10 daemon_aaa\t#获取日志最后10行\n\tdocker logs --tail 0 -f daemon_aaa\t#跟踪容器最新log\n\t```\n12. 查看容器内进程\n\t```\n\tsudo docker top daemon_aaa  \n\t```\n13. 在容器内部运行进程\n\t```\n\tsudo docker exec -d daemon_aaa touch /etc/new_config_file\n\t#-d 表示需要运行一个后台进程\n\tsudo docker exec -t -i daemon_aaa /bin/bash\n\t#创建一个新的bash会话，通过docker exec可以在运行中的容器中进行操作管理\n\t```\n14. 停止守护容器\n\t```\n\tsudo docker stop daemon_aaa #向容器发送SIGTERM信号\n\tsudo docker kill daemon_aaa #向容器发送SIGKILL信号,可以快速停止\n\t```\n15. 自动重启容器\n\t```\n\tsudo docker run --restart=always --name daemon_ccc -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n\t#--restart=always 无论退出代码是什么都会自动重启\n\t#--restart=on-failure 退出代码非0时重启\n\t#--restart=on-failure:5 非0时重启，最多重启5次\n\t```\n16. 获取容器信息\n\t```\n\tdocker inspect daemon_aaa   #查看容器详细信息\n\tdocker inspect --format='{{.State.Running}}' daemon_aaa #查看指定属性，区分大小写\n\tdocker inspect --format='{{.State.Running}} {{.Name}}'  daemon_aaa daemon_bbb #查看多个容器多个属性\n\t#所有容器都放在/var/lib/docker/containers文件夹下\n\t```\n17. 删除所有容器小技巧\n\t```\n\tdocker rm `docker ps -a -q`   #返回所有容器id传给rm\n\t```\n\n## 使用docker镜像和仓库 ##  \n1. 拉取指定仓库的镜像，默认为latest\n\t```\n\tdocker pull ubuntu\n\t```\n2. 查看本地镜像\n\t```\n\tdocker images\n\t```\n3. 镜像标签\n\t```\n\tdocker run -t -u --name haha ubuntu:12.04 /bin/bash\n\t#通过镜像ubuntu:12.04启动一个容器，不指定标签则为latest\n\t```\n4. docker hub上查找镜像\n\t```\n\tdocker search puppet\n\t```\n5. docker commit方法构建\n\tdockerhub注册账号：https://hub.docker.com/\n\t登录dockerhub\n\t```\n\tdocker login #登录dockerhub,个人认证信息保存在$HOME/.dockercfg\n\tsudo docker commit 9de0d8b43b0f reallinxu/ubuntu1  #提交一个镜像\n\tdocker commit -m=\"test\" --author=\"reallinxu\" 1d61b09d590d reallinxu/hah:hah\n\t#-m 提交信息\n\t#--author 作者\n\t#:hah 标签\n\t#docker commit提交的只是创建的容器与容器的当前状态有差异的部分，这使得更新非常轻量\n\t```\n6. dockerfile方法构建\n\t创建文件\n\t```\n\tmkdir static_web\n\tcd static_web\n\ttouch Dockerfile\n\tvi Dockerfile\n\t# Version: 0.0.1\n\tFROM ubuntu:14.04  #从指定镜像创建容器\n\tMAINTAINER reallinxu \"xxxxx@qq.com\" #指定用户名和作者\n\tRUN apt-get update #更新apt-get\n\tRUN apt-get install -y nginx  #安装ngnix\n\tRUN echo 'Hi,I am in your container' >/usr/share/nginx/html/index.html\n\tEXPOSE 80 #向外部公开80端口，可以公开多个端口\n\t```\n7. docker build构建镜像\n\t```\n\tsudo docker build -t=\"reallinxu/static_web\" .\t#默认latest标签\n\tsudo docker build -t=\"reallinxu/static_web:v1\" . #指定标签\n\tsudo docker build -t=\"reallinxu/static_web:v1\" gitURL  #可以通过git根目录下文件构建\n\t#build时会按照文件顺序一步步执行\n\t```\n8. 镜像推送到dockerhub\n\t```\n\tsudo docker commit 9de0d8b43b0f reallinxu/ubuntu1:test #构建镜像的时候最好加上tag，不加可能会报错\n\tsudo docker push 9de0d8b43b0f reallinxu/ubuntu1:test #推送到dockerhub\n\t```\n9. 删除镜像\n\t```\n\tdocker rmi reallinxu/ubuntu1:test\n\tdocker rmi `docker images -a -q`  #小技巧，返回所有镜像ID，再移除\n\t```\n\n# Docker进阶 #\n## 启动阿里云加速 ##\ndocker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容  \n\t```\n\t{\n\t\t\"registry-mirrors\": [\"https://almtd3fa.mirror.aliyuncs.com\"]\n\t}\n\t#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker\n\tsystemctl daemon-reload\n\tservice docker restart\n\t```\n## Docker中运行jar ##\n1. 下载java8镜像：\n\t```\n\tdocker pull frolvlad/alpine-oraclejdk8\n\t```\n2. 创建一个简单的spring-boot项目，开放8080端口，生成可执行的jar文件。\n3. 将demo-0.0.1-SNAPSHOT.jar放到/usr下，执行命令创建容器并执行jar\n\t```\n\tdocker run -d -p 8080:8080 -v /usr/demo-0.0.1-SNAPSHOT.jar:/usr/demo-0.0.1-SNAPSHOT.jar --name springboot frolvlad/alpine-oraclejdk8 java -jar /usr/demo-0.0.1-SNAPSHOT.jar\n\t#-d 容器后台运行\n\t#-p 主机端口与容器端口映射\n\t```\n4. 浏览器中输入ip:8080验证是否启动成功。\n\n## docker宿主机与容器文件交互 ##  \n\n1. 从主机复制到容器  \n\t```\n\tsudo docker cp host_path containerID:container_path\n\t```\n   从容器复制到主机\n\t```\n\tsudo docker cp containerID:container_path host_path\n\t```\n2. 挂载数据卷\n\t```\n\tdocker run -v /path/to/hostdir:/mnt $container(image name or image id)  在容器内拷贝  \n\tcp /mnt/sourcefile /path/to/destfile \n\t```","slug":"Docker-Learning","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7tc0001v8gp8bbf4def","content":"<p><img src=\"https://i.imgur.com/0p0flPx.jpg\" alt=\"\"></p>\n<h1 id=\"Docker入门\"><a href=\"#Docker入门\" class=\"headerlink\" title=\"Docker入门\"></a>Docker入门</h1><h2 id=\"Docker介绍\"><a href=\"#Docker介绍\" class=\"headerlink\" title=\"Docker介绍\"></a>Docker介绍</h2><blockquote>\n<p>关于 Docker 是什么，有个著名的隐喻：集装箱。但是它却起了个“码头工人”（docker 的英文翻译）的名字。这无疑给使用者很多暗示：“快来用吧！用了 Docker，就像世界出现了集装箱，这样你的业务就可以随意的、无拘无束的运行在任何地方（Docker 公司的口号：Build，Ship，and Run Any App，Anywhere），于是码头工人就基本都可以下岗了。”但是人们往往忽略了一个问题，隐喻的好处是方便人理解一个不容易理解的概念，但并不能解释其概念本身。 　　　　　　　　　　　　　　　　　　 　　—————————邹立巍《什么是 Docker?》</p>\n</blockquote>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n<p>Docker主要关键词是容器和镜像，可以从仓库中获取所需要的镜像，通过镜像创建容器。每一个容器都相当于一个完全独立的虚拟机(Docker不是虚拟机)，但是所占用内存消耗和启动时间等都远远小于虚拟机。在容器中可以根据所需安装软件，部署应用服务等。</p>\n<h2 id=\"Docker与Vm对比\"><a href=\"#Docker与Vm对比\" class=\"headerlink\" title=\"Docker与Vm对比\"></a>Docker与Vm对比</h2><p><img src=\"https://i.imgur.com/Vx4ilht.jpg\" alt=\"\"></p>\n<p>图中可以看出docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有优势。docker利用的是宿主机的内核，而不需要Guest OS,因此新建一个docker容器只需要几秒钟。docker不需要增加Guest OS，所以在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。</p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>docker的安装非常简单，centOs中直接使用  </p>\n<pre><code>yum install docker</code></pre><p>即可安装。</p>\n<h2 id=\"Docker基础命令\"><a href=\"#Docker基础命令\" class=\"headerlink\" title=\"Docker基础命令\"></a>Docker基础命令</h2><ol>\n<li>启动docker   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker start    \t#启动</span><br><span class=\"line\">service docker stop \t\t#停止</span><br><span class=\"line\">service docker restart \t \t#重启</span><br></pre></td></tr></table></figure></li>\n<li>运行创建容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -i -t ubuntu &#x2F;bin&#x2F;bash</span><br><span class=\"line\">-i 保证容器中STDIN是开启的。STDIN是标准输入，一般指键盘输入到缓冲区里的东西。</span><br><span class=\"line\">-t 为创建的容器分配一个伪tty终端。</span><br></pre></td></tr></table></figure></li>\n<li>安装Vim   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update &amp;&amp; apt-get install vim #容器中执行</span><br></pre></td></tr></table></figure></li>\n<li>退出容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure></li>\n<li>查看容器列表 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps     \t\t#列出所有运行中的容器</span><br><span class=\"line\">docker ps -a  \t\t#列出所有容器</span><br><span class=\"line\">docker PS -l  \t\t#列出最后一次运行的容器</span><br><span class=\"line\">docker PS -n x    \t#列出最后一次运行的x个容器</span><br></pre></td></tr></table></figure></li>\n<li>创建指定名称的容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name reallinxu -i -t ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></li>\n<li>删除容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm reallinxu  #可以通过容器名称、CONTAINER ID删除</span><br></pre></td></tr></table></figure></li>\n<li>启动容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start b74cf5d6a711   #启动一个已停止的容器</span><br><span class=\"line\">docker restart b74cf5d6a711 #重新启动容器</span><br></pre></td></tr></table></figure></li>\n<li>附着容器会话 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 48db85aa8845</span><br></pre></td></tr></table></figure></li>\n<li>创建守护容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name daemon_aaa -d ubuntu &#x2F;bin&#x2F;sh -c &quot;while true;do echo hello world;sleep 1;done&quot;</span><br><span class=\"line\">#-d docker会让容器后台运行</span><br><span class=\"line\">#-c 设置容器CPU权重，在CPU共享场景使用</span><br></pre></td></tr></table></figure></li>\n<li>获取容器日志  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker logs daemon_aaa \t\t#输出最后几条log</span><br><span class=\"line\">sudo docker logs -f daemon_aaa\t\t#动态监控log</span><br><span class=\"line\">docker logs --tail 10 daemon_aaa\t#获取日志最后10行</span><br><span class=\"line\">docker logs --tail 0 -f daemon_aaa\t#跟踪容器最新log</span><br></pre></td></tr></table></figure></li>\n<li>查看容器内进程<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker top daemon_aaa</span><br></pre></td></tr></table></figure></li>\n<li>在容器内部运行进程<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec -d daemon_aaa touch &#x2F;etc&#x2F;new_config_file</span><br><span class=\"line\">#-d 表示需要运行一个后台进程</span><br><span class=\"line\">sudo docker exec -t -i daemon_aaa &#x2F;bin&#x2F;bash</span><br><span class=\"line\">#创建一个新的bash会话，通过docker exec可以在运行中的容器中进行操作管理</span><br></pre></td></tr></table></figure></li>\n<li>停止守护容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker stop daemon_aaa #向容器发送SIGTERM信号</span><br><span class=\"line\">sudo docker kill daemon_aaa #向容器发送SIGKILL信号,可以快速停止</span><br></pre></td></tr></table></figure></li>\n<li>自动重启容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart&#x3D;always --name daemon_ccc -d ubuntu &#x2F;bin&#x2F;sh -c &quot;while true;do echo hello world;sleep 1;done&quot;</span><br><span class=\"line\">#--restart&#x3D;always 无论退出代码是什么都会自动重启</span><br><span class=\"line\">#--restart&#x3D;on-failure 退出代码非0时重启</span><br><span class=\"line\">#--restart&#x3D;on-failure:5 非0时重启，最多重启5次</span><br></pre></td></tr></table></figure></li>\n<li>获取容器信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect daemon_aaa   #查看容器详细信息</span><br><span class=\"line\">docker inspect --format&#x3D;&#39;&#123;&#123;.State.Running&#125;&#125;&#39; daemon_aaa #查看指定属性，区分大小写</span><br><span class=\"line\">docker inspect --format&#x3D;&#39;&#123;&#123;.State.Running&#125;&#125; &#123;&#123;.Name&#125;&#125;&#39;  daemon_aaa daemon_bbb #查看多个容器多个属性</span><br><span class=\"line\">#所有容器都放在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers文件夹下</span><br></pre></td></tr></table></figure></li>\n<li>删除所有容器小技巧<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &#96;docker ps -a -q&#96;   #返回所有容器id传给rm</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用docker镜像和仓库\"><a href=\"#使用docker镜像和仓库\" class=\"headerlink\" title=\"使用docker镜像和仓库\"></a>使用docker镜像和仓库</h2><ol>\n<li>拉取指定仓库的镜像，默认为latest <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu</span><br></pre></td></tr></table></figure></li>\n<li>查看本地镜像 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></li>\n<li>镜像标签 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -u --name haha ubuntu:12.04 &#x2F;bin&#x2F;bash</span><br><span class=\"line\">#通过镜像ubuntu:12.04启动一个容器，不指定标签则为latest</span><br></pre></td></tr></table></figure></li>\n<li>docker hub上查找镜像 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search puppet</span><br></pre></td></tr></table></figure></li>\n<li>docker commit方法构建<br> dockerhub注册账号：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a><br> 登录dockerhub <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login #登录dockerhub,个人认证信息保存在$HOME&#x2F;.dockercfg</span><br><span class=\"line\">sudo docker commit 9de0d8b43b0f reallinxu&#x2F;ubuntu1  #提交一个镜像</span><br><span class=\"line\">docker commit -m&#x3D;&quot;test&quot; --author&#x3D;&quot;reallinxu&quot; 1d61b09d590d reallinxu&#x2F;hah:hah</span><br><span class=\"line\">#-m 提交信息</span><br><span class=\"line\">#--author 作者</span><br><span class=\"line\">#:hah 标签</span><br><span class=\"line\">#docker commit提交的只是创建的容器与容器的当前状态有差异的部分，这使得更新非常轻量</span><br></pre></td></tr></table></figure></li>\n<li>dockerfile方法构建<br> 创建文件 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir static_web</span><br><span class=\"line\">cd static_web</span><br><span class=\"line\">touch Dockerfile</span><br><span class=\"line\">vi Dockerfile</span><br><span class=\"line\"># Version: 0.0.1</span><br><span class=\"line\">FROM ubuntu:14.04  #从指定镜像创建容器</span><br><span class=\"line\">MAINTAINER reallinxu &quot;xxxxx@qq.com&quot; #指定用户名和作者</span><br><span class=\"line\">RUN apt-get update #更新apt-get</span><br><span class=\"line\">RUN apt-get install -y nginx  #安装ngnix</span><br><span class=\"line\">RUN echo &#39;Hi,I am in your container&#39; &gt;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class=\"line\">EXPOSE 80 #向外部公开80端口，可以公开多个端口</span><br></pre></td></tr></table></figure></li>\n<li>docker build构建镜像 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker build -t&#x3D;&quot;reallinxu&#x2F;static_web&quot; .\t#默认latest标签</span><br><span class=\"line\">sudo docker build -t&#x3D;&quot;reallinxu&#x2F;static_web:v1&quot; . #指定标签</span><br><span class=\"line\">sudo docker build -t&#x3D;&quot;reallinxu&#x2F;static_web:v1&quot; gitURL  #可以通过git根目录下文件构建</span><br><span class=\"line\">#build时会按照文件顺序一步步执行</span><br></pre></td></tr></table></figure></li>\n<li>镜像推送到dockerhub <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker commit 9de0d8b43b0f reallinxu&#x2F;ubuntu1:test #构建镜像的时候最好加上tag，不加可能会报错</span><br><span class=\"line\">sudo docker push 9de0d8b43b0f reallinxu&#x2F;ubuntu1:test #推送到dockerhub</span><br></pre></td></tr></table></figure></li>\n<li>删除镜像 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi reallinxu&#x2F;ubuntu1:test</span><br><span class=\"line\">docker rmi &#96;docker images -a -q&#96;  #小技巧，返回所有镜像ID，再移除</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"Docker进阶\"><a href=\"#Docker进阶\" class=\"headerlink\" title=\"Docker进阶\"></a>Docker进阶</h1><h2 id=\"启动阿里云加速\"><a href=\"#启动阿里云加速\" class=\"headerlink\" title=\"启动阿里云加速\"></a>启动阿里云加速</h2><p>docker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#https:&#x2F;&#x2F;almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker中运行jar\"><a href=\"#Docker中运行jar\" class=\"headerlink\" title=\"Docker中运行jar\"></a>Docker中运行jar</h2><ol>\n<li>下载java8镜像： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull frolvlad&#x2F;alpine-oraclejdk8</span><br></pre></td></tr></table></figure></li>\n<li>创建一个简单的spring-boot项目，开放8080端口，生成可执行的jar文件。</li>\n<li>将demo-0.0.1-SNAPSHOT.jar放到/usr下，执行命令创建容器并执行jar <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:8080 -v &#x2F;usr&#x2F;demo-0.0.1-SNAPSHOT.jar:&#x2F;usr&#x2F;demo-0.0.1-SNAPSHOT.jar --name springboot frolvlad&#x2F;alpine-oraclejdk8 java -jar &#x2F;usr&#x2F;demo-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\">#-d 容器后台运行</span><br><span class=\"line\">#-p 主机端口与容器端口映射</span><br></pre></td></tr></table></figure></li>\n<li>浏览器中输入ip:8080验证是否启动成功。</li>\n</ol>\n<h2 id=\"docker宿主机与容器文件交互\"><a href=\"#docker宿主机与容器文件交互\" class=\"headerlink\" title=\"docker宿主机与容器文件交互\"></a>docker宿主机与容器文件交互</h2><ol>\n<li>从主机复制到容器   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp host_path containerID:container_path</span><br></pre></td></tr></table></figure>\n从容器复制到主机 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure></li>\n<li>挂载数据卷 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v &#x2F;path&#x2F;to&#x2F;hostdir:&#x2F;mnt $container(image name or image id)  在容器内拷贝  </span><br><span class=\"line\">cp &#x2F;mnt&#x2F;sourcefile &#x2F;path&#x2F;to&#x2F;destfile</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.imgur.com/0p0flPx.jpg\" alt=\"\"></p>\n<h1 id=\"Docker入门\"><a href=\"#Docker入门\" class=\"headerlink\" title=\"Docker入门\"></a>Docker入门</h1><h2 id=\"Docker介绍\"><a href=\"#Docker介绍\" class=\"headerlink\" title=\"Docker介绍\"></a>Docker介绍</h2><blockquote>\n<p>关于 Docker 是什么，有个著名的隐喻：集装箱。但是它却起了个“码头工人”（docker 的英文翻译）的名字。这无疑给使用者很多暗示：“快来用吧！用了 Docker，就像世界出现了集装箱，这样你的业务就可以随意的、无拘无束的运行在任何地方（Docker 公司的口号：Build，Ship，and Run Any App，Anywhere），于是码头工人就基本都可以下岗了。”但是人们往往忽略了一个问题，隐喻的好处是方便人理解一个不容易理解的概念，但并不能解释其概念本身。 　　　　　　　　　　　　　　　　　　 　　—————————邹立巍《什么是 Docker?》</p>\n</blockquote>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n<p>Docker主要关键词是容器和镜像，可以从仓库中获取所需要的镜像，通过镜像创建容器。每一个容器都相当于一个完全独立的虚拟机(Docker不是虚拟机)，但是所占用内存消耗和启动时间等都远远小于虚拟机。在容器中可以根据所需安装软件，部署应用服务等。</p>\n<h2 id=\"Docker与Vm对比\"><a href=\"#Docker与Vm对比\" class=\"headerlink\" title=\"Docker与Vm对比\"></a>Docker与Vm对比</h2><p><img src=\"https://i.imgur.com/Vx4ilht.jpg\" alt=\"\"></p>\n<p>图中可以看出docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有优势。docker利用的是宿主机的内核，而不需要Guest OS,因此新建一个docker容器只需要几秒钟。docker不需要增加Guest OS，所以在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。</p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>docker的安装非常简单，centOs中直接使用  </p>\n<pre><code>yum install docker</code></pre><p>即可安装。</p>\n<h2 id=\"Docker基础命令\"><a href=\"#Docker基础命令\" class=\"headerlink\" title=\"Docker基础命令\"></a>Docker基础命令</h2><ol>\n<li>启动docker   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker start    \t#启动</span><br><span class=\"line\">service docker stop \t\t#停止</span><br><span class=\"line\">service docker restart \t \t#重启</span><br></pre></td></tr></table></figure></li>\n<li>运行创建容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -i -t ubuntu &#x2F;bin&#x2F;bash</span><br><span class=\"line\">-i 保证容器中STDIN是开启的。STDIN是标准输入，一般指键盘输入到缓冲区里的东西。</span><br><span class=\"line\">-t 为创建的容器分配一个伪tty终端。</span><br></pre></td></tr></table></figure></li>\n<li>安装Vim   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update &amp;&amp; apt-get install vim #容器中执行</span><br></pre></td></tr></table></figure></li>\n<li>退出容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure></li>\n<li>查看容器列表 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps     \t\t#列出所有运行中的容器</span><br><span class=\"line\">docker ps -a  \t\t#列出所有容器</span><br><span class=\"line\">docker PS -l  \t\t#列出最后一次运行的容器</span><br><span class=\"line\">docker PS -n x    \t#列出最后一次运行的x个容器</span><br></pre></td></tr></table></figure></li>\n<li>创建指定名称的容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name reallinxu -i -t ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></li>\n<li>删除容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm reallinxu  #可以通过容器名称、CONTAINER ID删除</span><br></pre></td></tr></table></figure></li>\n<li>启动容器 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start b74cf5d6a711   #启动一个已停止的容器</span><br><span class=\"line\">docker restart b74cf5d6a711 #重新启动容器</span><br></pre></td></tr></table></figure></li>\n<li>附着容器会话 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 48db85aa8845</span><br></pre></td></tr></table></figure></li>\n<li>创建守护容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name daemon_aaa -d ubuntu &#x2F;bin&#x2F;sh -c &quot;while true;do echo hello world;sleep 1;done&quot;</span><br><span class=\"line\">#-d docker会让容器后台运行</span><br><span class=\"line\">#-c 设置容器CPU权重，在CPU共享场景使用</span><br></pre></td></tr></table></figure></li>\n<li>获取容器日志  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker logs daemon_aaa \t\t#输出最后几条log</span><br><span class=\"line\">sudo docker logs -f daemon_aaa\t\t#动态监控log</span><br><span class=\"line\">docker logs --tail 10 daemon_aaa\t#获取日志最后10行</span><br><span class=\"line\">docker logs --tail 0 -f daemon_aaa\t#跟踪容器最新log</span><br></pre></td></tr></table></figure></li>\n<li>查看容器内进程<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker top daemon_aaa</span><br></pre></td></tr></table></figure></li>\n<li>在容器内部运行进程<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec -d daemon_aaa touch &#x2F;etc&#x2F;new_config_file</span><br><span class=\"line\">#-d 表示需要运行一个后台进程</span><br><span class=\"line\">sudo docker exec -t -i daemon_aaa &#x2F;bin&#x2F;bash</span><br><span class=\"line\">#创建一个新的bash会话，通过docker exec可以在运行中的容器中进行操作管理</span><br></pre></td></tr></table></figure></li>\n<li>停止守护容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker stop daemon_aaa #向容器发送SIGTERM信号</span><br><span class=\"line\">sudo docker kill daemon_aaa #向容器发送SIGKILL信号,可以快速停止</span><br></pre></td></tr></table></figure></li>\n<li>自动重启容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart&#x3D;always --name daemon_ccc -d ubuntu &#x2F;bin&#x2F;sh -c &quot;while true;do echo hello world;sleep 1;done&quot;</span><br><span class=\"line\">#--restart&#x3D;always 无论退出代码是什么都会自动重启</span><br><span class=\"line\">#--restart&#x3D;on-failure 退出代码非0时重启</span><br><span class=\"line\">#--restart&#x3D;on-failure:5 非0时重启，最多重启5次</span><br></pre></td></tr></table></figure></li>\n<li>获取容器信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect daemon_aaa   #查看容器详细信息</span><br><span class=\"line\">docker inspect --format&#x3D;&#39;&#123;&#123;.State.Running&#125;&#125;&#39; daemon_aaa #查看指定属性，区分大小写</span><br><span class=\"line\">docker inspect --format&#x3D;&#39;&#123;&#123;.State.Running&#125;&#125; &#123;&#123;.Name&#125;&#125;&#39;  daemon_aaa daemon_bbb #查看多个容器多个属性</span><br><span class=\"line\">#所有容器都放在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers文件夹下</span><br></pre></td></tr></table></figure></li>\n<li>删除所有容器小技巧<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &#96;docker ps -a -q&#96;   #返回所有容器id传给rm</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"使用docker镜像和仓库\"><a href=\"#使用docker镜像和仓库\" class=\"headerlink\" title=\"使用docker镜像和仓库\"></a>使用docker镜像和仓库</h2><ol>\n<li>拉取指定仓库的镜像，默认为latest <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu</span><br></pre></td></tr></table></figure></li>\n<li>查看本地镜像 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></li>\n<li>镜像标签 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -u --name haha ubuntu:12.04 &#x2F;bin&#x2F;bash</span><br><span class=\"line\">#通过镜像ubuntu:12.04启动一个容器，不指定标签则为latest</span><br></pre></td></tr></table></figure></li>\n<li>docker hub上查找镜像 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search puppet</span><br></pre></td></tr></table></figure></li>\n<li>docker commit方法构建<br> dockerhub注册账号：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a><br> 登录dockerhub <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login #登录dockerhub,个人认证信息保存在$HOME&#x2F;.dockercfg</span><br><span class=\"line\">sudo docker commit 9de0d8b43b0f reallinxu&#x2F;ubuntu1  #提交一个镜像</span><br><span class=\"line\">docker commit -m&#x3D;&quot;test&quot; --author&#x3D;&quot;reallinxu&quot; 1d61b09d590d reallinxu&#x2F;hah:hah</span><br><span class=\"line\">#-m 提交信息</span><br><span class=\"line\">#--author 作者</span><br><span class=\"line\">#:hah 标签</span><br><span class=\"line\">#docker commit提交的只是创建的容器与容器的当前状态有差异的部分，这使得更新非常轻量</span><br></pre></td></tr></table></figure></li>\n<li>dockerfile方法构建<br> 创建文件 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir static_web</span><br><span class=\"line\">cd static_web</span><br><span class=\"line\">touch Dockerfile</span><br><span class=\"line\">vi Dockerfile</span><br><span class=\"line\"># Version: 0.0.1</span><br><span class=\"line\">FROM ubuntu:14.04  #从指定镜像创建容器</span><br><span class=\"line\">MAINTAINER reallinxu &quot;xxxxx@qq.com&quot; #指定用户名和作者</span><br><span class=\"line\">RUN apt-get update #更新apt-get</span><br><span class=\"line\">RUN apt-get install -y nginx  #安装ngnix</span><br><span class=\"line\">RUN echo &#39;Hi,I am in your container&#39; &gt;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class=\"line\">EXPOSE 80 #向外部公开80端口，可以公开多个端口</span><br></pre></td></tr></table></figure></li>\n<li>docker build构建镜像 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker build -t&#x3D;&quot;reallinxu&#x2F;static_web&quot; .\t#默认latest标签</span><br><span class=\"line\">sudo docker build -t&#x3D;&quot;reallinxu&#x2F;static_web:v1&quot; . #指定标签</span><br><span class=\"line\">sudo docker build -t&#x3D;&quot;reallinxu&#x2F;static_web:v1&quot; gitURL  #可以通过git根目录下文件构建</span><br><span class=\"line\">#build时会按照文件顺序一步步执行</span><br></pre></td></tr></table></figure></li>\n<li>镜像推送到dockerhub <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker commit 9de0d8b43b0f reallinxu&#x2F;ubuntu1:test #构建镜像的时候最好加上tag，不加可能会报错</span><br><span class=\"line\">sudo docker push 9de0d8b43b0f reallinxu&#x2F;ubuntu1:test #推送到dockerhub</span><br></pre></td></tr></table></figure></li>\n<li>删除镜像 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi reallinxu&#x2F;ubuntu1:test</span><br><span class=\"line\">docker rmi &#96;docker images -a -q&#96;  #小技巧，返回所有镜像ID，再移除</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"Docker进阶\"><a href=\"#Docker进阶\" class=\"headerlink\" title=\"Docker进阶\"></a>Docker进阶</h1><h2 id=\"启动阿里云加速\"><a href=\"#启动阿里云加速\" class=\"headerlink\" title=\"启动阿里云加速\"></a>启动阿里云加速</h2><p>docker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#https:&#x2F;&#x2F;almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker中运行jar\"><a href=\"#Docker中运行jar\" class=\"headerlink\" title=\"Docker中运行jar\"></a>Docker中运行jar</h2><ol>\n<li>下载java8镜像： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull frolvlad&#x2F;alpine-oraclejdk8</span><br></pre></td></tr></table></figure></li>\n<li>创建一个简单的spring-boot项目，开放8080端口，生成可执行的jar文件。</li>\n<li>将demo-0.0.1-SNAPSHOT.jar放到/usr下，执行命令创建容器并执行jar <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:8080 -v &#x2F;usr&#x2F;demo-0.0.1-SNAPSHOT.jar:&#x2F;usr&#x2F;demo-0.0.1-SNAPSHOT.jar --name springboot frolvlad&#x2F;alpine-oraclejdk8 java -jar &#x2F;usr&#x2F;demo-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\">#-d 容器后台运行</span><br><span class=\"line\">#-p 主机端口与容器端口映射</span><br></pre></td></tr></table></figure></li>\n<li>浏览器中输入ip:8080验证是否启动成功。</li>\n</ol>\n<h2 id=\"docker宿主机与容器文件交互\"><a href=\"#docker宿主机与容器文件交互\" class=\"headerlink\" title=\"docker宿主机与容器文件交互\"></a>docker宿主机与容器文件交互</h2><ol>\n<li>从主机复制到容器   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp host_path containerID:container_path</span><br></pre></td></tr></table></figure>\n从容器复制到主机 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure></li>\n<li>挂载数据卷 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v &#x2F;path&#x2F;to&#x2F;hostdir:&#x2F;mnt $container(image name or image id)  在容器内拷贝  </span><br><span class=\"line\">cp &#x2F;mnt&#x2F;sourcefile &#x2F;path&#x2F;to&#x2F;destfile</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Dockerfile构建java环境镜像","id":"521","date":"2018-05-28T10:20:31.000Z","author":["linxu"],"_content":"\n# dockerfile详解 #\nDockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速构建自定义的镜像。\n\n## dockerfile基本结构 ##\ndockerfile一般分为四部分:\n1. 基础镜像信息\n2. 维护者信息\n3. 镜像操作指令\n4. 容器启动时执行指令\n\n## dockerfile基本命令 ##\n1. FROM命令，选择一个基础镜像，如果有多个，可以使用多个from\n\t```\n\tFROM <image> 或 FROM <image>:<tag>\n\t```\n2. MAINTAINER命令，说明作者信息\n\t```\n\tMAINTAINER <name> <email>\n\t```\n3. RUN命令，RUN指令将在当前镜像基础上执行指定命令\n\t```\n\tRUN <command> \n\tRUN [\"executable\",\"param1\",\"param2\"] \n\t```\n4. cMD命令，指定启动容器时执行的命令，每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令\n\t```\n\t支持三种格式：\n\tCMD [\"executable\",\"param1\",\"param2\"]使用exec执行，推荐方式。\n\tCMD command param1 prarm2 在/bin/sh中执行，提供给需要交互的应用\n\tCMD [\"prarm1\",\"param2\"]提供给ENTRYPOINT的默认参数\n\t```\n5. EXPOSE命令，暴露容器端口\n\t```\n\tEXPOSE <port> <port> ...\n\t```\n6. ENV命令，指定环境变量\n\t```\n\tENV <key> <value>\n\t```\n7. ADD命令，复制宿主机文件或目录到容器中，其中src可以是Dockerfile所在目录的一个相对路径(文件或目录)，也可以是一个URL，还可以是一个tar文件\n\t```\n\tADD <src> <dest>\n\t```\n8. COPY命令，复制本地主机的src为容器中的dest，目标路径不存在时，会自动创建\n\t```\n\tCOPY <src> <dest>\n\t```\n9. ENTRYPOINT命令，配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。\n\t```\t\n\tENTRYPOINT [\"executable\",\"param1\",\"param2\"]\n\tENTRYPOING command param1 param2 (shell中执行)\n\t```\n10. VOLUME命令，创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。\n\t```\n\tVOLUME [\"/data\"]\n\t```\n11. USER命令，指定运行容器时的用户名或UID，后续的RUN也会使用指定用户\n\t```\n\tUSER daemon\n\t```\n12. WORKDIR命令，为后续的RUN、CMD、ENTRYPOINT指令配置工作目录，可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。\n\t```\n\tWORKDIR /path/to/workdir\n\t```\n13. ONBUILD命令，配置当所创建的镜像作为其他新创建镜像的基础镜像时，所执行的操作指令\n\t```\n\tONBUILD [INSTRUCTION]\n\t```\n\n# Dockerfile构建java环境镜像 #  \n## 创建Dockerfile文件 ##\n```\nmkdir /usr/file\nvi /usr/file/Dockfile #文件名必须是Dockfile\n#以下是文件内容\nfrom centos\nMAINTAINER reallinxu\n\nRUN yum install -y wget\nRUN mkdir /usr/software\nRUN mkdir /usr/jdk\nRUN wget --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" -P /usr/software http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz\nRUN tar xzf /usr/software/jdk-8u171-linux-x64.tar.gz -C /usr/jdk\nENV JAVA_HOME /usr/jdk/jdk1.8.0_171\nENV PATH $PATH:$JAVA_HOME/bin\nEXPOSE 8080\n```\n\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/javaimage:v1\" .\n```\n\n## 运行容器 ##\n```\ndocker run -i -t reallinxu/javaimage:v1 /bin/bash\n```\n\n# 构建noname镜像 #\n使用本地jdk创建，首先将jdk-8u144-linux-x64.tar.gz，放到Dockerfile同一个文件夹下\n```\n#Dockerfile文件\nfrom centos\nMAINTAINER reallinxu\n\nCOPY jdk-8u144-linux-x64.tar.gz /usr/software/jdk-8u144-linux-x64.tar.gz\nWORKDIR /usr/software\nRUN mkdir /usr/jdk\nRUN tar xzf /usr/software/jdk-8u144-linux-x64.tar.gz -C /usr/jdk\nENV JAVA_HOME /usr/jdk/jdk1.8.0_171\nENV PATH $PATH:$JAVA_HOME/bin\nEXPOSE 8080\n\ndocker build -t=\"reallinxu/noname\" .\n```","source":"_posts/Dockerfile构建java环境镜像.md","raw":"---\ntitle: \"Dockerfile构建java环境镜像\"\ntags:\n  - docker\nid: 521\ncategories:\n  - Docker\ndate: 2018-05-28 18:20:31\nauthor: \n  - linxu\n---\n\n# dockerfile详解 #\nDockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速构建自定义的镜像。\n\n## dockerfile基本结构 ##\ndockerfile一般分为四部分:\n1. 基础镜像信息\n2. 维护者信息\n3. 镜像操作指令\n4. 容器启动时执行指令\n\n## dockerfile基本命令 ##\n1. FROM命令，选择一个基础镜像，如果有多个，可以使用多个from\n\t```\n\tFROM <image> 或 FROM <image>:<tag>\n\t```\n2. MAINTAINER命令，说明作者信息\n\t```\n\tMAINTAINER <name> <email>\n\t```\n3. RUN命令，RUN指令将在当前镜像基础上执行指定命令\n\t```\n\tRUN <command> \n\tRUN [\"executable\",\"param1\",\"param2\"] \n\t```\n4. cMD命令，指定启动容器时执行的命令，每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令\n\t```\n\t支持三种格式：\n\tCMD [\"executable\",\"param1\",\"param2\"]使用exec执行，推荐方式。\n\tCMD command param1 prarm2 在/bin/sh中执行，提供给需要交互的应用\n\tCMD [\"prarm1\",\"param2\"]提供给ENTRYPOINT的默认参数\n\t```\n5. EXPOSE命令，暴露容器端口\n\t```\n\tEXPOSE <port> <port> ...\n\t```\n6. ENV命令，指定环境变量\n\t```\n\tENV <key> <value>\n\t```\n7. ADD命令，复制宿主机文件或目录到容器中，其中src可以是Dockerfile所在目录的一个相对路径(文件或目录)，也可以是一个URL，还可以是一个tar文件\n\t```\n\tADD <src> <dest>\n\t```\n8. COPY命令，复制本地主机的src为容器中的dest，目标路径不存在时，会自动创建\n\t```\n\tCOPY <src> <dest>\n\t```\n9. ENTRYPOINT命令，配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。\n\t```\t\n\tENTRYPOINT [\"executable\",\"param1\",\"param2\"]\n\tENTRYPOING command param1 param2 (shell中执行)\n\t```\n10. VOLUME命令，创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。\n\t```\n\tVOLUME [\"/data\"]\n\t```\n11. USER命令，指定运行容器时的用户名或UID，后续的RUN也会使用指定用户\n\t```\n\tUSER daemon\n\t```\n12. WORKDIR命令，为后续的RUN、CMD、ENTRYPOINT指令配置工作目录，可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。\n\t```\n\tWORKDIR /path/to/workdir\n\t```\n13. ONBUILD命令，配置当所创建的镜像作为其他新创建镜像的基础镜像时，所执行的操作指令\n\t```\n\tONBUILD [INSTRUCTION]\n\t```\n\n# Dockerfile构建java环境镜像 #  \n## 创建Dockerfile文件 ##\n```\nmkdir /usr/file\nvi /usr/file/Dockfile #文件名必须是Dockfile\n#以下是文件内容\nfrom centos\nMAINTAINER reallinxu\n\nRUN yum install -y wget\nRUN mkdir /usr/software\nRUN mkdir /usr/jdk\nRUN wget --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" -P /usr/software http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz\nRUN tar xzf /usr/software/jdk-8u171-linux-x64.tar.gz -C /usr/jdk\nENV JAVA_HOME /usr/jdk/jdk1.8.0_171\nENV PATH $PATH:$JAVA_HOME/bin\nEXPOSE 8080\n```\n\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/javaimage:v1\" .\n```\n\n## 运行容器 ##\n```\ndocker run -i -t reallinxu/javaimage:v1 /bin/bash\n```\n\n# 构建noname镜像 #\n使用本地jdk创建，首先将jdk-8u144-linux-x64.tar.gz，放到Dockerfile同一个文件夹下\n```\n#Dockerfile文件\nfrom centos\nMAINTAINER reallinxu\n\nCOPY jdk-8u144-linux-x64.tar.gz /usr/software/jdk-8u144-linux-x64.tar.gz\nWORKDIR /usr/software\nRUN mkdir /usr/jdk\nRUN tar xzf /usr/software/jdk-8u144-linux-x64.tar.gz -C /usr/jdk\nENV JAVA_HOME /usr/jdk/jdk1.8.0_171\nENV PATH $PATH:$JAVA_HOME/bin\nEXPOSE 8080\n\ndocker build -t=\"reallinxu/noname\" .\n```","slug":"Dockerfile构建java环境镜像","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7tg0003v8gpaq9hcqre","content":"<h1 id=\"dockerfile详解\"><a href=\"#dockerfile详解\" class=\"headerlink\" title=\"dockerfile详解\"></a>dockerfile详解</h1><p>Dockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速构建自定义的镜像。</p>\n<h2 id=\"dockerfile基本结构\"><a href=\"#dockerfile基本结构\" class=\"headerlink\" title=\"dockerfile基本结构\"></a>dockerfile基本结构</h2><p>dockerfile一般分为四部分:</p>\n<ol>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作指令</li>\n<li>容器启动时执行指令</li>\n</ol>\n<h2 id=\"dockerfile基本命令\"><a href=\"#dockerfile基本命令\" class=\"headerlink\" title=\"dockerfile基本命令\"></a>dockerfile基本命令</h2><ol>\n<li>FROM命令，选择一个基础镜像，如果有多个，可以使用多个from <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM &lt;image&gt; 或 FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure></li>\n<li>MAINTAINER命令，说明作者信息 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAINTAINER &lt;name&gt; &lt;email&gt;</span><br></pre></td></tr></table></figure></li>\n<li>RUN命令，RUN指令将在当前镜像基础上执行指定命令 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN &lt;command&gt; </span><br><span class=\"line\">RUN [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br></pre></td></tr></table></figure></li>\n<li>cMD命令，指定启动容器时执行的命令，每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">支持三种格式：</span><br><span class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]使用exec执行，推荐方式。</span><br><span class=\"line\">CMD command param1 prarm2 在&#x2F;bin&#x2F;sh中执行，提供给需要交互的应用</span><br><span class=\"line\">CMD [&quot;prarm1&quot;,&quot;param2&quot;]提供给ENTRYPOINT的默认参数</span><br></pre></td></tr></table></figure></li>\n<li>EXPOSE命令，暴露容器端口 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;port&gt; &lt;port&gt; ...</span><br></pre></td></tr></table></figure></li>\n<li>ENV命令，指定环境变量 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li>\n<li>ADD命令，复制宿主机文件或目录到容器中，其中src可以是Dockerfile所在目录的一个相对路径(文件或目录)，也可以是一个URL，还可以是一个tar文件 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure></li>\n<li>COPY命令，复制本地主机的src为容器中的dest，目标路径不存在时，会自动创建 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure></li>\n<li>ENTRYPOINT命令，配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class=\"line\">ENTRYPOING command param1 param2 (shell中执行)</span><br></pre></td></tr></table></figure></li>\n<li>VOLUME命令，创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOLUME [&quot;&#x2F;data&quot;]</span><br></pre></td></tr></table></figure></li>\n<li>USER命令，指定运行容器时的用户名或UID，后续的RUN也会使用指定用户<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER daemon</span><br></pre></td></tr></table></figure></li>\n<li>WORKDIR命令，为后续的RUN、CMD、ENTRYPOINT指令配置工作目录，可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR &#x2F;path&#x2F;to&#x2F;workdir</span><br></pre></td></tr></table></figure></li>\n<li>ONBUILD命令，配置当所创建的镜像作为其他新创建镜像的基础镜像时，所执行的操作指令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"Dockerfile构建java环境镜像\"><a href=\"#Dockerfile构建java环境镜像\" class=\"headerlink\" title=\"Dockerfile构建java环境镜像\"></a>Dockerfile构建java环境镜像</h1><h2 id=\"创建Dockerfile文件\"><a href=\"#创建Dockerfile文件\" class=\"headerlink\" title=\"创建Dockerfile文件\"></a>创建Dockerfile文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;usr&#x2F;file</span><br><span class=\"line\">vi &#x2F;usr&#x2F;file&#x2F;Dockfile #文件名必须是Dockfile</span><br><span class=\"line\">#以下是文件内容</span><br><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">RUN yum install -y wget</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;software</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;jdk</span><br><span class=\"line\">RUN wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense&#x3D;accept-securebackup-cookie&quot; -P &#x2F;usr&#x2F;software http:&#x2F;&#x2F;download.oracle.com&#x2F;otn-pub&#x2F;java&#x2F;jdk&#x2F;8u171-b11&#x2F;512cd62ec5174c3487ac17c61aaa89e8&#x2F;jdk-8u171-linux-x64.tar.gz</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;jdk-8u171-linux-x64.tar.gz -C &#x2F;usr&#x2F;jdk</span><br><span class=\"line\">ENV JAVA_HOME &#x2F;usr&#x2F;jdk&#x2F;jdk1.8.0_171</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME&#x2F;bin</span><br><span class=\"line\">EXPOSE 8080</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t&#x3D;&quot;reallinxu&#x2F;javaimage:v1&quot; .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t reallinxu&#x2F;javaimage:v1 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"构建noname镜像\"><a href=\"#构建noname镜像\" class=\"headerlink\" title=\"构建noname镜像\"></a>构建noname镜像</h1><p>使用本地jdk创建，首先将jdk-8u144-linux-x64.tar.gz，放到Dockerfile同一个文件夹下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Dockerfile文件</span><br><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">COPY jdk-8u144-linux-x64.tar.gz &#x2F;usr&#x2F;software&#x2F;jdk-8u144-linux-x64.tar.gz</span><br><span class=\"line\">WORKDIR &#x2F;usr&#x2F;software</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;jdk</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;jdk-8u144-linux-x64.tar.gz -C &#x2F;usr&#x2F;jdk</span><br><span class=\"line\">ENV JAVA_HOME &#x2F;usr&#x2F;jdk&#x2F;jdk1.8.0_171</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME&#x2F;bin</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t&#x3D;&quot;reallinxu&#x2F;noname&quot; .</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dockerfile详解\"><a href=\"#dockerfile详解\" class=\"headerlink\" title=\"dockerfile详解\"></a>dockerfile详解</h1><p>Dockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速构建自定义的镜像。</p>\n<h2 id=\"dockerfile基本结构\"><a href=\"#dockerfile基本结构\" class=\"headerlink\" title=\"dockerfile基本结构\"></a>dockerfile基本结构</h2><p>dockerfile一般分为四部分:</p>\n<ol>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作指令</li>\n<li>容器启动时执行指令</li>\n</ol>\n<h2 id=\"dockerfile基本命令\"><a href=\"#dockerfile基本命令\" class=\"headerlink\" title=\"dockerfile基本命令\"></a>dockerfile基本命令</h2><ol>\n<li>FROM命令，选择一个基础镜像，如果有多个，可以使用多个from <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM &lt;image&gt; 或 FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure></li>\n<li>MAINTAINER命令，说明作者信息 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAINTAINER &lt;name&gt; &lt;email&gt;</span><br></pre></td></tr></table></figure></li>\n<li>RUN命令，RUN指令将在当前镜像基础上执行指定命令 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN &lt;command&gt; </span><br><span class=\"line\">RUN [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br></pre></td></tr></table></figure></li>\n<li>cMD命令，指定启动容器时执行的命令，每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">支持三种格式：</span><br><span class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]使用exec执行，推荐方式。</span><br><span class=\"line\">CMD command param1 prarm2 在&#x2F;bin&#x2F;sh中执行，提供给需要交互的应用</span><br><span class=\"line\">CMD [&quot;prarm1&quot;,&quot;param2&quot;]提供给ENTRYPOINT的默认参数</span><br></pre></td></tr></table></figure></li>\n<li>EXPOSE命令，暴露容器端口 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;port&gt; &lt;port&gt; ...</span><br></pre></td></tr></table></figure></li>\n<li>ENV命令，指定环境变量 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li>\n<li>ADD命令，复制宿主机文件或目录到容器中，其中src可以是Dockerfile所在目录的一个相对路径(文件或目录)，也可以是一个URL，还可以是一个tar文件 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure></li>\n<li>COPY命令，复制本地主机的src为容器中的dest，目标路径不存在时，会自动创建 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure></li>\n<li>ENTRYPOINT命令，配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class=\"line\">ENTRYPOING command param1 param2 (shell中执行)</span><br></pre></td></tr></table></figure></li>\n<li>VOLUME命令，创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOLUME [&quot;&#x2F;data&quot;]</span><br></pre></td></tr></table></figure></li>\n<li>USER命令，指定运行容器时的用户名或UID，后续的RUN也会使用指定用户<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER daemon</span><br></pre></td></tr></table></figure></li>\n<li>WORKDIR命令，为后续的RUN、CMD、ENTRYPOINT指令配置工作目录，可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR &#x2F;path&#x2F;to&#x2F;workdir</span><br></pre></td></tr></table></figure></li>\n<li>ONBUILD命令，配置当所创建的镜像作为其他新创建镜像的基础镜像时，所执行的操作指令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"Dockerfile构建java环境镜像\"><a href=\"#Dockerfile构建java环境镜像\" class=\"headerlink\" title=\"Dockerfile构建java环境镜像\"></a>Dockerfile构建java环境镜像</h1><h2 id=\"创建Dockerfile文件\"><a href=\"#创建Dockerfile文件\" class=\"headerlink\" title=\"创建Dockerfile文件\"></a>创建Dockerfile文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;usr&#x2F;file</span><br><span class=\"line\">vi &#x2F;usr&#x2F;file&#x2F;Dockfile #文件名必须是Dockfile</span><br><span class=\"line\">#以下是文件内容</span><br><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">RUN yum install -y wget</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;software</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;jdk</span><br><span class=\"line\">RUN wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense&#x3D;accept-securebackup-cookie&quot; -P &#x2F;usr&#x2F;software http:&#x2F;&#x2F;download.oracle.com&#x2F;otn-pub&#x2F;java&#x2F;jdk&#x2F;8u171-b11&#x2F;512cd62ec5174c3487ac17c61aaa89e8&#x2F;jdk-8u171-linux-x64.tar.gz</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;jdk-8u171-linux-x64.tar.gz -C &#x2F;usr&#x2F;jdk</span><br><span class=\"line\">ENV JAVA_HOME &#x2F;usr&#x2F;jdk&#x2F;jdk1.8.0_171</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME&#x2F;bin</span><br><span class=\"line\">EXPOSE 8080</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t&#x3D;&quot;reallinxu&#x2F;javaimage:v1&quot; .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t reallinxu&#x2F;javaimage:v1 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"构建noname镜像\"><a href=\"#构建noname镜像\" class=\"headerlink\" title=\"构建noname镜像\"></a>构建noname镜像</h1><p>使用本地jdk创建，首先将jdk-8u144-linux-x64.tar.gz，放到Dockerfile同一个文件夹下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Dockerfile文件</span><br><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">COPY jdk-8u144-linux-x64.tar.gz &#x2F;usr&#x2F;software&#x2F;jdk-8u144-linux-x64.tar.gz</span><br><span class=\"line\">WORKDIR &#x2F;usr&#x2F;software</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;jdk</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;jdk-8u144-linux-x64.tar.gz -C &#x2F;usr&#x2F;jdk</span><br><span class=\"line\">ENV JAVA_HOME &#x2F;usr&#x2F;jdk&#x2F;jdk1.8.0_171</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME&#x2F;bin</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t&#x3D;&quot;reallinxu&#x2F;noname&quot; .</span><br></pre></td></tr></table></figure>"},{"title":"Docker容器中搭建rabbitmq集群","id":"522","date":"2018-05-29T10:00:00.000Z","author":["linxu"],"_content":"# RabbitMq简介 #\n>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\nRabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。使用Rabbitmq可以使程序间不再需要彼此调用，只需要将消息放入消息队列中，通过对队列的监听，对消息进行对应处理，而且消息队列在当消息接收方服务忙或不可用时，提供了一个消息暂存的功能，等服务可用时，继续对消息进行处理。\n\n# RabbitMq几个基本概念 #\n1. Connection、Channel\n\tConnection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。Channel是可以定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等的最重要的一个接口。\n2. Queue\n\tQueue（队列）是RabbitMQ的内部对象，生产者将消息投递到queue中，消费者从queue中获取消息。多个消费者可以订阅同一个queue，这时queue的消息会均摊给多个消费者。\n3. Message acknowledgment\n\t消费者收到queue消息后，为了避免没有处理完成就宕机导致消息丢失，在消费者完成后会发送一个回执给rabbitmq，rabbit收到消息回执(ack)才会移除消息,如果rabbitmq检测到消费者已断开但是仍未收到回执，则会将消息发送给其他消费者。\n4. Message durability\n\t如果需要在rabbitmq重启时也不丢失消息，可以将queue和message设置为可持久化的。这种情况可能存在还没有持久化rabbitmq就停的小概率事件，这就需要rabbitmq的事务。\n5. Prefetch count\n\t设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息，消费者处理完这条消息后Queue会再给该消费者发送一条消息。\n6. Exchange\n\t生产者通过Exchange将消息投入queue中，由Exchange将消息路由到一个或多个Queue中(或者丢弃)。\n7. routing key\n\t生产者可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。\n8. Binding\n\tRabbitMQ中通过Binding将Exchange与Queue关联起来。\n9. Binding key\n\tbinding key与routing key相匹配时，消息将会被路由到对应的Queue中。\n10. Exchange Types\n\tfanout：所有发送到该Exchange的消息路由到所有与它绑定的Queue中。\n\tdirect：消息路由到那些binding key与routing key完全匹配的Queue中。\n\ttopic：topic与direct相似，可以使用*与#做模糊匹配，*匹配一个单词，#匹配多个单词（可以是零个）\n\theaders：不依赖于key的规则，而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对，当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对。\n11. RPC\n\t客户端发送请求消息时，在消息的属性（MessageProperties）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）。\n\n# Docker容器搭建rabbitmq集群 #\n## Dockerfile文件 ##\n将rabbitmq-signing-key-public.asc，rabbitmq-server-3.3.5-1.noarch.rpm放入Dockerfile同目录\n```\nfrom centos\nMAINTAINER reallinxu\n\nRUN rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\nRUN yum install -y erlang\nCOPY rabbitmq-signing-key-public.asc /usr/software/rabbitmq-signing-key-public.asc\nCOPY rabbitmq-server-3.3.5-1.noarch.rpm /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm\nRUN rpm --import /usr/software/rabbitmq-signing-key-public.asc\nRUN rpm -ivh /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm  --force --nodeps\nRUN rabbitmq-plugins enable rabbitmq_management\nRUN chkconfig --level 3 rabbitmq-server on\nRUN sed -i 's/PID_FILE=\\/var\\/run\\/rabbitmq\\/pid/&\\nexport RABBITMQ_MNESIA=\\/rabbitmq\\/mnesia/' /etc/init.d/rabbitmq-server\nRUN chmod 644 /etc/rabbitmq/enabled_plugins\nRUN rm -rf /usr/software/rabbitmq-signing-key-public.asc\nRUN rm -rf /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm\nEXPOSE 8080 15672 5672\n```\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/rabbit:v1\" .\n```\n## 创建容器 ##\n### 创建第一个容器 ###\n```\ndocker run -p 15672:15672 -i -t --name rabbit1 reallinxu/rabbit:1 \n#查看hosts\ncat /etc/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      c0543dbe04fe\n```\n\n### 创建后续容器 ###\n因为要搭建集群，后面的hosts文件需要配置第一台的配置，这时候我们使用-v进行挂载容器，将/etc/hosts指定使用宿主机的/user/hosts文件。\n```\n#/user/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      c0543dbe04fe\n```\n创建容器\n```\ndocker run -i -t -p 15670:15672 --name rabbit2 -v /user/hosts:/etc/hosts reallinxu/rabbit:1 \n```\n\n### 实现集群 ###\n第一个容器中启动rabbitmq\n```\nrabbitmq-server -detached # -detached后台运行\nrabbitmqctl add_user admin admin\nrabbitmqctl set_user_tags admin administrator\n```\n将/var/lib/rabbitmq的.erlang.cookie文件拷贝到宿主机中\n```\nsudo docker cp c0543dbe04fe:/var/lib/rabbitmq /user\n```\n将第一个容器中/root下cookie覆盖\n```\ndocker cp /user/rabbitmq/.erlang.cookie c0543dbe04fe:/root\n```\n将宿主机的cookie文件覆盖到其他容器中：\n```\ndocker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/root\ndocker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/var/lib/rabbitmq\n```\n更改.erlang.cookie的访问权限为400\n```\nchmod 400 /var/lib/rabbitmq/.erlang.cookie\n```\n更改.erlang.cookie的文件所有人为rabbitmq\n```\nchown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n```\n启动后续容器并做如下操作：\n```\nrabbitmq-server -detached\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@c0543dbe04fe\nrabbitmqctl start_app\n```\n查看rabbitmq后台界面，可以发现集群搭建成功。不过因为直接挂载，导致容器自身映射端口并没有生效，所以在后面需要将自己的hosts配置进去，在hosts文件后面追加下面语句\n```\n172.17.0.3\t780f23c07ef7\n```\n容器ID请按照自己创建容器ID来替换。\n\n# 小知识 #\n## sed命令 ##\nsed -i 's/指定的字符/要插入的字符&/'  文件  #前插\nsed -i 's/指定的字符/&要插入的字符/'  文件  #后插\nsed 's/原字符串/替换字符串/' 文件\t\t\t#替换\nsed 's/原字符串/替换字符串/g' 文件\t\t\t#替换所有\n\\n 换行符  \\转义\n\n## 查看容器端口映射 ##\ndocker port <NAME>\n\n## 失败解决 ##\n安装rpm包如果出现“Exiting on user Command”的错误，请在yum命令后加上“-y”选项\n\n## systemctl ##\n不可以使用，尽量避免，网上说可以CMD或者entrypoint设置为/usr/sbin/init，但是创建容器时一直没有反应，所以放弃了","source":"_posts/Docker容器中搭建rabbitmq集群.md","raw":"---\ntitle: \"Docker容器中搭建rabbitmq集群\"\ntags:\n  - docker\nid: 522\ncategories:\n  - Docker\ndate: 2018-05-29 18:00:00\nauthor: \n  - linxu\n---\n# RabbitMq简介 #\n>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\nRabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。使用Rabbitmq可以使程序间不再需要彼此调用，只需要将消息放入消息队列中，通过对队列的监听，对消息进行对应处理，而且消息队列在当消息接收方服务忙或不可用时，提供了一个消息暂存的功能，等服务可用时，继续对消息进行处理。\n\n# RabbitMq几个基本概念 #\n1. Connection、Channel\n\tConnection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。Channel是可以定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等的最重要的一个接口。\n2. Queue\n\tQueue（队列）是RabbitMQ的内部对象，生产者将消息投递到queue中，消费者从queue中获取消息。多个消费者可以订阅同一个queue，这时queue的消息会均摊给多个消费者。\n3. Message acknowledgment\n\t消费者收到queue消息后，为了避免没有处理完成就宕机导致消息丢失，在消费者完成后会发送一个回执给rabbitmq，rabbit收到消息回执(ack)才会移除消息,如果rabbitmq检测到消费者已断开但是仍未收到回执，则会将消息发送给其他消费者。\n4. Message durability\n\t如果需要在rabbitmq重启时也不丢失消息，可以将queue和message设置为可持久化的。这种情况可能存在还没有持久化rabbitmq就停的小概率事件，这就需要rabbitmq的事务。\n5. Prefetch count\n\t设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息，消费者处理完这条消息后Queue会再给该消费者发送一条消息。\n6. Exchange\n\t生产者通过Exchange将消息投入queue中，由Exchange将消息路由到一个或多个Queue中(或者丢弃)。\n7. routing key\n\t生产者可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。\n8. Binding\n\tRabbitMQ中通过Binding将Exchange与Queue关联起来。\n9. Binding key\n\tbinding key与routing key相匹配时，消息将会被路由到对应的Queue中。\n10. Exchange Types\n\tfanout：所有发送到该Exchange的消息路由到所有与它绑定的Queue中。\n\tdirect：消息路由到那些binding key与routing key完全匹配的Queue中。\n\ttopic：topic与direct相似，可以使用*与#做模糊匹配，*匹配一个单词，#匹配多个单词（可以是零个）\n\theaders：不依赖于key的规则，而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对，当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对。\n11. RPC\n\t客户端发送请求消息时，在消息的属性（MessageProperties）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）。\n\n# Docker容器搭建rabbitmq集群 #\n## Dockerfile文件 ##\n将rabbitmq-signing-key-public.asc，rabbitmq-server-3.3.5-1.noarch.rpm放入Dockerfile同目录\n```\nfrom centos\nMAINTAINER reallinxu\n\nRUN rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\nRUN yum install -y erlang\nCOPY rabbitmq-signing-key-public.asc /usr/software/rabbitmq-signing-key-public.asc\nCOPY rabbitmq-server-3.3.5-1.noarch.rpm /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm\nRUN rpm --import /usr/software/rabbitmq-signing-key-public.asc\nRUN rpm -ivh /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm  --force --nodeps\nRUN rabbitmq-plugins enable rabbitmq_management\nRUN chkconfig --level 3 rabbitmq-server on\nRUN sed -i 's/PID_FILE=\\/var\\/run\\/rabbitmq\\/pid/&\\nexport RABBITMQ_MNESIA=\\/rabbitmq\\/mnesia/' /etc/init.d/rabbitmq-server\nRUN chmod 644 /etc/rabbitmq/enabled_plugins\nRUN rm -rf /usr/software/rabbitmq-signing-key-public.asc\nRUN rm -rf /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm\nEXPOSE 8080 15672 5672\n```\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/rabbit:v1\" .\n```\n## 创建容器 ##\n### 创建第一个容器 ###\n```\ndocker run -p 15672:15672 -i -t --name rabbit1 reallinxu/rabbit:1 \n#查看hosts\ncat /etc/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      c0543dbe04fe\n```\n\n### 创建后续容器 ###\n因为要搭建集群，后面的hosts文件需要配置第一台的配置，这时候我们使用-v进行挂载容器，将/etc/hosts指定使用宿主机的/user/hosts文件。\n```\n#/user/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      c0543dbe04fe\n```\n创建容器\n```\ndocker run -i -t -p 15670:15672 --name rabbit2 -v /user/hosts:/etc/hosts reallinxu/rabbit:1 \n```\n\n### 实现集群 ###\n第一个容器中启动rabbitmq\n```\nrabbitmq-server -detached # -detached后台运行\nrabbitmqctl add_user admin admin\nrabbitmqctl set_user_tags admin administrator\n```\n将/var/lib/rabbitmq的.erlang.cookie文件拷贝到宿主机中\n```\nsudo docker cp c0543dbe04fe:/var/lib/rabbitmq /user\n```\n将第一个容器中/root下cookie覆盖\n```\ndocker cp /user/rabbitmq/.erlang.cookie c0543dbe04fe:/root\n```\n将宿主机的cookie文件覆盖到其他容器中：\n```\ndocker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/root\ndocker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/var/lib/rabbitmq\n```\n更改.erlang.cookie的访问权限为400\n```\nchmod 400 /var/lib/rabbitmq/.erlang.cookie\n```\n更改.erlang.cookie的文件所有人为rabbitmq\n```\nchown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n```\n启动后续容器并做如下操作：\n```\nrabbitmq-server -detached\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@c0543dbe04fe\nrabbitmqctl start_app\n```\n查看rabbitmq后台界面，可以发现集群搭建成功。不过因为直接挂载，导致容器自身映射端口并没有生效，所以在后面需要将自己的hosts配置进去，在hosts文件后面追加下面语句\n```\n172.17.0.3\t780f23c07ef7\n```\n容器ID请按照自己创建容器ID来替换。\n\n# 小知识 #\n## sed命令 ##\nsed -i 's/指定的字符/要插入的字符&/'  文件  #前插\nsed -i 's/指定的字符/&要插入的字符/'  文件  #后插\nsed 's/原字符串/替换字符串/' 文件\t\t\t#替换\nsed 's/原字符串/替换字符串/g' 文件\t\t\t#替换所有\n\\n 换行符  \\转义\n\n## 查看容器端口映射 ##\ndocker port <NAME>\n\n## 失败解决 ##\n安装rpm包如果出现“Exiting on user Command”的错误，请在yum命令后加上“-y”选项\n\n## systemctl ##\n不可以使用，尽量避免，网上说可以CMD或者entrypoint设置为/usr/sbin/init，但是创建容器时一直没有反应，所以放弃了","slug":"Docker容器中搭建rabbitmq集群","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7tq0007v8gph4cphgyw","content":"<h1 id=\"RabbitMq简介\"><a href=\"#RabbitMq简介\" class=\"headerlink\" title=\"RabbitMq简介\"></a>RabbitMq简介</h1><blockquote>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n</blockquote>\n<p>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。使用Rabbitmq可以使程序间不再需要彼此调用，只需要将消息放入消息队列中，通过对队列的监听，对消息进行对应处理，而且消息队列在当消息接收方服务忙或不可用时，提供了一个消息暂存的功能，等服务可用时，继续对消息进行处理。</p>\n<h1 id=\"RabbitMq几个基本概念\"><a href=\"#RabbitMq几个基本概念\" class=\"headerlink\" title=\"RabbitMq几个基本概念\"></a>RabbitMq几个基本概念</h1><ol>\n<li>Connection、Channel<br> Connection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。Channel是可以定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等的最重要的一个接口。</li>\n<li>Queue<br> Queue（队列）是RabbitMQ的内部对象，生产者将消息投递到queue中，消费者从queue中获取消息。多个消费者可以订阅同一个queue，这时queue的消息会均摊给多个消费者。</li>\n<li>Message acknowledgment<br> 消费者收到queue消息后，为了避免没有处理完成就宕机导致消息丢失，在消费者完成后会发送一个回执给rabbitmq，rabbit收到消息回执(ack)才会移除消息,如果rabbitmq检测到消费者已断开但是仍未收到回执，则会将消息发送给其他消费者。</li>\n<li>Message durability<br> 如果需要在rabbitmq重启时也不丢失消息，可以将queue和message设置为可持久化的。这种情况可能存在还没有持久化rabbitmq就停的小概率事件，这就需要rabbitmq的事务。</li>\n<li>Prefetch count<br> 设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息，消费者处理完这条消息后Queue会再给该消费者发送一条消息。</li>\n<li>Exchange<br> 生产者通过Exchange将消息投入queue中，由Exchange将消息路由到一个或多个Queue中(或者丢弃)。</li>\n<li>routing key<br> 生产者可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。</li>\n<li>Binding<br> RabbitMQ中通过Binding将Exchange与Queue关联起来。</li>\n<li>Binding key<br> binding key与routing key相匹配时，消息将会被路由到对应的Queue中。</li>\n<li>Exchange Types<br>fanout：所有发送到该Exchange的消息路由到所有与它绑定的Queue中。<br>direct：消息路由到那些binding key与routing key完全匹配的Queue中。<br>topic：topic与direct相似，可以使用<em>与#做模糊匹配，</em>匹配一个单词，#匹配多个单词（可以是零个）<br>headers：不依赖于key的规则，而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对，当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对。</li>\n<li>RPC<br>客户端发送请求消息时，在消息的属性（MessageProperties）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）。</li>\n</ol>\n<h1 id=\"Docker容器搭建rabbitmq集群\"><a href=\"#Docker容器搭建rabbitmq集群\" class=\"headerlink\" title=\"Docker容器搭建rabbitmq集群\"></a>Docker容器搭建rabbitmq集群</h1><h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><p>将rabbitmq-signing-key-public.asc，rabbitmq-server-3.3.5-1.noarch.rpm放入Dockerfile同目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rpm -ivh http:&#x2F;&#x2F;download.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;i386&#x2F;epel-release-6-8.noarch.rpm</span><br><span class=\"line\">RUN yum install -y erlang</span><br><span class=\"line\">COPY rabbitmq-signing-key-public.asc &#x2F;usr&#x2F;software&#x2F;rabbitmq-signing-key-public.asc</span><br><span class=\"line\">COPY rabbitmq-server-3.3.5-1.noarch.rpm &#x2F;usr&#x2F;software&#x2F;rabbitmq-server-3.3.5-1.noarch.rpm</span><br><span class=\"line\">RUN rpm --import &#x2F;usr&#x2F;software&#x2F;rabbitmq-signing-key-public.asc</span><br><span class=\"line\">RUN rpm -ivh &#x2F;usr&#x2F;software&#x2F;rabbitmq-server-3.3.5-1.noarch.rpm  --force --nodeps</span><br><span class=\"line\">RUN rabbitmq-plugins enable rabbitmq_management</span><br><span class=\"line\">RUN chkconfig --level 3 rabbitmq-server on</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;PID_FILE&#x3D;\\&#x2F;var\\&#x2F;run\\&#x2F;rabbitmq\\&#x2F;pid&#x2F;&amp;\\nexport RABBITMQ_MNESIA&#x3D;\\&#x2F;rabbitmq\\&#x2F;mnesia&#x2F;&#39; &#x2F;etc&#x2F;init.d&#x2F;rabbitmq-server</span><br><span class=\"line\">RUN chmod 644 &#x2F;etc&#x2F;rabbitmq&#x2F;enabled_plugins</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;rabbitmq-signing-key-public.asc</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;rabbitmq-server-3.3.5-1.noarch.rpm</span><br><span class=\"line\">EXPOSE 8080 15672 5672</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t&#x3D;&quot;reallinxu&#x2F;rabbit:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><h3 id=\"创建第一个容器\"><a href=\"#创建第一个容器\" class=\"headerlink\" title=\"创建第一个容器\"></a>创建第一个容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 15672:15672 -i -t --name rabbit1 reallinxu&#x2F;rabbit:1 </span><br><span class=\"line\">#查看hosts</span><br><span class=\"line\">cat &#x2F;etc&#x2F;hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.3      c0543dbe04fe</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建后续容器\"><a href=\"#创建后续容器\" class=\"headerlink\" title=\"创建后续容器\"></a>创建后续容器</h3><p>因为要搭建集群，后面的hosts文件需要配置第一台的配置，这时候我们使用-v进行挂载容器，将/etc/hosts指定使用宿主机的/user/hosts文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#&#x2F;user&#x2F;hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.3      c0543dbe04fe</span><br></pre></td></tr></table></figure>\n<p>创建容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -p 15670:15672 --name rabbit2 -v &#x2F;user&#x2F;hosts:&#x2F;etc&#x2F;hosts reallinxu&#x2F;rabbit:1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现集群\"><a href=\"#实现集群\" class=\"headerlink\" title=\"实现集群\"></a>实现集群</h3><p>第一个容器中启动rabbitmq</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached # -detached后台运行</span><br><span class=\"line\">rabbitmqctl add_user admin admin</span><br><span class=\"line\">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure>\n<p>将/var/lib/rabbitmq的.erlang.cookie文件拷贝到宿主机中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp c0543dbe04fe:&#x2F;var&#x2F;lib&#x2F;rabbitmq &#x2F;user</span><br></pre></td></tr></table></figure>\n<p>将第一个容器中/root下cookie覆盖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp &#x2F;user&#x2F;rabbitmq&#x2F;.erlang.cookie c0543dbe04fe:&#x2F;root</span><br></pre></td></tr></table></figure>\n<p>将宿主机的cookie文件覆盖到其他容器中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp &#x2F;user&#x2F;rabbitmq&#x2F;.erlang.cookie 780f23c07ef7:&#x2F;root</span><br><span class=\"line\">docker cp &#x2F;user&#x2F;rabbitmq&#x2F;.erlang.cookie 780f23c07ef7:&#x2F;var&#x2F;lib&#x2F;rabbitmq</span><br></pre></td></tr></table></figure>\n<p>更改.erlang.cookie的访问权限为400</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 400 &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie</span><br></pre></td></tr></table></figure>\n<p>更改.erlang.cookie的文件所有人为rabbitmq</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown rabbitmq:rabbitmq &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie</span><br></pre></td></tr></table></figure>\n<p>启动后续容器并做如下操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached</span><br><span class=\"line\">rabbitmqctl stop_app</span><br><span class=\"line\">rabbitmqctl join_cluster rabbit@c0543dbe04fe</span><br><span class=\"line\">rabbitmqctl start_app</span><br></pre></td></tr></table></figure>\n<p>查看rabbitmq后台界面，可以发现集群搭建成功。不过因为直接挂载，导致容器自身映射端口并没有生效，所以在后面需要将自己的hosts配置进去，在hosts文件后面追加下面语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">172.17.0.3\t780f23c07ef7</span><br></pre></td></tr></table></figure>\n<p>容器ID请按照自己创建容器ID来替换。</p>\n<h1 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\"小知识\"></a>小知识</h1><h2 id=\"sed命令\"><a href=\"#sed命令\" class=\"headerlink\" title=\"sed命令\"></a>sed命令</h2><p>sed -i ‘s/指定的字符/要插入的字符&amp;/‘  文件  #前插<br>sed -i ‘s/指定的字符/&amp;要插入的字符/‘  文件  #后插<br>sed ‘s/原字符串/替换字符串/‘ 文件            #替换<br>sed ‘s/原字符串/替换字符串/g’ 文件            #替换所有<br>\\n 换行符  \\转义</p>\n<h2 id=\"查看容器端口映射\"><a href=\"#查看容器端口映射\" class=\"headerlink\" title=\"查看容器端口映射\"></a>查看容器端口映射</h2><p>docker port <NAME></p>\n<h2 id=\"失败解决\"><a href=\"#失败解决\" class=\"headerlink\" title=\"失败解决\"></a>失败解决</h2><p>安装rpm包如果出现“Exiting on user Command”的错误，请在yum命令后加上“-y”选项</p>\n<h2 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h2><p>不可以使用，尽量避免，网上说可以CMD或者entrypoint设置为/usr/sbin/init，但是创建容器时一直没有反应，所以放弃了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RabbitMq简介\"><a href=\"#RabbitMq简介\" class=\"headerlink\" title=\"RabbitMq简介\"></a>RabbitMq简介</h1><blockquote>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n</blockquote>\n<p>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。使用Rabbitmq可以使程序间不再需要彼此调用，只需要将消息放入消息队列中，通过对队列的监听，对消息进行对应处理，而且消息队列在当消息接收方服务忙或不可用时，提供了一个消息暂存的功能，等服务可用时，继续对消息进行处理。</p>\n<h1 id=\"RabbitMq几个基本概念\"><a href=\"#RabbitMq几个基本概念\" class=\"headerlink\" title=\"RabbitMq几个基本概念\"></a>RabbitMq几个基本概念</h1><ol>\n<li>Connection、Channel<br> Connection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。Channel是可以定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等的最重要的一个接口。</li>\n<li>Queue<br> Queue（队列）是RabbitMQ的内部对象，生产者将消息投递到queue中，消费者从queue中获取消息。多个消费者可以订阅同一个queue，这时queue的消息会均摊给多个消费者。</li>\n<li>Message acknowledgment<br> 消费者收到queue消息后，为了避免没有处理完成就宕机导致消息丢失，在消费者完成后会发送一个回执给rabbitmq，rabbit收到消息回执(ack)才会移除消息,如果rabbitmq检测到消费者已断开但是仍未收到回执，则会将消息发送给其他消费者。</li>\n<li>Message durability<br> 如果需要在rabbitmq重启时也不丢失消息，可以将queue和message设置为可持久化的。这种情况可能存在还没有持久化rabbitmq就停的小概率事件，这就需要rabbitmq的事务。</li>\n<li>Prefetch count<br> 设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息，消费者处理完这条消息后Queue会再给该消费者发送一条消息。</li>\n<li>Exchange<br> 生产者通过Exchange将消息投入queue中，由Exchange将消息路由到一个或多个Queue中(或者丢弃)。</li>\n<li>routing key<br> 生产者可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。</li>\n<li>Binding<br> RabbitMQ中通过Binding将Exchange与Queue关联起来。</li>\n<li>Binding key<br> binding key与routing key相匹配时，消息将会被路由到对应的Queue中。</li>\n<li>Exchange Types<br>fanout：所有发送到该Exchange的消息路由到所有与它绑定的Queue中。<br>direct：消息路由到那些binding key与routing key完全匹配的Queue中。<br>topic：topic与direct相似，可以使用<em>与#做模糊匹配，</em>匹配一个单词，#匹配多个单词（可以是零个）<br>headers：不依赖于key的规则，而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对，当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对。</li>\n<li>RPC<br>客户端发送请求消息时，在消息的属性（MessageProperties）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）。</li>\n</ol>\n<h1 id=\"Docker容器搭建rabbitmq集群\"><a href=\"#Docker容器搭建rabbitmq集群\" class=\"headerlink\" title=\"Docker容器搭建rabbitmq集群\"></a>Docker容器搭建rabbitmq集群</h1><h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><p>将rabbitmq-signing-key-public.asc，rabbitmq-server-3.3.5-1.noarch.rpm放入Dockerfile同目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rpm -ivh http:&#x2F;&#x2F;download.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;i386&#x2F;epel-release-6-8.noarch.rpm</span><br><span class=\"line\">RUN yum install -y erlang</span><br><span class=\"line\">COPY rabbitmq-signing-key-public.asc &#x2F;usr&#x2F;software&#x2F;rabbitmq-signing-key-public.asc</span><br><span class=\"line\">COPY rabbitmq-server-3.3.5-1.noarch.rpm &#x2F;usr&#x2F;software&#x2F;rabbitmq-server-3.3.5-1.noarch.rpm</span><br><span class=\"line\">RUN rpm --import &#x2F;usr&#x2F;software&#x2F;rabbitmq-signing-key-public.asc</span><br><span class=\"line\">RUN rpm -ivh &#x2F;usr&#x2F;software&#x2F;rabbitmq-server-3.3.5-1.noarch.rpm  --force --nodeps</span><br><span class=\"line\">RUN rabbitmq-plugins enable rabbitmq_management</span><br><span class=\"line\">RUN chkconfig --level 3 rabbitmq-server on</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;PID_FILE&#x3D;\\&#x2F;var\\&#x2F;run\\&#x2F;rabbitmq\\&#x2F;pid&#x2F;&amp;\\nexport RABBITMQ_MNESIA&#x3D;\\&#x2F;rabbitmq\\&#x2F;mnesia&#x2F;&#39; &#x2F;etc&#x2F;init.d&#x2F;rabbitmq-server</span><br><span class=\"line\">RUN chmod 644 &#x2F;etc&#x2F;rabbitmq&#x2F;enabled_plugins</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;rabbitmq-signing-key-public.asc</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;rabbitmq-server-3.3.5-1.noarch.rpm</span><br><span class=\"line\">EXPOSE 8080 15672 5672</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t&#x3D;&quot;reallinxu&#x2F;rabbit:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><h3 id=\"创建第一个容器\"><a href=\"#创建第一个容器\" class=\"headerlink\" title=\"创建第一个容器\"></a>创建第一个容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 15672:15672 -i -t --name rabbit1 reallinxu&#x2F;rabbit:1 </span><br><span class=\"line\">#查看hosts</span><br><span class=\"line\">cat &#x2F;etc&#x2F;hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.3      c0543dbe04fe</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建后续容器\"><a href=\"#创建后续容器\" class=\"headerlink\" title=\"创建后续容器\"></a>创建后续容器</h3><p>因为要搭建集群，后面的hosts文件需要配置第一台的配置，这时候我们使用-v进行挂载容器，将/etc/hosts指定使用宿主机的/user/hosts文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#&#x2F;user&#x2F;hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.3      c0543dbe04fe</span><br></pre></td></tr></table></figure>\n<p>创建容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -p 15670:15672 --name rabbit2 -v &#x2F;user&#x2F;hosts:&#x2F;etc&#x2F;hosts reallinxu&#x2F;rabbit:1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现集群\"><a href=\"#实现集群\" class=\"headerlink\" title=\"实现集群\"></a>实现集群</h3><p>第一个容器中启动rabbitmq</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached # -detached后台运行</span><br><span class=\"line\">rabbitmqctl add_user admin admin</span><br><span class=\"line\">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure>\n<p>将/var/lib/rabbitmq的.erlang.cookie文件拷贝到宿主机中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp c0543dbe04fe:&#x2F;var&#x2F;lib&#x2F;rabbitmq &#x2F;user</span><br></pre></td></tr></table></figure>\n<p>将第一个容器中/root下cookie覆盖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp &#x2F;user&#x2F;rabbitmq&#x2F;.erlang.cookie c0543dbe04fe:&#x2F;root</span><br></pre></td></tr></table></figure>\n<p>将宿主机的cookie文件覆盖到其他容器中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp &#x2F;user&#x2F;rabbitmq&#x2F;.erlang.cookie 780f23c07ef7:&#x2F;root</span><br><span class=\"line\">docker cp &#x2F;user&#x2F;rabbitmq&#x2F;.erlang.cookie 780f23c07ef7:&#x2F;var&#x2F;lib&#x2F;rabbitmq</span><br></pre></td></tr></table></figure>\n<p>更改.erlang.cookie的访问权限为400</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 400 &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie</span><br></pre></td></tr></table></figure>\n<p>更改.erlang.cookie的文件所有人为rabbitmq</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown rabbitmq:rabbitmq &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie</span><br></pre></td></tr></table></figure>\n<p>启动后续容器并做如下操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached</span><br><span class=\"line\">rabbitmqctl stop_app</span><br><span class=\"line\">rabbitmqctl join_cluster rabbit@c0543dbe04fe</span><br><span class=\"line\">rabbitmqctl start_app</span><br></pre></td></tr></table></figure>\n<p>查看rabbitmq后台界面，可以发现集群搭建成功。不过因为直接挂载，导致容器自身映射端口并没有生效，所以在后面需要将自己的hosts配置进去，在hosts文件后面追加下面语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">172.17.0.3\t780f23c07ef7</span><br></pre></td></tr></table></figure>\n<p>容器ID请按照自己创建容器ID来替换。</p>\n<h1 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\"小知识\"></a>小知识</h1><h2 id=\"sed命令\"><a href=\"#sed命令\" class=\"headerlink\" title=\"sed命令\"></a>sed命令</h2><p>sed -i ‘s/指定的字符/要插入的字符&amp;/‘  文件  #前插<br>sed -i ‘s/指定的字符/&amp;要插入的字符/‘  文件  #后插<br>sed ‘s/原字符串/替换字符串/‘ 文件            #替换<br>sed ‘s/原字符串/替换字符串/g’ 文件            #替换所有<br>\\n 换行符  \\转义</p>\n<h2 id=\"查看容器端口映射\"><a href=\"#查看容器端口映射\" class=\"headerlink\" title=\"查看容器端口映射\"></a>查看容器端口映射</h2><p>docker port <NAME></p>\n<h2 id=\"失败解决\"><a href=\"#失败解决\" class=\"headerlink\" title=\"失败解决\"></a>失败解决</h2><p>安装rpm包如果出现“Exiting on user Command”的错误，请在yum命令后加上“-y”选项</p>\n<h2 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h2><p>不可以使用，尽量避免，网上说可以CMD或者entrypoint设置为/usr/sbin/init，但是创建容器时一直没有反应，所以放弃了</p>\n"},{"title":" QLExpress规则引擎实例","id":"20200117","date":"2020-01-17T03:30:35.000Z","_content":"\n## what is QLExpress\nQLExpress是阿里开源的一个规则引擎，对java支持良好，具体描述及用法直接移步github：https://github.com/alibaba/QLExpress\n\n## just do it!\ngithub中对基本用法已经描述很清楚，此处不再赘述，我们直接通过一个入门案例来帮忙理解，\n\n### fisrt \n我们先来看一段java伪代码\n```java\nif(新用户) {\n  赠送优惠券;\n} else {\n  赠送积分;\n}\nif(有手机号){\n  发送短信;\n}\n```\n我们代码中都会出现类似的逻辑，如果此时我想要修改为新用户增送积分，否则赠送优惠券呢，这时候就需要修改if-else，此时我们可以使用规则引擎来轻松实现逻辑，并通过修改规则引擎描述就可以直接修改功能，咋做嘞，往下瞅~\n\n### show you code\n```java\npackage com.qlexpress.demo;\n\nimport com.ql.util.express.DefaultContext;\nimport com.ql.util.express.ExpressRunner;\n\npublic class Test {\n\n    public static void main(String[] args) throws Exception {\n        ExpressRunner runner = new ExpressRunner();\n\n//      如果 新用户 赠送代金券  否则  赠送积分\n//      如果 有手机号  发送短信\n\n//      定义逻辑\n        runner.addOperatorWithAlias(\"如果\", \"if\", null);\n        runner.addOperatorWithAlias(\"则\", \"then\", null);\n        runner.addOperatorWithAlias(\"否则\", \"else\", null);\n\n//      定义执行方法\n        runner.addFunctionOfClassMethod(\"赠送优惠券\", Test.class.getName(),\n                \"sendCoupon\", new Class[]{Integer.class}, null);\n        runner.addFunctionOfClassMethod(\"赠送积分\", Test.class.getName(),\n                \"sendIntegral\", new Class[]{Integer.class}, null);\n        runner.addFunctionOfServiceMethod(\"发送短信\", new Test(), \"sendMsg\",\n                new String[]{\"String\"}, null);\n\n//      定义逻辑\n        runner.addFunctionOfServiceMethod(\"是否新用户\", new Test(), \"isNewAcct\",\n                new Class[]{Integer.class}, null);\n        runner.addFunctionOfServiceMethod(\"是否有手机号\", new Test(), \"isMobile\",\n                new Class[]{Integer.class}, null);\n\n        String exp = \"如果  (是否新用户(1)) 则 { 赠送优惠券(1)} 否则 { 赠送积分(1)} 如果 (是否有手机号(1)) 则 {发送短信(\\\"欢迎您哦\\\")}\";\n        DefaultContext<String, Object> context = new DefaultContext<String, Object>();\n        Object execute = runner.execute(exp, context, null, false, false, null);\n        System.out.println(execute);\n\n    }\n\n    public static void sendCoupon(Integer num) {\n        System.out.println(\"赠送优惠券啦:\" + num);\n    }\n\n    public static void sendIntegral(Integer num) {\n        System.out.println(\"赠送积分啦:\" + num);\n    }\n\n    public String sendMsg(String msg) {\n        System.out.println(\"发送短信啦:\" + msg);\n        return msg;\n    }\n\n    public boolean isNewAcct(Integer userType) {\n        if (userType == 1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public boolean isMobile(Integer mobileType) {\n        if (mobileType == 1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n```\n### end\n案例中规则为：\n```\n如果  (是否新用户(1)) 则 { 赠送优惠券(1)} 否则 { 赠送积分(1)} 如果 (是否有手机号(1)) 则 {发送短信(\\\"欢迎您哦\\\")}\n```\n如果此时我要修改，我可以直接修改语句为：\n```\n如果  (是否新用户(2)) 则 { 赠送优惠券(1)} 否则 { 赠送积分(1)} 如果 (是否有手机号(1)) 则 {发送短信(\\\"欢迎您哦\\\")}\n```\n如果把这个规则直接作为配置化，只要语句符合规则，直接修改就ok了。","source":"_posts/QLExpress.md","raw":"---\ntitle: \" QLExpress规则引擎实例\"\nid: 20200117\ncategories:\n  - QLExpress\ndate: 2020-1-17 11:30:35\ntags: QLExpress\n---\n\n## what is QLExpress\nQLExpress是阿里开源的一个规则引擎，对java支持良好，具体描述及用法直接移步github：https://github.com/alibaba/QLExpress\n\n## just do it!\ngithub中对基本用法已经描述很清楚，此处不再赘述，我们直接通过一个入门案例来帮忙理解，\n\n### fisrt \n我们先来看一段java伪代码\n```java\nif(新用户) {\n  赠送优惠券;\n} else {\n  赠送积分;\n}\nif(有手机号){\n  发送短信;\n}\n```\n我们代码中都会出现类似的逻辑，如果此时我想要修改为新用户增送积分，否则赠送优惠券呢，这时候就需要修改if-else，此时我们可以使用规则引擎来轻松实现逻辑，并通过修改规则引擎描述就可以直接修改功能，咋做嘞，往下瞅~\n\n### show you code\n```java\npackage com.qlexpress.demo;\n\nimport com.ql.util.express.DefaultContext;\nimport com.ql.util.express.ExpressRunner;\n\npublic class Test {\n\n    public static void main(String[] args) throws Exception {\n        ExpressRunner runner = new ExpressRunner();\n\n//      如果 新用户 赠送代金券  否则  赠送积分\n//      如果 有手机号  发送短信\n\n//      定义逻辑\n        runner.addOperatorWithAlias(\"如果\", \"if\", null);\n        runner.addOperatorWithAlias(\"则\", \"then\", null);\n        runner.addOperatorWithAlias(\"否则\", \"else\", null);\n\n//      定义执行方法\n        runner.addFunctionOfClassMethod(\"赠送优惠券\", Test.class.getName(),\n                \"sendCoupon\", new Class[]{Integer.class}, null);\n        runner.addFunctionOfClassMethod(\"赠送积分\", Test.class.getName(),\n                \"sendIntegral\", new Class[]{Integer.class}, null);\n        runner.addFunctionOfServiceMethod(\"发送短信\", new Test(), \"sendMsg\",\n                new String[]{\"String\"}, null);\n\n//      定义逻辑\n        runner.addFunctionOfServiceMethod(\"是否新用户\", new Test(), \"isNewAcct\",\n                new Class[]{Integer.class}, null);\n        runner.addFunctionOfServiceMethod(\"是否有手机号\", new Test(), \"isMobile\",\n                new Class[]{Integer.class}, null);\n\n        String exp = \"如果  (是否新用户(1)) 则 { 赠送优惠券(1)} 否则 { 赠送积分(1)} 如果 (是否有手机号(1)) 则 {发送短信(\\\"欢迎您哦\\\")}\";\n        DefaultContext<String, Object> context = new DefaultContext<String, Object>();\n        Object execute = runner.execute(exp, context, null, false, false, null);\n        System.out.println(execute);\n\n    }\n\n    public static void sendCoupon(Integer num) {\n        System.out.println(\"赠送优惠券啦:\" + num);\n    }\n\n    public static void sendIntegral(Integer num) {\n        System.out.println(\"赠送积分啦:\" + num);\n    }\n\n    public String sendMsg(String msg) {\n        System.out.println(\"发送短信啦:\" + msg);\n        return msg;\n    }\n\n    public boolean isNewAcct(Integer userType) {\n        if (userType == 1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public boolean isMobile(Integer mobileType) {\n        if (mobileType == 1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n```\n### end\n案例中规则为：\n```\n如果  (是否新用户(1)) 则 { 赠送优惠券(1)} 否则 { 赠送积分(1)} 如果 (是否有手机号(1)) 则 {发送短信(\\\"欢迎您哦\\\")}\n```\n如果此时我要修改，我可以直接修改语句为：\n```\n如果  (是否新用户(2)) 则 { 赠送优惠券(1)} 否则 { 赠送积分(1)} 如果 (是否有手机号(1)) 则 {发送短信(\\\"欢迎您哦\\\")}\n```\n如果把这个规则直接作为配置化，只要语句符合规则，直接修改就ok了。","slug":"QLExpress","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7tt0009v8gp4yk557ji","content":"<h2 id=\"what-is-QLExpress\"><a href=\"#what-is-QLExpress\" class=\"headerlink\" title=\"what is QLExpress\"></a>what is QLExpress</h2><p>QLExpress是阿里开源的一个规则引擎，对java支持良好，具体描述及用法直接移步github：<a href=\"https://github.com/alibaba/QLExpress\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/QLExpress</a></p>\n<h2 id=\"just-do-it\"><a href=\"#just-do-it\" class=\"headerlink\" title=\"just do it!\"></a>just do it!</h2><p>github中对基本用法已经描述很清楚，此处不再赘述，我们直接通过一个入门案例来帮忙理解，</p>\n<h3 id=\"fisrt\"><a href=\"#fisrt\" class=\"headerlink\" title=\"fisrt\"></a>fisrt</h3><p>我们先来看一段java伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(新用户) &#123;</span><br><span class=\"line\">  赠送优惠券;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  赠送积分;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(有手机号)&#123;</span><br><span class=\"line\">  发送短信;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们代码中都会出现类似的逻辑，如果此时我想要修改为新用户增送积分，否则赠送优惠券呢，这时候就需要修改if-else，此时我们可以使用规则引擎来轻松实现逻辑，并通过修改规则引擎描述就可以直接修改功能，咋做嘞，往下瞅~</p>\n<h3 id=\"show-you-code\"><a href=\"#show-you-code\" class=\"headerlink\" title=\"show you code\"></a>show you code</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.qlexpress.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ql.util.express.DefaultContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ql.util.express.ExpressRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ExpressRunner runner = <span class=\"keyword\">new</span> ExpressRunner();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      如果 新用户 赠送代金券  否则  赠送积分</span></span><br><span class=\"line\"><span class=\"comment\">//      如果 有手机号  发送短信</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      定义逻辑</span></span><br><span class=\"line\">        runner.addOperatorWithAlias(<span class=\"string\">\"如果\"</span>, <span class=\"string\">\"if\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        runner.addOperatorWithAlias(<span class=\"string\">\"则\"</span>, <span class=\"string\">\"then\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        runner.addOperatorWithAlias(<span class=\"string\">\"否则\"</span>, <span class=\"string\">\"else\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      定义执行方法</span></span><br><span class=\"line\">        runner.addFunctionOfClassMethod(<span class=\"string\">\"赠送优惠券\"</span>, Test<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>(),</span></span><br><span class=\"line\">                \"sendCoupon\", new Class[]&#123;Integer.class&#125;, null);</span><br><span class=\"line\">        runner.addFunctionOfClassMethod(<span class=\"string\">\"赠送积分\"</span>, Test<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>(),</span></span><br><span class=\"line\">                \"sendIntegral\", new Class[]&#123;Integer.class&#125;, null);</span><br><span class=\"line\">        runner.addFunctionOfServiceMethod(<span class=\"string\">\"发送短信\"</span>, <span class=\"keyword\">new</span> Test(), <span class=\"string\">\"sendMsg\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"String\"</span>&#125;, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      定义逻辑</span></span><br><span class=\"line\">        runner.addFunctionOfServiceMethod(<span class=\"string\">\"是否新用户\"</span>, <span class=\"keyword\">new</span> Test(), <span class=\"string\">\"isNewAcct\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[]&#123;Integer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">        runner.addFunctionOfServiceMethod(<span class=\"string\">\"是否有手机号\"</span>, <span class=\"keyword\">new</span> Test(), <span class=\"string\">\"isMobile\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[]&#123;Integer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">null</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String exp = <span class=\"string\">\"如果  (是否新用户(1)) 则 &#123; 赠送优惠券(1)&#125; 否则 &#123; 赠送积分(1)&#125; 如果 (是否有手机号(1)) 则 &#123;发送短信(\\\"欢迎您哦\\\")&#125;\"</span>;</span><br><span class=\"line\">        DefaultContext&lt;String, Object&gt; context = <span class=\"keyword\">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class=\"line\">        Object execute = runner.execute(exp, context, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        System.out.println(execute);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendCoupon</span><span class=\"params\">(Integer num)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"赠送优惠券啦:\"</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendIntegral</span><span class=\"params\">(Integer num)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"赠送积分啦:\"</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"发送短信啦:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNewAcct</span><span class=\"params\">(Integer userType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMobile</span><span class=\"params\">(Integer mobileType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mobileType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h3><p>案例中规则为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果  (是否新用户(1)) 则 &#123; 赠送优惠券(1)&#125; 否则 &#123; 赠送积分(1)&#125; 如果 (是否有手机号(1)) 则 &#123;发送短信(\\&quot;欢迎您哦\\&quot;)&#125;</span><br></pre></td></tr></table></figure>\n<p>如果此时我要修改，我可以直接修改语句为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果  (是否新用户(2)) 则 &#123; 赠送优惠券(1)&#125; 否则 &#123; 赠送积分(1)&#125; 如果 (是否有手机号(1)) 则 &#123;发送短信(\\&quot;欢迎您哦\\&quot;)&#125;</span><br></pre></td></tr></table></figure>\n<p>如果把这个规则直接作为配置化，只要语句符合规则，直接修改就ok了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"what-is-QLExpress\"><a href=\"#what-is-QLExpress\" class=\"headerlink\" title=\"what is QLExpress\"></a>what is QLExpress</h2><p>QLExpress是阿里开源的一个规则引擎，对java支持良好，具体描述及用法直接移步github：<a href=\"https://github.com/alibaba/QLExpress\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/QLExpress</a></p>\n<h2 id=\"just-do-it\"><a href=\"#just-do-it\" class=\"headerlink\" title=\"just do it!\"></a>just do it!</h2><p>github中对基本用法已经描述很清楚，此处不再赘述，我们直接通过一个入门案例来帮忙理解，</p>\n<h3 id=\"fisrt\"><a href=\"#fisrt\" class=\"headerlink\" title=\"fisrt\"></a>fisrt</h3><p>我们先来看一段java伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(新用户) &#123;</span><br><span class=\"line\">  赠送优惠券;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  赠送积分;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(有手机号)&#123;</span><br><span class=\"line\">  发送短信;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们代码中都会出现类似的逻辑，如果此时我想要修改为新用户增送积分，否则赠送优惠券呢，这时候就需要修改if-else，此时我们可以使用规则引擎来轻松实现逻辑，并通过修改规则引擎描述就可以直接修改功能，咋做嘞，往下瞅~</p>\n<h3 id=\"show-you-code\"><a href=\"#show-you-code\" class=\"headerlink\" title=\"show you code\"></a>show you code</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.qlexpress.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ql.util.express.DefaultContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ql.util.express.ExpressRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ExpressRunner runner = <span class=\"keyword\">new</span> ExpressRunner();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      如果 新用户 赠送代金券  否则  赠送积分</span></span><br><span class=\"line\"><span class=\"comment\">//      如果 有手机号  发送短信</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      定义逻辑</span></span><br><span class=\"line\">        runner.addOperatorWithAlias(<span class=\"string\">\"如果\"</span>, <span class=\"string\">\"if\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        runner.addOperatorWithAlias(<span class=\"string\">\"则\"</span>, <span class=\"string\">\"then\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        runner.addOperatorWithAlias(<span class=\"string\">\"否则\"</span>, <span class=\"string\">\"else\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      定义执行方法</span></span><br><span class=\"line\">        runner.addFunctionOfClassMethod(<span class=\"string\">\"赠送优惠券\"</span>, Test<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>(),</span></span><br><span class=\"line\">                \"sendCoupon\", new Class[]&#123;Integer.class&#125;, null);</span><br><span class=\"line\">        runner.addFunctionOfClassMethod(<span class=\"string\">\"赠送积分\"</span>, Test<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>(),</span></span><br><span class=\"line\">                \"sendIntegral\", new Class[]&#123;Integer.class&#125;, null);</span><br><span class=\"line\">        runner.addFunctionOfServiceMethod(<span class=\"string\">\"发送短信\"</span>, <span class=\"keyword\">new</span> Test(), <span class=\"string\">\"sendMsg\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"String\"</span>&#125;, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      定义逻辑</span></span><br><span class=\"line\">        runner.addFunctionOfServiceMethod(<span class=\"string\">\"是否新用户\"</span>, <span class=\"keyword\">new</span> Test(), <span class=\"string\">\"isNewAcct\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[]&#123;Integer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">        runner.addFunctionOfServiceMethod(<span class=\"string\">\"是否有手机号\"</span>, <span class=\"keyword\">new</span> Test(), <span class=\"string\">\"isMobile\"</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[]&#123;Integer<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">null</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String exp = <span class=\"string\">\"如果  (是否新用户(1)) 则 &#123; 赠送优惠券(1)&#125; 否则 &#123; 赠送积分(1)&#125; 如果 (是否有手机号(1)) 则 &#123;发送短信(\\\"欢迎您哦\\\")&#125;\"</span>;</span><br><span class=\"line\">        DefaultContext&lt;String, Object&gt; context = <span class=\"keyword\">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class=\"line\">        Object execute = runner.execute(exp, context, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        System.out.println(execute);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendCoupon</span><span class=\"params\">(Integer num)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"赠送优惠券啦:\"</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendIntegral</span><span class=\"params\">(Integer num)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"赠送积分啦:\"</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sendMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"发送短信啦:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNewAcct</span><span class=\"params\">(Integer userType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMobile</span><span class=\"params\">(Integer mobileType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mobileType == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h3><p>案例中规则为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果  (是否新用户(1)) 则 &#123; 赠送优惠券(1)&#125; 否则 &#123; 赠送积分(1)&#125; 如果 (是否有手机号(1)) 则 &#123;发送短信(\\&quot;欢迎您哦\\&quot;)&#125;</span><br></pre></td></tr></table></figure>\n<p>如果此时我要修改，我可以直接修改语句为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果  (是否新用户(2)) 则 &#123; 赠送优惠券(1)&#125; 否则 &#123; 赠送积分(1)&#125; 如果 (是否有手机号(1)) 则 &#123;发送短信(\\&quot;欢迎您哦\\&quot;)&#125;</span><br></pre></td></tr></table></figure>\n<p>如果把这个规则直接作为配置化，只要语句符合规则，直接修改就ok了。</p>\n"},{"title":"Docker容器中搭建Redis集群","id":"523","date":"2018-05-30T10:00:00.000Z","author":["linxu"],"_content":"\n# Redis简介 #\nRedis为传说中的内存数据库的一种，运行在内存中，性能强大，还可以用作缓存和消息中间件。Redis支持多种数据结构的存储，提供了大部分平台的客户端，使用方便。\n\n# Redis优缺点 #\n## 优点 ##\n1. 性能极高：Redis能读的速度是110000次/s,写的速度是81000次/s。\n2. 丰富的数据类型：Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\n3. 原子：Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。\n4. 丰富的特性：Redis还支持 publish/subscribe, 通知, key 过期等等特性。\n\n## 缺点 ##\n1. Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。\n2. 主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。\n3. redis的主从复制采用全量复制，从机新加入集群或者从机和主机网络断开重连时都会进行，复制过程中主机会fork出一个子进程对内存做一份快照，并将内存快照保存为文件发送给从机，需要保证主机的内存足够。若快照文件较大，将影响集群的服务能力。\n4. Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。所以运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n\n# Docker中搭建Redis集群 #\n## Dockerfile文件 ##\n将redis-4.0.6.tar.gz,ruby-2.5.0.tar.gz,openssl-1.1.1-pre7.tar.gz文件放入Dockerfile同目录\n```\nfrom centos\nMAINTAINER reallinxu\n\nCOPY redis-4.0.6.tar.gz /usr/software/redis-4.0.6.tar.gz\nRUN mkdir /usr/redis\nRUN tar xzf /usr/software/redis-4.0.6.tar.gz -C /usr/redis\nRUN yum -y install gcc automake autoconf libtool make\nRUN cd /usr/redis/redis-4.0.6 && make\nCOPY ruby-2.5.0.tar.gz /usr/software/ruby-2.5.0.tar.gz\nRUN mkdir /usr/ruby\nRUN tar xzf /usr/software/ruby-2.5.0.tar.gz -C /usr/ruby\nRUN cd /usr/ruby/ruby-2.5.0 && ./configure && ls Makefile && make && make install\nRUN yum install -y rubygems\nRUN yum install -y zlib-devel\nCOPY openssl-1.1.1-pre7.tar.gz /usr/software/openssl-1.1.1-pre7.tar.gz\nRUN mkdir /usr/openssl\nRUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl\nRUN cd /usr/openssl/openssl-1.1.1-pre7 && ./config -fPIC --prefix=/usr/local/openssl enable-shared && ./config -t && make && make install\nRUN cd /usr/ruby/ruby-2.5.0/ext/zlib && ruby ./extconf.rb && sed -i 's/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/' Makefile && make && make install \nRUN cd /usr/ruby/ruby-2.5.0/ext/openssl && ruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib && sed -i 's/$(top_srcdir)/..\\/../g' Makefile && make && make install\nRUN gem install redis\nRUN sed -i 's/daemonize no/daemonize yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/dir .\\//dir \\/usr\\/redis\\//' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-enabled yes/cluster-enabled yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-node-timeout 15000/cluster-node-timeout 15000/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/appendonly no/appendonly yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN rm -rf /usr/software/redis-4.0.6.tar.gz\nRUN rm -rf /usr/software/ruby-2.5.0.tar.gz\nRUN rm -rf /usr/software/openssl-1.1.1-pre7.tar.gz\nEXPOSE 6379\n```\n\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/redis:v1\" .\n```\n## 创建容器 ##\nredis集群需要最少6个节点，3+3模式,所以用以下命令创建6个容器\n```\ndocker run -i -t --name redis1 reallinxu/redis:v1\ndocker run -i -t --name redis2 reallinxu/redis:v1\ndocker run -i -t --name redis3 reallinxu/redis:v1\ndocker run -i -t --name redis4 reallinxu/redis:v1\ndocker run -i -t --name redis5 reallinxu/redis:v1\ndocker run -i -t --name redis6 reallinxu/redis:v1\n```\n## 构建集群 ##\n分别对六台做以下操作：\n1. 查看容器ip\n```\ncat /etc/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.2      263989ddf7e2\n```\n2. 修改redis配置\n```\nvi /usr/redis/redis-4.0.6/redis.conf\n找到 bind 127.0.0.1\n改为 bind 172.17.0.2 #对应容器的ip\n```\n3. 启动redis\n```\ncd /usr/redis/redis-4.0.6/src\n./redis-server ../redis.conf\n```\n\n启动六台后实现集群\n```\n./redis-trib.rb create --replicas 1 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 172.17.0.5:6379 172.17.0.6:6379 172.17.0.7:6379  \n```\n## 测试redis集群 ##\n```\n./redis-cli  -c -h 172.17.0.3 -p 6379  \n172.17.0.3:6379> set a 1\n-> Redirected to slot [15495] located at 172.17.0.4:6379\nOK\n172.17.0.3:6379> get a\n-> Redirected to slot [15495] located at 172.17.0.4:6379\n\"1\"\n172.17.0.4:6379> exit\n```\n\n## 遇到的错误 ##\n1. -bash: make: command not found\n解决：安装gcc \n```\nyum -y install gcc automake autoconf libtool make\n```\n2. ERROR:  Loading command: install (LoadError) cannot load such file -- zlib\n解决：需要依赖zlib工具\n```\nyum install -y zlib-devel\n```\n3. Could not create Makefile due to some reason, probably lack of necessary\n解决：zlib需要安装到本地运行库\n```\ncd /usr/ruby/ruby-2.5.0/ext/zlib \nruby ./extconf.rb\nmake\nmake install \n```\n4. make: *** No rule to make target `/include/ruby.h', needed by `zlib.o'.  Stop\n解决：修改makefile文件\n```\nsed -i 's/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/' Makefile \nmake\nmake install\n```\n5. while executing gem ...(Gem:Exception) Unable to require openssl\n解决：需要安装openssl\n```\nwget https://www.openssl.org/source/openssl-1.1.1-pre7.tar.gz\nRUN mkdir /usr/openssl\nRUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl\nRUN cd /usr/openssl/openssl-1.1.1-pre7\n./config -fPIC --prefix=/usr/local/openssl enable-shared  \n./config -t  \nmake  \nmake install\n还需要安装到本地库\ncd /usr/ruby/ruby-2.5.0/ext/openssl\nruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib\nmake\nmake install\n```\n6. make: *** No rule to make target `/include/ruby.h', needed by `ossl.o'.  Stop\n解决：修改makefile文件\n```\nsed -i 's/$(top_srcdir)/..\\/../g' Makefile\nmake\nmake install\n```","source":"_posts/Docker容器中搭建Redis集群.md","raw":"---\ntitle: \"Docker容器中搭建Redis集群\"\ntags:\n  - docker\nid: 523\ncategories:\n  - Docker\ndate: 2018-05-30 18:00:00\nauthor: \n  - linxu\n---\n\n# Redis简介 #\nRedis为传说中的内存数据库的一种，运行在内存中，性能强大，还可以用作缓存和消息中间件。Redis支持多种数据结构的存储，提供了大部分平台的客户端，使用方便。\n\n# Redis优缺点 #\n## 优点 ##\n1. 性能极高：Redis能读的速度是110000次/s,写的速度是81000次/s。\n2. 丰富的数据类型：Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\n3. 原子：Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。\n4. 丰富的特性：Redis还支持 publish/subscribe, 通知, key 过期等等特性。\n\n## 缺点 ##\n1. Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。\n2. 主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。\n3. redis的主从复制采用全量复制，从机新加入集群或者从机和主机网络断开重连时都会进行，复制过程中主机会fork出一个子进程对内存做一份快照，并将内存快照保存为文件发送给从机，需要保证主机的内存足够。若快照文件较大，将影响集群的服务能力。\n4. Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。所以运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n\n# Docker中搭建Redis集群 #\n## Dockerfile文件 ##\n将redis-4.0.6.tar.gz,ruby-2.5.0.tar.gz,openssl-1.1.1-pre7.tar.gz文件放入Dockerfile同目录\n```\nfrom centos\nMAINTAINER reallinxu\n\nCOPY redis-4.0.6.tar.gz /usr/software/redis-4.0.6.tar.gz\nRUN mkdir /usr/redis\nRUN tar xzf /usr/software/redis-4.0.6.tar.gz -C /usr/redis\nRUN yum -y install gcc automake autoconf libtool make\nRUN cd /usr/redis/redis-4.0.6 && make\nCOPY ruby-2.5.0.tar.gz /usr/software/ruby-2.5.0.tar.gz\nRUN mkdir /usr/ruby\nRUN tar xzf /usr/software/ruby-2.5.0.tar.gz -C /usr/ruby\nRUN cd /usr/ruby/ruby-2.5.0 && ./configure && ls Makefile && make && make install\nRUN yum install -y rubygems\nRUN yum install -y zlib-devel\nCOPY openssl-1.1.1-pre7.tar.gz /usr/software/openssl-1.1.1-pre7.tar.gz\nRUN mkdir /usr/openssl\nRUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl\nRUN cd /usr/openssl/openssl-1.1.1-pre7 && ./config -fPIC --prefix=/usr/local/openssl enable-shared && ./config -t && make && make install\nRUN cd /usr/ruby/ruby-2.5.0/ext/zlib && ruby ./extconf.rb && sed -i 's/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/' Makefile && make && make install \nRUN cd /usr/ruby/ruby-2.5.0/ext/openssl && ruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib && sed -i 's/$(top_srcdir)/..\\/../g' Makefile && make && make install\nRUN gem install redis\nRUN sed -i 's/daemonize no/daemonize yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/dir .\\//dir \\/usr\\/redis\\//' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-enabled yes/cluster-enabled yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-node-timeout 15000/cluster-node-timeout 15000/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/appendonly no/appendonly yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN rm -rf /usr/software/redis-4.0.6.tar.gz\nRUN rm -rf /usr/software/ruby-2.5.0.tar.gz\nRUN rm -rf /usr/software/openssl-1.1.1-pre7.tar.gz\nEXPOSE 6379\n```\n\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/redis:v1\" .\n```\n## 创建容器 ##\nredis集群需要最少6个节点，3+3模式,所以用以下命令创建6个容器\n```\ndocker run -i -t --name redis1 reallinxu/redis:v1\ndocker run -i -t --name redis2 reallinxu/redis:v1\ndocker run -i -t --name redis3 reallinxu/redis:v1\ndocker run -i -t --name redis4 reallinxu/redis:v1\ndocker run -i -t --name redis5 reallinxu/redis:v1\ndocker run -i -t --name redis6 reallinxu/redis:v1\n```\n## 构建集群 ##\n分别对六台做以下操作：\n1. 查看容器ip\n```\ncat /etc/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.2      263989ddf7e2\n```\n2. 修改redis配置\n```\nvi /usr/redis/redis-4.0.6/redis.conf\n找到 bind 127.0.0.1\n改为 bind 172.17.0.2 #对应容器的ip\n```\n3. 启动redis\n```\ncd /usr/redis/redis-4.0.6/src\n./redis-server ../redis.conf\n```\n\n启动六台后实现集群\n```\n./redis-trib.rb create --replicas 1 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 172.17.0.5:6379 172.17.0.6:6379 172.17.0.7:6379  \n```\n## 测试redis集群 ##\n```\n./redis-cli  -c -h 172.17.0.3 -p 6379  \n172.17.0.3:6379> set a 1\n-> Redirected to slot [15495] located at 172.17.0.4:6379\nOK\n172.17.0.3:6379> get a\n-> Redirected to slot [15495] located at 172.17.0.4:6379\n\"1\"\n172.17.0.4:6379> exit\n```\n\n## 遇到的错误 ##\n1. -bash: make: command not found\n解决：安装gcc \n```\nyum -y install gcc automake autoconf libtool make\n```\n2. ERROR:  Loading command: install (LoadError) cannot load such file -- zlib\n解决：需要依赖zlib工具\n```\nyum install -y zlib-devel\n```\n3. Could not create Makefile due to some reason, probably lack of necessary\n解决：zlib需要安装到本地运行库\n```\ncd /usr/ruby/ruby-2.5.0/ext/zlib \nruby ./extconf.rb\nmake\nmake install \n```\n4. make: *** No rule to make target `/include/ruby.h', needed by `zlib.o'.  Stop\n解决：修改makefile文件\n```\nsed -i 's/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/' Makefile \nmake\nmake install\n```\n5. while executing gem ...(Gem:Exception) Unable to require openssl\n解决：需要安装openssl\n```\nwget https://www.openssl.org/source/openssl-1.1.1-pre7.tar.gz\nRUN mkdir /usr/openssl\nRUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl\nRUN cd /usr/openssl/openssl-1.1.1-pre7\n./config -fPIC --prefix=/usr/local/openssl enable-shared  \n./config -t  \nmake  \nmake install\n还需要安装到本地库\ncd /usr/ruby/ruby-2.5.0/ext/openssl\nruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib\nmake\nmake install\n```\n6. make: *** No rule to make target `/include/ruby.h', needed by `ossl.o'.  Stop\n解决：修改makefile文件\n```\nsed -i 's/$(top_srcdir)/..\\/../g' Makefile\nmake\nmake install\n```","slug":"Docker容器中搭建Redis集群","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7tv000bv8gp31wnbehs","content":"<h1 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h1><p>Redis为传说中的内存数据库的一种，运行在内存中，性能强大，还可以用作缓存和消息中间件。Redis支持多种数据结构的存储，提供了大部分平台的客户端，使用方便。</p>\n<h1 id=\"Redis优缺点\"><a href=\"#Redis优缺点\" class=\"headerlink\" title=\"Redis优缺点\"></a>Redis优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>性能极高：Redis能读的速度是110000次/s,写的速度是81000次/s。</li>\n<li>丰富的数据类型：Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>\n<li>原子：Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>\n<li>丰富的特性：Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li>\n<li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li>\n<li>redis的主从复制采用全量复制，从机新加入集群或者从机和主机网络断开重连时都会进行，复制过程中主机会fork出一个子进程对内存做一份快照，并将内存快照保存为文件发送给从机，需要保证主机的内存足够。若快照文件较大，将影响集群的服务能力。</li>\n<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。所以运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>\n</ol>\n<h1 id=\"Docker中搭建Redis集群\"><a href=\"#Docker中搭建Redis集群\" class=\"headerlink\" title=\"Docker中搭建Redis集群\"></a>Docker中搭建Redis集群</h1><h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><p>将redis-4.0.6.tar.gz,ruby-2.5.0.tar.gz,openssl-1.1.1-pre7.tar.gz文件放入Dockerfile同目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">COPY redis-4.0.6.tar.gz &#x2F;usr&#x2F;software&#x2F;redis-4.0.6.tar.gz</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;redis</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;redis-4.0.6.tar.gz -C &#x2F;usr&#x2F;redis</span><br><span class=\"line\">RUN yum -y install gcc automake autoconf libtool make</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6 &amp;&amp; make</span><br><span class=\"line\">COPY ruby-2.5.0.tar.gz &#x2F;usr&#x2F;software&#x2F;ruby-2.5.0.tar.gz</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;ruby</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;ruby-2.5.0.tar.gz -C &#x2F;usr&#x2F;ruby</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0 &amp;&amp; .&#x2F;configure &amp;&amp; ls Makefile &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN yum install -y rubygems</span><br><span class=\"line\">RUN yum install -y zlib-devel</span><br><span class=\"line\">COPY openssl-1.1.1-pre7.tar.gz &#x2F;usr&#x2F;software&#x2F;openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;openssl</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;openssl-1.1.1-pre7.tar.gz -C &#x2F;usr&#x2F;openssl</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;openssl&#x2F;openssl-1.1.1-pre7 &amp;&amp; .&#x2F;config -fPIC --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl enable-shared &amp;&amp; .&#x2F;config -t &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0&#x2F;ext&#x2F;zlib &amp;&amp; ruby .&#x2F;extconf.rb &amp;&amp; sed -i &#39;s&#x2F;zlib.o: $(top_srcdir)\\&#x2F;include\\&#x2F;ruby.h&#x2F;zlib.o: ..\\&#x2F;..\\&#x2F;include\\&#x2F;ruby.h&#x2F;&#39; Makefile &amp;&amp; make &amp;&amp; make install </span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0&#x2F;ext&#x2F;openssl &amp;&amp; ruby extconf.rb  --with-openssl-include&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;include&#x2F; --with-openssl-lib&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;lib &amp;&amp; sed -i &#39;s&#x2F;$(top_srcdir)&#x2F;..\\&#x2F;..&#x2F;g&#39; Makefile &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN gem install redis</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;daemonize no&#x2F;daemonize yes&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;dir .\\&#x2F;&#x2F;dir \\&#x2F;usr\\&#x2F;redis\\&#x2F;&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;# cluster-enabled yes&#x2F;cluster-enabled yes&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;# cluster-config-file nodes-6379.conf&#x2F;cluster-config-file nodes-6379.conf&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;# cluster-node-timeout 15000&#x2F;cluster-node-timeout 15000&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;appendonly no&#x2F;appendonly yes&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;redis-4.0.6.tar.gz</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;ruby-2.5.0.tar.gz</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">EXPOSE 6379</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t&#x3D;&quot;reallinxu&#x2F;redis:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><p>redis集群需要最少6个节点，3+3模式,所以用以下命令创建6个容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t --name redis1 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis2 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis3 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis4 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis5 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis6 reallinxu&#x2F;redis:v1</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建集群\"><a href=\"#构建集群\" class=\"headerlink\" title=\"构建集群\"></a>构建集群</h2><p>分别对六台做以下操作：</p>\n<ol>\n<li>查看容器ip<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;etc&#x2F;hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.2      263989ddf7e2</span><br></pre></td></tr></table></figure></li>\n<li>修改redis配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">找到 bind 127.0.0.1</span><br><span class=\"line\">改为 bind 172.17.0.2 #对应容器的ip</span><br></pre></td></tr></table></figure></li>\n<li>启动redis<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;src</span><br><span class=\"line\">.&#x2F;redis-server ..&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>启动六台后实现集群</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;redis-trib.rb create --replicas 1 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 172.17.0.5:6379 172.17.0.6:6379 172.17.0.7:6379</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试redis集群\"><a href=\"#测试redis集群\" class=\"headerlink\" title=\"测试redis集群\"></a>测试redis集群</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;redis-cli  -c -h 172.17.0.3 -p 6379  </span><br><span class=\"line\">172.17.0.3:6379&gt; set a 1</span><br><span class=\"line\">-&gt; Redirected to slot [15495] located at 172.17.0.4:6379</span><br><span class=\"line\">OK</span><br><span class=\"line\">172.17.0.3:6379&gt; get a</span><br><span class=\"line\">-&gt; Redirected to slot [15495] located at 172.17.0.4:6379</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">172.17.0.4:6379&gt; exit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的错误\"><a href=\"#遇到的错误\" class=\"headerlink\" title=\"遇到的错误\"></a>遇到的错误</h2><ol>\n<li>-bash: make: command not found<br>解决：安装gcc <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure></li>\n<li>ERROR:  Loading command: install (LoadError) cannot load such file – zlib<br>解决：需要依赖zlib工具<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zlib-devel</span><br></pre></td></tr></table></figure></li>\n<li>Could not create Makefile due to some reason, probably lack of necessary<br>解决：zlib需要安装到本地运行库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0&#x2F;ext&#x2F;zlib </span><br><span class=\"line\">ruby .&#x2F;extconf.rb</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li>make: *** No rule to make target <code>/include/ruby.h&#39;, needed by</code>zlib.o’.  Stop<br>解决：修改makefile文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#39;s&#x2F;zlib.o: $(top_srcdir)\\&#x2F;include\\&#x2F;ruby.h&#x2F;zlib.o: ..\\&#x2F;..\\&#x2F;include\\&#x2F;ruby.h&#x2F;&#39; Makefile </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li>while executing gem …(Gem:Exception) Unable to require openssl<br>解决：需要安装openssl<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;openssl</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;openssl-1.1.1-pre7.tar.gz -C &#x2F;usr&#x2F;openssl</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;openssl&#x2F;openssl-1.1.1-pre7</span><br><span class=\"line\">.&#x2F;config -fPIC --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl enable-shared  </span><br><span class=\"line\">.&#x2F;config -t  </span><br><span class=\"line\">make  </span><br><span class=\"line\">make install</span><br><span class=\"line\">还需要安装到本地库</span><br><span class=\"line\">cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0&#x2F;ext&#x2F;openssl</span><br><span class=\"line\">ruby extconf.rb  --with-openssl-include&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;include&#x2F; --with-openssl-lib&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;lib</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li>make: *** No rule to make target <code>/include/ruby.h&#39;, needed by</code>ossl.o’.  Stop<br>解决：修改makefile文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#39;s&#x2F;$(top_srcdir)&#x2F;..\\&#x2F;..&#x2F;g&#39; Makefile</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h1><p>Redis为传说中的内存数据库的一种，运行在内存中，性能强大，还可以用作缓存和消息中间件。Redis支持多种数据结构的存储，提供了大部分平台的客户端，使用方便。</p>\n<h1 id=\"Redis优缺点\"><a href=\"#Redis优缺点\" class=\"headerlink\" title=\"Redis优缺点\"></a>Redis优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>性能极高：Redis能读的速度是110000次/s,写的速度是81000次/s。</li>\n<li>丰富的数据类型：Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>\n<li>原子：Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>\n<li>丰富的特性：Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li>\n<li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li>\n<li>redis的主从复制采用全量复制，从机新加入集群或者从机和主机网络断开重连时都会进行，复制过程中主机会fork出一个子进程对内存做一份快照，并将内存快照保存为文件发送给从机，需要保证主机的内存足够。若快照文件较大，将影响集群的服务能力。</li>\n<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。所以运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>\n</ol>\n<h1 id=\"Docker中搭建Redis集群\"><a href=\"#Docker中搭建Redis集群\" class=\"headerlink\" title=\"Docker中搭建Redis集群\"></a>Docker中搭建Redis集群</h1><h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><p>将redis-4.0.6.tar.gz,ruby-2.5.0.tar.gz,openssl-1.1.1-pre7.tar.gz文件放入Dockerfile同目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">COPY redis-4.0.6.tar.gz &#x2F;usr&#x2F;software&#x2F;redis-4.0.6.tar.gz</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;redis</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;redis-4.0.6.tar.gz -C &#x2F;usr&#x2F;redis</span><br><span class=\"line\">RUN yum -y install gcc automake autoconf libtool make</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6 &amp;&amp; make</span><br><span class=\"line\">COPY ruby-2.5.0.tar.gz &#x2F;usr&#x2F;software&#x2F;ruby-2.5.0.tar.gz</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;ruby</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;ruby-2.5.0.tar.gz -C &#x2F;usr&#x2F;ruby</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0 &amp;&amp; .&#x2F;configure &amp;&amp; ls Makefile &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN yum install -y rubygems</span><br><span class=\"line\">RUN yum install -y zlib-devel</span><br><span class=\"line\">COPY openssl-1.1.1-pre7.tar.gz &#x2F;usr&#x2F;software&#x2F;openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;openssl</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;openssl-1.1.1-pre7.tar.gz -C &#x2F;usr&#x2F;openssl</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;openssl&#x2F;openssl-1.1.1-pre7 &amp;&amp; .&#x2F;config -fPIC --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl enable-shared &amp;&amp; .&#x2F;config -t &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0&#x2F;ext&#x2F;zlib &amp;&amp; ruby .&#x2F;extconf.rb &amp;&amp; sed -i &#39;s&#x2F;zlib.o: $(top_srcdir)\\&#x2F;include\\&#x2F;ruby.h&#x2F;zlib.o: ..\\&#x2F;..\\&#x2F;include\\&#x2F;ruby.h&#x2F;&#39; Makefile &amp;&amp; make &amp;&amp; make install </span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0&#x2F;ext&#x2F;openssl &amp;&amp; ruby extconf.rb  --with-openssl-include&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;include&#x2F; --with-openssl-lib&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;lib &amp;&amp; sed -i &#39;s&#x2F;$(top_srcdir)&#x2F;..\\&#x2F;..&#x2F;g&#39; Makefile &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN gem install redis</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;daemonize no&#x2F;daemonize yes&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;dir .\\&#x2F;&#x2F;dir \\&#x2F;usr\\&#x2F;redis\\&#x2F;&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;# cluster-enabled yes&#x2F;cluster-enabled yes&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;# cluster-config-file nodes-6379.conf&#x2F;cluster-config-file nodes-6379.conf&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;# cluster-node-timeout 15000&#x2F;cluster-node-timeout 15000&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN sed -i &#39;s&#x2F;appendonly no&#x2F;appendonly yes&#x2F;&#39; &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;redis-4.0.6.tar.gz</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;ruby-2.5.0.tar.gz</span><br><span class=\"line\">RUN rm -rf &#x2F;usr&#x2F;software&#x2F;openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">EXPOSE 6379</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t&#x3D;&quot;reallinxu&#x2F;redis:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><p>redis集群需要最少6个节点，3+3模式,所以用以下命令创建6个容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t --name redis1 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis2 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis3 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis4 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis5 reallinxu&#x2F;redis:v1</span><br><span class=\"line\">docker run -i -t --name redis6 reallinxu&#x2F;redis:v1</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建集群\"><a href=\"#构建集群\" class=\"headerlink\" title=\"构建集群\"></a>构建集群</h2><p>分别对六台做以下操作：</p>\n<ol>\n<li>查看容器ip<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;etc&#x2F;hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.2      263989ddf7e2</span><br></pre></td></tr></table></figure></li>\n<li>修改redis配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;redis.conf</span><br><span class=\"line\">找到 bind 127.0.0.1</span><br><span class=\"line\">改为 bind 172.17.0.2 #对应容器的ip</span><br></pre></td></tr></table></figure></li>\n<li>启动redis<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;redis&#x2F;redis-4.0.6&#x2F;src</span><br><span class=\"line\">.&#x2F;redis-server ..&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>启动六台后实现集群</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;redis-trib.rb create --replicas 1 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 172.17.0.5:6379 172.17.0.6:6379 172.17.0.7:6379</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试redis集群\"><a href=\"#测试redis集群\" class=\"headerlink\" title=\"测试redis集群\"></a>测试redis集群</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;redis-cli  -c -h 172.17.0.3 -p 6379  </span><br><span class=\"line\">172.17.0.3:6379&gt; set a 1</span><br><span class=\"line\">-&gt; Redirected to slot [15495] located at 172.17.0.4:6379</span><br><span class=\"line\">OK</span><br><span class=\"line\">172.17.0.3:6379&gt; get a</span><br><span class=\"line\">-&gt; Redirected to slot [15495] located at 172.17.0.4:6379</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">172.17.0.4:6379&gt; exit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的错误\"><a href=\"#遇到的错误\" class=\"headerlink\" title=\"遇到的错误\"></a>遇到的错误</h2><ol>\n<li>-bash: make: command not found<br>解决：安装gcc <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure></li>\n<li>ERROR:  Loading command: install (LoadError) cannot load such file – zlib<br>解决：需要依赖zlib工具<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zlib-devel</span><br></pre></td></tr></table></figure></li>\n<li>Could not create Makefile due to some reason, probably lack of necessary<br>解决：zlib需要安装到本地运行库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0&#x2F;ext&#x2F;zlib </span><br><span class=\"line\">ruby .&#x2F;extconf.rb</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li>make: *** No rule to make target <code>/include/ruby.h&#39;, needed by</code>zlib.o’.  Stop<br>解决：修改makefile文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#39;s&#x2F;zlib.o: $(top_srcdir)\\&#x2F;include\\&#x2F;ruby.h&#x2F;zlib.o: ..\\&#x2F;..\\&#x2F;include\\&#x2F;ruby.h&#x2F;&#39; Makefile </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li>while executing gem …(Gem:Exception) Unable to require openssl<br>解决：需要安装openssl<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">RUN mkdir &#x2F;usr&#x2F;openssl</span><br><span class=\"line\">RUN tar xzf &#x2F;usr&#x2F;software&#x2F;openssl-1.1.1-pre7.tar.gz -C &#x2F;usr&#x2F;openssl</span><br><span class=\"line\">RUN cd &#x2F;usr&#x2F;openssl&#x2F;openssl-1.1.1-pre7</span><br><span class=\"line\">.&#x2F;config -fPIC --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl enable-shared  </span><br><span class=\"line\">.&#x2F;config -t  </span><br><span class=\"line\">make  </span><br><span class=\"line\">make install</span><br><span class=\"line\">还需要安装到本地库</span><br><span class=\"line\">cd &#x2F;usr&#x2F;ruby&#x2F;ruby-2.5.0&#x2F;ext&#x2F;openssl</span><br><span class=\"line\">ruby extconf.rb  --with-openssl-include&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;include&#x2F; --with-openssl-lib&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;lib</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n<li>make: *** No rule to make target <code>/include/ruby.h&#39;, needed by</code>ossl.o’.  Stop<br>解决：修改makefile文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#39;s&#x2F;$(top_srcdir)&#x2F;..\\&#x2F;..&#x2F;g&#39; Makefile</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"[Wechat-Public-Manage]1.前端VUE初始化","id":"2019","date":"2019-08-20T07:20:31.000Z","author":["linxu"],"_content":"\n## 准备\n1. 安装nodejs，选择LTS版本：[下载](https://nodejs.org/en/ \"nodejs\") \n2. 使用淘宝镜像  \n`npm install -g cnpm --registry=https://registry.npm.taobao.org` \n\n## 开始\n1. 安装vue-cli  \n`cnpm install vue-cli -g      //全局安装 vue-cli`  \n2. 创建项目  \n`vue init webpack wechat-public-manage-front`\n![avatar](/imgs/init.jpg)  \n3. 运行  \n`cnpm install`  \n`cnpm run dev`\n4. [查看结果](http://localhost:8080 \"http://localhost:8080\") \n\n","source":"_posts/Wechat-Public-Manage--1.md","raw":"---\ntitle: \"[Wechat-Public-Manage]1.前端VUE初始化\"\ntags:\n  - Wechat-Public-Manage\nid: 2019\ncategories:\n  - Wechat-Public-Manage\ndate: 2019-08-20 15:20:31\nauthor: \n  - linxu\n---\n\n## 准备\n1. 安装nodejs，选择LTS版本：[下载](https://nodejs.org/en/ \"nodejs\") \n2. 使用淘宝镜像  \n`npm install -g cnpm --registry=https://registry.npm.taobao.org` \n\n## 开始\n1. 安装vue-cli  \n`cnpm install vue-cli -g      //全局安装 vue-cli`  \n2. 创建项目  \n`vue init webpack wechat-public-manage-front`\n![avatar](/imgs/init.jpg)  \n3. 运行  \n`cnpm install`  \n`cnpm run dev`\n4. [查看结果](http://localhost:8080 \"http://localhost:8080\") \n\n","slug":"Wechat-Public-Manage--1","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7ty000fv8gpgaqp1j97","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ol>\n<li>安装nodejs，选择LTS版本：<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\" title=\"nodejs\">下载</a> </li>\n<li>使用淘宝镜像<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code> </li>\n</ol>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><ol>\n<li>安装vue-cli<br><code>cnpm install vue-cli -g      //全局安装 vue-cli</code>  </li>\n<li>创建项目<br><code>vue init webpack wechat-public-manage-front</code><br><img src=\"/imgs/init.jpg\" alt=\"avatar\">  </li>\n<li>运行<br><code>cnpm install</code><br><code>cnpm run dev</code></li>\n<li><a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\" title=\"http://localhost:8080\">查看结果</a> </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ol>\n<li>安装nodejs，选择LTS版本：<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\" title=\"nodejs\">下载</a> </li>\n<li>使用淘宝镜像<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code> </li>\n</ol>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><ol>\n<li>安装vue-cli<br><code>cnpm install vue-cli -g      //全局安装 vue-cli</code>  </li>\n<li>创建项目<br><code>vue init webpack wechat-public-manage-front</code><br><img src=\"/imgs/init.jpg\" alt=\"avatar\">  </li>\n<li>运行<br><code>cnpm install</code><br><code>cnpm run dev</code></li>\n<li><a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\" title=\"http://localhost:8080\">查看结果</a> </li>\n</ol>\n"},{"title":" CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群","id":"48","date":"2017-12-22T02:20:31.000Z","_content":"\n# CentOS联网设置 #  \n\t[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\n\tIntel Corporation 82545EM Gigabit Ethernet Controller (Copper)\n\tTYPE=Ethernet       #网卡类型\n\tDEVICE=eth0         #网卡接口名称\n\tONBOOT=yes          #系统启动时是否自动加载\n\tBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\n\tIPADDR=192.168.1.11      #网卡IP地址\n\tNETMASK=255.255.255.0    #网卡网络地址\n\tGATEWAY=192.168.1.1      #网卡网关地址\n\tDNS1=10.203.104.41       #网卡DNS地址\n\tHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\n\tBROADCAST=192.168.1.255  #网卡广播地址 \n\n\tPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。\n# CentOS安装jdk #\n使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装jdk。\n## 创建Java文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# mkdir java\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n## 将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下 ##\n\t[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n\t[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java\n## 设置环境变量 ##\n\t[root@localhost ~]# vi ~/.bashrc\n\t文件末尾加上以下几行：\n\texport JAVA_HOME=/usr/local/java/jdk1.8.0_144\n\texport CLASSPATH=.:${JAVA_HOME}/lib\n\texport PATH=${JAVA_HOME}/bin:$PATH\n\t使生效：\n\t[root@localhost jdk1.8.0_144]# source ~/.bashrc\n## 验证是否安装成功 ##\n\t[root@localhost jdk1.8.0_144]# java\n\t[root@localhost jdk1.8.0_144]# javac\n\t[root@localhost jdk1.8.0_144]# java -version\n# CentOS安装Nexus #\n将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装nexus。\n## 创建Nexus文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n\t[root@localhost local]# mkdir nexus\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src\n## 将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压 ##\n\t[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n\t[root@localhost ~]# cd /usr/local/nexus\n\t[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz\n## 启动nexus ##\n\t[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n\t[root@localhost bin]# ./nexus start\n\tWARNING: ************************************************************\n\tWARNING: Detected execution as \"root\" user.  This is NOT recommended!\n\tWARNING: ************************************************************\n\tStarting nexus\n\t[root@localhost bin]# ./nexus status\n\tWARNING: ************************************************************\n\tWARNING: Detected execution as \"root\" user.  This is NOT recommended!\n\tWARNING: ************************************************************\n\tnexus is running.\n## 验证是否启动成功 ##\n在浏览器中输入{ip}:8081(默认为8081端口)。此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。关闭防火墙命令如下：  \n\n\t[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n\t[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n\t[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n此时再通过浏览器进入即可。\n# CentOS安装Tomcat #\n将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装tomcat。\n## 创建Tomcat文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# mkdir tomcat\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat\n## 将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压 ##\n\t[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n\t[root@localhost ~]# cd /usr/local/tomcat/\n\t[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz \n## 启动Tomcat ##\n\t[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n\t[root@localhost bin]# ./startup.sh \n\tUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\n\tUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\n\tUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\n\tUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\n\tUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\n\tTomcat started.\n## 验证是否安装成功 ##\n用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。\n# CentOS安装RabbitMq #\n## 安装Erlang ##\n使用SecureCRT连接虚拟机，开始准备安装Erlang。  \n\n\t[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n\t[root@localhost bin]# yum install erlang\n\t安装  1 软件包 (+110 依赖软件包)\n\n\t总下载量：51 M\n\t安装大小：117 M\n\tIs this ok [y/d/N]: \n\t输入：y\n\t是否继续？[y/N]：\n\t输入: y\n\n## 安装RabbitMq ##\n将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装RabbitMq。  \n\n\t[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n\t[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n\t准备中...                          ################################# [100%]\n\t正在升级/安装...\n\t1:rabbitmq-server-3.3.5-1          ################################# [100%]\n\t[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\n\tThe following plugins have been enabled:\n\tmochiweb\n\twebmachine\n\trabbitmq_web_dispatch\n\tamqp_client\n\trabbitmq_management_agent\n\trabbitmq_management\n\tPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n\t[root@localhost ~]# chkconfig --level 3 rabbitmq-server on\n配置文件路径  \n\n\t[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n\t寻找行：PID_FILE=/var/run/rabbitmq/pid\n\t在以上内容之下，插入行\n\texport RABBITMQ_MNESIA=/rabbitmq/mnesia\n配置访问权限  \n\n\t[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins\n启动RabbitMq  \n\n\t[root@localhost ~]# service rabbitmq-server start\n\t[root@localhost ~]# rabbitmqctl add_user admin admin\n\t[root@localhost ~]# rabbitmqctl set_user_tags admin administrator\n验证RabbitMq\n\t用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\n\n## 配置RabbitMq集群 ##\n修改hosts文件  \n\n\tvi /etc/hosts\n\t将两台虚拟机的Ip配置进去：\n\t192.168.43.69 test1\n\t192.168.43.216 test2\n\t重启两台虚拟机reboot\n启动第一台虚拟机的Rabbitmq:  \n\n    service rabbitmq-server start\n    将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n    更改.erlang.cookie的访问权限为400\n    chmod 400 /var/lib/rabbitmq/.erlang.cookie\n    更改.erlang.cookie的文件所有人为rabbitmq\n    chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n    启动第二台虚拟机的Rabbitmq：\n    service rabbitmq-server start\n    rabbitmqctl stop_app\n    rabbitmqctl join_cluster rabbit@test1\n    rabbitmqctl start_app\n验证集群是否成功  \n用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\nPS：cookie文件会有两处都存在，root目录下cookie可以直接删除。如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。\n\n软件包地址：[http://download.csdn.net/download/anonymous_l/10021072](http://download.csdn.net/download/anonymous_l/10021072)","source":"_posts/centos-mq.md","raw":"---\ntitle: \" CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群\"\ntags:\n  - CentOS\nid: 48\ncategories:\n  - CentOS\ndate: 2017-12-22 10:20:31\n---\n\n# CentOS联网设置 #  \n\t[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\n\tIntel Corporation 82545EM Gigabit Ethernet Controller (Copper)\n\tTYPE=Ethernet       #网卡类型\n\tDEVICE=eth0         #网卡接口名称\n\tONBOOT=yes          #系统启动时是否自动加载\n\tBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\n\tIPADDR=192.168.1.11      #网卡IP地址\n\tNETMASK=255.255.255.0    #网卡网络地址\n\tGATEWAY=192.168.1.1      #网卡网关地址\n\tDNS1=10.203.104.41       #网卡DNS地址\n\tHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\n\tBROADCAST=192.168.1.255  #网卡广播地址 \n\n\tPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。\n# CentOS安装jdk #\n使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装jdk。\n## 创建Java文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# mkdir java\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n## 将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下 ##\n\t[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n\t[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java\n## 设置环境变量 ##\n\t[root@localhost ~]# vi ~/.bashrc\n\t文件末尾加上以下几行：\n\texport JAVA_HOME=/usr/local/java/jdk1.8.0_144\n\texport CLASSPATH=.:${JAVA_HOME}/lib\n\texport PATH=${JAVA_HOME}/bin:$PATH\n\t使生效：\n\t[root@localhost jdk1.8.0_144]# source ~/.bashrc\n## 验证是否安装成功 ##\n\t[root@localhost jdk1.8.0_144]# java\n\t[root@localhost jdk1.8.0_144]# javac\n\t[root@localhost jdk1.8.0_144]# java -version\n# CentOS安装Nexus #\n将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装nexus。\n## 创建Nexus文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n\t[root@localhost local]# mkdir nexus\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src\n## 将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压 ##\n\t[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n\t[root@localhost ~]# cd /usr/local/nexus\n\t[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz\n## 启动nexus ##\n\t[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n\t[root@localhost bin]# ./nexus start\n\tWARNING: ************************************************************\n\tWARNING: Detected execution as \"root\" user.  This is NOT recommended!\n\tWARNING: ************************************************************\n\tStarting nexus\n\t[root@localhost bin]# ./nexus status\n\tWARNING: ************************************************************\n\tWARNING: Detected execution as \"root\" user.  This is NOT recommended!\n\tWARNING: ************************************************************\n\tnexus is running.\n## 验证是否启动成功 ##\n在浏览器中输入{ip}:8081(默认为8081端口)。此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。关闭防火墙命令如下：  \n\n\t[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n\t[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n\t[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n此时再通过浏览器进入即可。\n# CentOS安装Tomcat #\n将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装tomcat。\n## 创建Tomcat文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# mkdir tomcat\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat\n## 将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压 ##\n\t[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n\t[root@localhost ~]# cd /usr/local/tomcat/\n\t[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz \n## 启动Tomcat ##\n\t[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n\t[root@localhost bin]# ./startup.sh \n\tUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\n\tUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\n\tUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\n\tUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\n\tUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\n\tTomcat started.\n## 验证是否安装成功 ##\n用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。\n# CentOS安装RabbitMq #\n## 安装Erlang ##\n使用SecureCRT连接虚拟机，开始准备安装Erlang。  \n\n\t[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n\t[root@localhost bin]# yum install erlang\n\t安装  1 软件包 (+110 依赖软件包)\n\n\t总下载量：51 M\n\t安装大小：117 M\n\tIs this ok [y/d/N]: \n\t输入：y\n\t是否继续？[y/N]：\n\t输入: y\n\n## 安装RabbitMq ##\n将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装RabbitMq。  \n\n\t[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n\t[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n\t准备中...                          ################################# [100%]\n\t正在升级/安装...\n\t1:rabbitmq-server-3.3.5-1          ################################# [100%]\n\t[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\n\tThe following plugins have been enabled:\n\tmochiweb\n\twebmachine\n\trabbitmq_web_dispatch\n\tamqp_client\n\trabbitmq_management_agent\n\trabbitmq_management\n\tPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n\t[root@localhost ~]# chkconfig --level 3 rabbitmq-server on\n配置文件路径  \n\n\t[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n\t寻找行：PID_FILE=/var/run/rabbitmq/pid\n\t在以上内容之下，插入行\n\texport RABBITMQ_MNESIA=/rabbitmq/mnesia\n配置访问权限  \n\n\t[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins\n启动RabbitMq  \n\n\t[root@localhost ~]# service rabbitmq-server start\n\t[root@localhost ~]# rabbitmqctl add_user admin admin\n\t[root@localhost ~]# rabbitmqctl set_user_tags admin administrator\n验证RabbitMq\n\t用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\n\n## 配置RabbitMq集群 ##\n修改hosts文件  \n\n\tvi /etc/hosts\n\t将两台虚拟机的Ip配置进去：\n\t192.168.43.69 test1\n\t192.168.43.216 test2\n\t重启两台虚拟机reboot\n启动第一台虚拟机的Rabbitmq:  \n\n    service rabbitmq-server start\n    将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n    更改.erlang.cookie的访问权限为400\n    chmod 400 /var/lib/rabbitmq/.erlang.cookie\n    更改.erlang.cookie的文件所有人为rabbitmq\n    chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n    启动第二台虚拟机的Rabbitmq：\n    service rabbitmq-server start\n    rabbitmqctl stop_app\n    rabbitmqctl join_cluster rabbit@test1\n    rabbitmqctl start_app\n验证集群是否成功  \n用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\nPS：cookie文件会有两处都存在，root目录下cookie可以直接删除。如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。\n\n软件包地址：[http://download.csdn.net/download/anonymous_l/10021072](http://download.csdn.net/download/anonymous_l/10021072)","slug":"centos-mq","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7u3000gv8gpgx2gcp29","content":"<h1 id=\"CentOS联网设置\"><a href=\"#CentOS联网设置\" class=\"headerlink\" title=\"CentOS联网设置\"></a>CentOS联网设置</h1><pre><code>[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\nIntel Corporation 82545EM Gigabit Ethernet Controller (Copper)\nTYPE=Ethernet       #网卡类型\nDEVICE=eth0         #网卡接口名称\nONBOOT=yes          #系统启动时是否自动加载\nBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\nIPADDR=192.168.1.11      #网卡IP地址\nNETMASK=255.255.255.0    #网卡网络地址\nGATEWAY=192.168.1.1      #网卡网关地址\nDNS1=10.203.104.41       #网卡DNS地址\nHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\nBROADCAST=192.168.1.255  #网卡广播地址 \n\nPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。</code></pre><h1 id=\"CentOS安装jdk\"><a href=\"#CentOS安装jdk\" class=\"headerlink\" title=\"CentOS安装jdk\"></a>CentOS安装jdk</h1><p>使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装jdk。</p>\n<h2 id=\"创建Java文件夹\"><a href=\"#创建Java文件夹\" class=\"headerlink\" title=\"创建Java文件夹\"></a>创建Java文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir java\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src</code></pre><h2 id=\"将jdk-8u144-linux-x64-tar-gz解压，再移到java文件夹下\"><a href=\"#将jdk-8u144-linux-x64-tar-gz解压，再移到java文件夹下\" class=\"headerlink\" title=\"将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下\"></a>将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下</h2><pre><code>[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java</code></pre><h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><pre><code>[root@localhost ~]# vi ~/.bashrc\n文件末尾加上以下几行：\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_144\nexport CLASSPATH=.:${JAVA_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n使生效：\n[root@localhost jdk1.8.0_144]# source ~/.bashrc</code></pre><h2 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><pre><code>[root@localhost jdk1.8.0_144]# java\n[root@localhost jdk1.8.0_144]# javac\n[root@localhost jdk1.8.0_144]# java -version</code></pre><h1 id=\"CentOS安装Nexus\"><a href=\"#CentOS安装Nexus\" class=\"headerlink\" title=\"CentOS安装Nexus\"></a>CentOS安装Nexus</h1><p>将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装nexus。</p>\n<h2 id=\"创建Nexus文件夹\"><a href=\"#创建Nexus文件夹\" class=\"headerlink\" title=\"创建Nexus文件夹\"></a>创建Nexus文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n[root@localhost local]# mkdir nexus\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src</code></pre><h2 id=\"将nexus-3-5-2-01-unix-tar-gz移到nexus文件夹下再解压\"><a href=\"#将nexus-3-5-2-01-unix-tar-gz移到nexus文件夹下再解压\" class=\"headerlink\" title=\"将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压\"></a>将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压</h2><pre><code>[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n[root@localhost ~]# cd /usr/local/nexus\n[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz</code></pre><h2 id=\"启动nexus\"><a href=\"#启动nexus\" class=\"headerlink\" title=\"启动nexus\"></a>启动nexus</h2><pre><code>[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n[root@localhost bin]# ./nexus start\nWARNING: ************************************************************\nWARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!\nWARNING: ************************************************************\nStarting nexus\n[root@localhost bin]# ./nexus status\nWARNING: ************************************************************\nWARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!\nWARNING: ************************************************************\nnexus is running.</code></pre><h2 id=\"验证是否启动成功\"><a href=\"#验证是否启动成功\" class=\"headerlink\" title=\"验证是否启动成功\"></a>验证是否启动成功</h2><p>在浏览器中输入{ip}:8081(默认为8081端口)。此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。关闭防火墙命令如下：  </p>\n<pre><code>[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</code></pre><p>此时再通过浏览器进入即可。</p>\n<h1 id=\"CentOS安装Tomcat\"><a href=\"#CentOS安装Tomcat\" class=\"headerlink\" title=\"CentOS安装Tomcat\"></a>CentOS安装Tomcat</h1><p>将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装tomcat。</p>\n<h2 id=\"创建Tomcat文件夹\"><a href=\"#创建Tomcat文件夹\" class=\"headerlink\" title=\"创建Tomcat文件夹\"></a>创建Tomcat文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir tomcat\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat</code></pre><h2 id=\"将apache-tomcat-8-5-23-tar-gz移到tomcat文件夹下再解压\"><a href=\"#将apache-tomcat-8-5-23-tar-gz移到tomcat文件夹下再解压\" class=\"headerlink\" title=\"将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压\"></a>将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压</h2><pre><code>[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n[root@localhost ~]# cd /usr/local/tomcat/\n[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz </code></pre><h2 id=\"启动Tomcat\"><a href=\"#启动Tomcat\" class=\"headerlink\" title=\"启动Tomcat\"></a>启动Tomcat</h2><pre><code>[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n[root@localhost bin]# ./startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\nUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\nUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\nTomcat started.</code></pre><h2 id=\"验证是否安装成功-1\"><a href=\"#验证是否安装成功-1\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><p>用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。</p>\n<h1 id=\"CentOS安装RabbitMq\"><a href=\"#CentOS安装RabbitMq\" class=\"headerlink\" title=\"CentOS安装RabbitMq\"></a>CentOS安装RabbitMq</h1><h2 id=\"安装Erlang\"><a href=\"#安装Erlang\" class=\"headerlink\" title=\"安装Erlang\"></a>安装Erlang</h2><p>使用SecureCRT连接虚拟机，开始准备安装Erlang。  </p>\n<pre><code>[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n[root@localhost bin]# yum install erlang\n安装  1 软件包 (+110 依赖软件包)\n\n总下载量：51 M\n安装大小：117 M\nIs this ok [y/d/N]: \n输入：y\n是否继续？[y/N]：\n输入: y</code></pre><h2 id=\"安装RabbitMq\"><a href=\"#安装RabbitMq\" class=\"headerlink\" title=\"安装RabbitMq\"></a>安装RabbitMq</h2><p>将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装RabbitMq。  </p>\n<pre><code>[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n准备中...                          ################################# [100%]\n正在升级/安装...\n1:rabbitmq-server-3.3.5-1          ################################# [100%]\n[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\nThe following plugins have been enabled:\nmochiweb\nwebmachine\nrabbitmq_web_dispatch\namqp_client\nrabbitmq_management_agent\nrabbitmq_management\nPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n[root@localhost ~]# chkconfig --level 3 rabbitmq-server on</code></pre><p>配置文件路径  </p>\n<pre><code>[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n寻找行：PID_FILE=/var/run/rabbitmq/pid\n在以上内容之下，插入行\nexport RABBITMQ_MNESIA=/rabbitmq/mnesia</code></pre><p>配置访问权限  </p>\n<pre><code>[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins</code></pre><p>启动RabbitMq  </p>\n<pre><code>[root@localhost ~]# service rabbitmq-server start\n[root@localhost ~]# rabbitmqctl add_user admin admin\n[root@localhost ~]# rabbitmqctl set_user_tags admin administrator</code></pre><p>验证RabbitMq<br>    用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)</p>\n<h2 id=\"配置RabbitMq集群\"><a href=\"#配置RabbitMq集群\" class=\"headerlink\" title=\"配置RabbitMq集群\"></a>配置RabbitMq集群</h2><p>修改hosts文件  </p>\n<pre><code>vi /etc/hosts\n将两台虚拟机的Ip配置进去：\n192.168.43.69 test1\n192.168.43.216 test2\n重启两台虚拟机reboot</code></pre><p>启动第一台虚拟机的Rabbitmq:  </p>\n<pre><code>service rabbitmq-server start\n将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n更改.erlang.cookie的访问权限为400\nchmod 400 /var/lib/rabbitmq/.erlang.cookie\n更改.erlang.cookie的文件所有人为rabbitmq\nchown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n启动第二台虚拟机的Rabbitmq：\nservice rabbitmq-server start\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@test1\nrabbitmqctl start_app</code></pre><p>验证集群是否成功<br>用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)<br>PS：cookie文件会有两处都存在，root目录下cookie可以直接删除。如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。</p>\n<p>软件包地址：<a href=\"http://download.csdn.net/download/anonymous_l/10021072\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/download/anonymous_l/10021072</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CentOS联网设置\"><a href=\"#CentOS联网设置\" class=\"headerlink\" title=\"CentOS联网设置\"></a>CentOS联网设置</h1><pre><code>[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\nIntel Corporation 82545EM Gigabit Ethernet Controller (Copper)\nTYPE=Ethernet       #网卡类型\nDEVICE=eth0         #网卡接口名称\nONBOOT=yes          #系统启动时是否自动加载\nBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\nIPADDR=192.168.1.11      #网卡IP地址\nNETMASK=255.255.255.0    #网卡网络地址\nGATEWAY=192.168.1.1      #网卡网关地址\nDNS1=10.203.104.41       #网卡DNS地址\nHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\nBROADCAST=192.168.1.255  #网卡广播地址 \n\nPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。</code></pre><h1 id=\"CentOS安装jdk\"><a href=\"#CentOS安装jdk\" class=\"headerlink\" title=\"CentOS安装jdk\"></a>CentOS安装jdk</h1><p>使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装jdk。</p>\n<h2 id=\"创建Java文件夹\"><a href=\"#创建Java文件夹\" class=\"headerlink\" title=\"创建Java文件夹\"></a>创建Java文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir java\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src</code></pre><h2 id=\"将jdk-8u144-linux-x64-tar-gz解压，再移到java文件夹下\"><a href=\"#将jdk-8u144-linux-x64-tar-gz解压，再移到java文件夹下\" class=\"headerlink\" title=\"将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下\"></a>将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下</h2><pre><code>[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java</code></pre><h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><pre><code>[root@localhost ~]# vi ~/.bashrc\n文件末尾加上以下几行：\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_144\nexport CLASSPATH=.:${JAVA_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n使生效：\n[root@localhost jdk1.8.0_144]# source ~/.bashrc</code></pre><h2 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><pre><code>[root@localhost jdk1.8.0_144]# java\n[root@localhost jdk1.8.0_144]# javac\n[root@localhost jdk1.8.0_144]# java -version</code></pre><h1 id=\"CentOS安装Nexus\"><a href=\"#CentOS安装Nexus\" class=\"headerlink\" title=\"CentOS安装Nexus\"></a>CentOS安装Nexus</h1><p>将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装nexus。</p>\n<h2 id=\"创建Nexus文件夹\"><a href=\"#创建Nexus文件夹\" class=\"headerlink\" title=\"创建Nexus文件夹\"></a>创建Nexus文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n[root@localhost local]# mkdir nexus\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src</code></pre><h2 id=\"将nexus-3-5-2-01-unix-tar-gz移到nexus文件夹下再解压\"><a href=\"#将nexus-3-5-2-01-unix-tar-gz移到nexus文件夹下再解压\" class=\"headerlink\" title=\"将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压\"></a>将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压</h2><pre><code>[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n[root@localhost ~]# cd /usr/local/nexus\n[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz</code></pre><h2 id=\"启动nexus\"><a href=\"#启动nexus\" class=\"headerlink\" title=\"启动nexus\"></a>启动nexus</h2><pre><code>[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n[root@localhost bin]# ./nexus start\nWARNING: ************************************************************\nWARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!\nWARNING: ************************************************************\nStarting nexus\n[root@localhost bin]# ./nexus status\nWARNING: ************************************************************\nWARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!\nWARNING: ************************************************************\nnexus is running.</code></pre><h2 id=\"验证是否启动成功\"><a href=\"#验证是否启动成功\" class=\"headerlink\" title=\"验证是否启动成功\"></a>验证是否启动成功</h2><p>在浏览器中输入{ip}:8081(默认为8081端口)。此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。关闭防火墙命令如下：  </p>\n<pre><code>[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</code></pre><p>此时再通过浏览器进入即可。</p>\n<h1 id=\"CentOS安装Tomcat\"><a href=\"#CentOS安装Tomcat\" class=\"headerlink\" title=\"CentOS安装Tomcat\"></a>CentOS安装Tomcat</h1><p>将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装tomcat。</p>\n<h2 id=\"创建Tomcat文件夹\"><a href=\"#创建Tomcat文件夹\" class=\"headerlink\" title=\"创建Tomcat文件夹\"></a>创建Tomcat文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir tomcat\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat</code></pre><h2 id=\"将apache-tomcat-8-5-23-tar-gz移到tomcat文件夹下再解压\"><a href=\"#将apache-tomcat-8-5-23-tar-gz移到tomcat文件夹下再解压\" class=\"headerlink\" title=\"将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压\"></a>将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压</h2><pre><code>[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n[root@localhost ~]# cd /usr/local/tomcat/\n[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz </code></pre><h2 id=\"启动Tomcat\"><a href=\"#启动Tomcat\" class=\"headerlink\" title=\"启动Tomcat\"></a>启动Tomcat</h2><pre><code>[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n[root@localhost bin]# ./startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\nUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\nUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\nTomcat started.</code></pre><h2 id=\"验证是否安装成功-1\"><a href=\"#验证是否安装成功-1\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><p>用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。</p>\n<h1 id=\"CentOS安装RabbitMq\"><a href=\"#CentOS安装RabbitMq\" class=\"headerlink\" title=\"CentOS安装RabbitMq\"></a>CentOS安装RabbitMq</h1><h2 id=\"安装Erlang\"><a href=\"#安装Erlang\" class=\"headerlink\" title=\"安装Erlang\"></a>安装Erlang</h2><p>使用SecureCRT连接虚拟机，开始准备安装Erlang。  </p>\n<pre><code>[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n[root@localhost bin]# yum install erlang\n安装  1 软件包 (+110 依赖软件包)\n\n总下载量：51 M\n安装大小：117 M\nIs this ok [y/d/N]: \n输入：y\n是否继续？[y/N]：\n输入: y</code></pre><h2 id=\"安装RabbitMq\"><a href=\"#安装RabbitMq\" class=\"headerlink\" title=\"安装RabbitMq\"></a>安装RabbitMq</h2><p>将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装RabbitMq。  </p>\n<pre><code>[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n准备中...                          ################################# [100%]\n正在升级/安装...\n1:rabbitmq-server-3.3.5-1          ################################# [100%]\n[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\nThe following plugins have been enabled:\nmochiweb\nwebmachine\nrabbitmq_web_dispatch\namqp_client\nrabbitmq_management_agent\nrabbitmq_management\nPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n[root@localhost ~]# chkconfig --level 3 rabbitmq-server on</code></pre><p>配置文件路径  </p>\n<pre><code>[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n寻找行：PID_FILE=/var/run/rabbitmq/pid\n在以上内容之下，插入行\nexport RABBITMQ_MNESIA=/rabbitmq/mnesia</code></pre><p>配置访问权限  </p>\n<pre><code>[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins</code></pre><p>启动RabbitMq  </p>\n<pre><code>[root@localhost ~]# service rabbitmq-server start\n[root@localhost ~]# rabbitmqctl add_user admin admin\n[root@localhost ~]# rabbitmqctl set_user_tags admin administrator</code></pre><p>验证RabbitMq<br>    用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)</p>\n<h2 id=\"配置RabbitMq集群\"><a href=\"#配置RabbitMq集群\" class=\"headerlink\" title=\"配置RabbitMq集群\"></a>配置RabbitMq集群</h2><p>修改hosts文件  </p>\n<pre><code>vi /etc/hosts\n将两台虚拟机的Ip配置进去：\n192.168.43.69 test1\n192.168.43.216 test2\n重启两台虚拟机reboot</code></pre><p>启动第一台虚拟机的Rabbitmq:  </p>\n<pre><code>service rabbitmq-server start\n将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n更改.erlang.cookie的访问权限为400\nchmod 400 /var/lib/rabbitmq/.erlang.cookie\n更改.erlang.cookie的文件所有人为rabbitmq\nchown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n启动第二台虚拟机的Rabbitmq：\nservice rabbitmq-server start\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@test1\nrabbitmqctl start_app</code></pre><p>验证集群是否成功<br>用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)<br>PS：cookie文件会有两处都存在，root目录下cookie可以直接删除。如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。</p>\n<p>软件包地址：<a href=\"http://download.csdn.net/download/anonymous_l/10021072\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/download/anonymous_l/10021072</a></p>\n"},{"title":" centos服务器安装mysql","id":"75","date":"2018-01-12T08:14:23.000Z","_content":"\n# 安装mysql #\n\t[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n\t[root@localhost ~]yum install mysql #安装客户端\n\t[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n\t[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n\t[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n\t[root@localhost ~]yum install mysql-community-server #安装server\n\t[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装</pre>\n# 添加权限 #\n服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限  \n\n\t[root@localhost ~]grant all on *.* to test@'%' identified by '123456';  \n\t*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n\t%，表示所有ip\n\tgrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’\n# 删除权限 #\n\t[root@localhost ~]grant all on *.* to test@'%' identified by '123456';   \n\t*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n\t%，表示所有ip\n\trevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址</pre>\n","source":"_posts/centos-mysql.md","raw":"---\ntitle: \" centos服务器安装mysql\"\nid: 75\ncategories:\n  - CentOS\ndate: 2018-01-12 16:14:23\ntags:\n---\n\n# 安装mysql #\n\t[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n\t[root@localhost ~]yum install mysql #安装客户端\n\t[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n\t[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n\t[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n\t[root@localhost ~]yum install mysql-community-server #安装server\n\t[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装</pre>\n# 添加权限 #\n服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限  \n\n\t[root@localhost ~]grant all on *.* to test@'%' identified by '123456';  \n\t*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n\t%，表示所有ip\n\tgrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’\n# 删除权限 #\n\t[root@localhost ~]grant all on *.* to test@'%' identified by '123456';   \n\t*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n\t%，表示所有ip\n\trevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址</pre>\n","slug":"centos-mysql","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7u5000kv8gpc0s3g1fi","content":"<h1 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h1><pre><code>[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n[root@localhost ~]yum install mysql #安装客户端\n[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]yum install mysql-community-server #安装server\n[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装&lt;/pre&gt;</code></pre><h1 id=\"添加权限\"><a href=\"#添加权限\" class=\"headerlink\" title=\"添加权限\"></a>添加权限</h1><p>服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限  </p>\n<pre><code>[root@localhost ~]grant all on *.* to test@&apos;%&apos; identified by &apos;123456&apos;;  \n*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n%，表示所有ip\ngrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’</code></pre><h1 id=\"删除权限\"><a href=\"#删除权限\" class=\"headerlink\" title=\"删除权限\"></a>删除权限</h1><pre><code>[root@localhost ~]grant all on *.* to test@&apos;%&apos; identified by &apos;123456&apos;;   \n*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n%，表示所有ip\nrevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址&lt;/pre&gt;</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h1><pre><code>[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n[root@localhost ~]yum install mysql #安装客户端\n[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]yum install mysql-community-server #安装server\n[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装&lt;/pre&gt;</code></pre><h1 id=\"添加权限\"><a href=\"#添加权限\" class=\"headerlink\" title=\"添加权限\"></a>添加权限</h1><p>服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限  </p>\n<pre><code>[root@localhost ~]grant all on *.* to test@&apos;%&apos; identified by &apos;123456&apos;;  \n*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n%，表示所有ip\ngrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’</code></pre><h1 id=\"删除权限\"><a href=\"#删除权限\" class=\"headerlink\" title=\"删除权限\"></a>删除权限</h1><pre><code>[root@localhost ~]grant all on *.* to test@&apos;%&apos; identified by &apos;123456&apos;;   \n*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n%，表示所有ip\nrevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址&lt;/pre&gt;</code></pre>"},{"title":"[数据结构]1.集合","id":"2019","date":"2019-08-27T07:20:00.000Z","author":["linxu"],"_content":"\n\n## Map\n* HashMap  \n基于数组+链表，默认大于8使用红黑树，小于6改为链表，默认容量是16，负载因子默认为0.75，HashMap每次put操作是都会检查一遍 size（当前容量）>initailCapacity*loadFactor 是否成立。如果不成立则HashMap扩容为以前的两倍，HashMap中计算Hash值封装为：(key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16)，原因是hashCode是32位的，length 绝大多数情况小于2的16次方。所以始终是hashcode 的低16位参与运算，这样做是使高16位也参与运算，会让得到的下标更加散列。\n* LinkHashMap\n继承于HashMap，是基于HashMap和双向链表来实现的。LinkedHashMap有序，可分为插入顺序和访问顺序两种（默认插入顺序，可在构造方法中指定），如果是访问顺序，那put和get操作已存在的Entry时，都会把Entry移动到双向链表的表尾(其实是先删除再插入)。\n* Hashtable  \n线程安全，基于数组和链表，集成自Dictionary（此类已过时），Hashtable基本上被弃用，由ConcurrentHashMap替代\n* ConcurrentHashMap  \n分段锁实现（获取size等时需要全部加锁并按顺序释放，否则可能死锁），包含一个Segment数组，Segment的结构和HashMap类似，数据结构为数组+链表+红黑树。ConcurrentHashMap中还包含一个重要属性sizeCtl，其是一个控制标识符，不同的值代表不同的意思：其为0时，表示hash表还未初始化，而为正数时这个数值表示初始化或下一次扩容的大小，相当于一个阈值；即如果hash表的实际大小>=sizeCtl，则进行扩容，默认情况下其是当前ConcurrentHashMap容量的0.75倍；而如果sizeCtl为-1，表示正在进行初始化操作；而为-N时，则表示有N-1个线程正在进行扩容。ConcurrentHashMap和Hashtable都是支持并发的，这样会有一个问题，当你通过get(k)获取对应的value时，如果获取到的是null时，你无法判断，它是put（k,v）的时候value为null，还是这个key从来没有做过映射。HashMap是非并发的，可以通过contains(key)来做这个判断。而支持并发的Map在调用m.contains（key）和m.get(key),m可能已经不同了。注意jdk1.8后已经放弃了分段锁，采用读不加锁，通过volatile关键字保证，写通过synchronized与cas进行操作。\n\n## List\n* ArrayList \n基于数组实现，存储在连续的内存空间上，查询很快，但是中间部分的插入和删除很慢。默认数据长度为10，当第一个元素添加时候初始化（如果使用传参构造方法会直接初始化），每次扩容为增加50%(size >> 1)\n* LinkedList \n基于双向链表实现，查询相对较慢(需移动指针)，删除和添加比较占优势。\n* Vector\n底层是基于数组实现，线程安全，默认长度为10，直接初始化，可以设置扩容增量，如果未设置，每次为增加原来的一倍。Vector和ArrayList最大容量都为（Integer.MAX_VALUE - 8），是因为一些虚拟机在数组中保留一些头字，会导致OOM。\n\n## Set\n* HashSet\nHashMap实现，key为存入的元素，value为一个static的空对象。判断元素是否重复为 由于HashMap中的key值不能修改，所以HashSet不能进行修改元素的操作。\n* LinkedHashSet\n继承自HashSet，基于LinkedHashMap，继承了HashSet的全部特性，元素不重复，快速查找，快速插入，并且新增了一个重要特性，那就是有序。\n* TreeSet  \nTreeSet是基于TreeMap实现的，TreeSet的元素支持2种排序方式：自然排序或者根据提供的Comparator进行排序。TreeSet可以直接对其进行存储，如String，Integer等,因为这些类已经实现了Comparable接口，当元素是对象时需要手动实现Comparable接口，覆盖其compareTo方法。\n\n## Queue\n### 非阻塞队列\n> 非阻塞队列在添加（移除）时如果队列满（空）时会返回异常或者直接返回null，方法未做同步措施，采用CAS机制  \n\n非阻塞队列有：  \n\n* PriorityQueue  \n类实质上维护了一个有序列表。加入到 Queue 中的元素根据它们的天然排序（通过其 java.util.Comparable 实现）或者根据传递给构造函数的 java.util.Comparator 实现来定位  \n* ConcurrentLinkedQueue  \nConcurrentLinkedQueue 是基于链接节点的、线程安全的队列。并发访问不需要同步。因为它在队列的尾部添加元素并从头部删除它们，所以只要不需要知道队列的大小，ConcurrentLinkedQueue 对公共集合的共享访问就可以工作得很好，收集关于队列大小的信息会很慢，需要遍历队列。  \n \n非阻塞队列提供的主要方法如下：  \n\n* add(E e)：将元素e插入到队列末尾，如果插入成功，则返回true；如果插入失败（即队列已满），则会抛出异常；  \n* remove()：移除队首元素，若移除成功，则返回true；如果移除失败（队列为空），则会抛出异常；  \n* offer(E e)：将元素e插入到队列末尾，如果插入成功，则返回true；如果插入失败（即队列已满），则返回false；  \n* poll()：移除并获取队首元素，若成功，则返回队首元素；否则返回null；  \n* peek()：获取队首元素，若成功，则返回队首元素；否则返回null  \n\n对于非阻塞队列，一般情况下建议使用offer、poll和peek三个方法，不建议使用add和remove方法。因为使用offer、poll和peek三个方法可以通过返回值判断操作成功与否，而使用add和remove方法却不能达到这样的效果。注意，非阻塞队列中的方法都没有进行同步措施。\n\n### 阻塞队列\n> 阻塞队列在添加（移除）时如果队列满（空）时会等待（或超时退出），方法做同步措施，使用 ReentrantLock 锁\n\n阻塞队列有：\n\n* ArrayBlockingQueue  \nArrayListBlockingQueue是有界的，是一个有界缓存的等待队列。基于数组的阻塞队列，同LinkedBlockingQueue类似，内部维持着一个定长数据缓冲队列（该队列由数组构成）。ArrayBlockingQueue内部保存着两个整形变量标识着队列的头部和尾部在数组中的位置。生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此两者无法真正并行运行，这点不同于LinkedBlockingQueue；ArrayBlockingQueue在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。\n* LinkedBlockingQueue  \n可以设定大小，可以理解为由链表结构组成的一个缓存的有界等待队列。生产者端和消费者端分别采用了独立的锁来控制数据同步。\n* PriorityBlockingQueue  \n一个支持优先级排序的无界阻塞队列。元素按优先级顺序被移除，该队列也没有上限，注意的是有序的队列需要进入的元素具有比较能力。\n* DelayQueue  \n一个使用优先级队列实现的无界阻塞队列。是一个存放 Delayed 元素的无界阻塞队列，只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的 Delayed 元素。如果延迟都还没有期满，则队列没有头部，并且poll将返回null。当一个元素的 getDelay(TimeUnit.NANOSECONDS) 方法返回一个小于或等于零的值时，则出现期满，poll就以移除这个元素了。此队列不允许使用 null 元素。\n* SynchronousQueue  \n一个不存储元素的阻塞队列。是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。没有存储功能，因此put和take会一直阻塞，直到有另一个线程已经准备好参与到交付过程中。\n* LinkedTransferQueue  \n一个由链表结构组成的无界阻塞队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法。LinkedTransferQueue采用一种预占模式。意思就是消费者线程取元素时，如果队列不为空，则直接取走数据，若队列为空，那就生成一个节点（节点元素为null）入队，然后消费者线程被等待在这个节点上，后面生产者线程入队时发现有一个元素为null的节点，生产者线程就不入队了，直接就将元素填充到该节点，并唤醒该节点等待的线程，被唤醒的消费者线程取走元素，从调用的方法返回。我们称这种节点操作为“匹配”方式。\n* LinkedBlockingDeque  \n一个由链表结构组成的双向阻塞队列。即可以从队列的两端插入和移除元素。双向队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。 LinkedBlockingDeque多了addFirst、addLast、peekFirst、peekLast等方法，以first结尾的方法，表示插入、获取获移除双端队列的第一个元素。以last结尾的方法，表示插入、获取获移除双端队列的最后一个元素。 \n\n \n阻塞队列提供的主要方法如下：  \n\n* add：增加一个元索，如果队列已满，则抛出一个IIIegaISlabEepeplian异常  \n* remove：移除并返回队列头部的元素，如果队列为空，则抛出一个NoSuchElementException异常  \n* element：返回队列头部的元素，如果队列为空，则抛出一个NoSuchElementException异常  \n* offer：添加一个元素并返回true，如果队列已满，则返回false  \n* poll：移除并返问队列头部的元素，如果队列为空，则返回null  \n* peek：返回队列头部的元素，如果队列为空，则返回null  \n* put：添加一个元素，如果队列满，则阻塞  \n* take：移除并返回队列头部的元素，如果队列为空，则阻塞  \n\n\n\n> 参考博客：  \nhttps://www.cnblogs.com/tiancai/p/9935770.html  \nhttps://www.cnblogs.com/lemon-flm/p/7877898.html","source":"_posts/data-structure-1.md","raw":"---\ntitle: \"[数据结构]1.集合\"\ntags:\n  - 数据结构\nid: 2019\ncategories:\n  - 数据结构\ndate: 2019-08-27 15:20:00\nauthor: \n  - linxu\n---\n\n\n## Map\n* HashMap  \n基于数组+链表，默认大于8使用红黑树，小于6改为链表，默认容量是16，负载因子默认为0.75，HashMap每次put操作是都会检查一遍 size（当前容量）>initailCapacity*loadFactor 是否成立。如果不成立则HashMap扩容为以前的两倍，HashMap中计算Hash值封装为：(key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16)，原因是hashCode是32位的，length 绝大多数情况小于2的16次方。所以始终是hashcode 的低16位参与运算，这样做是使高16位也参与运算，会让得到的下标更加散列。\n* LinkHashMap\n继承于HashMap，是基于HashMap和双向链表来实现的。LinkedHashMap有序，可分为插入顺序和访问顺序两种（默认插入顺序，可在构造方法中指定），如果是访问顺序，那put和get操作已存在的Entry时，都会把Entry移动到双向链表的表尾(其实是先删除再插入)。\n* Hashtable  \n线程安全，基于数组和链表，集成自Dictionary（此类已过时），Hashtable基本上被弃用，由ConcurrentHashMap替代\n* ConcurrentHashMap  \n分段锁实现（获取size等时需要全部加锁并按顺序释放，否则可能死锁），包含一个Segment数组，Segment的结构和HashMap类似，数据结构为数组+链表+红黑树。ConcurrentHashMap中还包含一个重要属性sizeCtl，其是一个控制标识符，不同的值代表不同的意思：其为0时，表示hash表还未初始化，而为正数时这个数值表示初始化或下一次扩容的大小，相当于一个阈值；即如果hash表的实际大小>=sizeCtl，则进行扩容，默认情况下其是当前ConcurrentHashMap容量的0.75倍；而如果sizeCtl为-1，表示正在进行初始化操作；而为-N时，则表示有N-1个线程正在进行扩容。ConcurrentHashMap和Hashtable都是支持并发的，这样会有一个问题，当你通过get(k)获取对应的value时，如果获取到的是null时，你无法判断，它是put（k,v）的时候value为null，还是这个key从来没有做过映射。HashMap是非并发的，可以通过contains(key)来做这个判断。而支持并发的Map在调用m.contains（key）和m.get(key),m可能已经不同了。注意jdk1.8后已经放弃了分段锁，采用读不加锁，通过volatile关键字保证，写通过synchronized与cas进行操作。\n\n## List\n* ArrayList \n基于数组实现，存储在连续的内存空间上，查询很快，但是中间部分的插入和删除很慢。默认数据长度为10，当第一个元素添加时候初始化（如果使用传参构造方法会直接初始化），每次扩容为增加50%(size >> 1)\n* LinkedList \n基于双向链表实现，查询相对较慢(需移动指针)，删除和添加比较占优势。\n* Vector\n底层是基于数组实现，线程安全，默认长度为10，直接初始化，可以设置扩容增量，如果未设置，每次为增加原来的一倍。Vector和ArrayList最大容量都为（Integer.MAX_VALUE - 8），是因为一些虚拟机在数组中保留一些头字，会导致OOM。\n\n## Set\n* HashSet\nHashMap实现，key为存入的元素，value为一个static的空对象。判断元素是否重复为 由于HashMap中的key值不能修改，所以HashSet不能进行修改元素的操作。\n* LinkedHashSet\n继承自HashSet，基于LinkedHashMap，继承了HashSet的全部特性，元素不重复，快速查找，快速插入，并且新增了一个重要特性，那就是有序。\n* TreeSet  \nTreeSet是基于TreeMap实现的，TreeSet的元素支持2种排序方式：自然排序或者根据提供的Comparator进行排序。TreeSet可以直接对其进行存储，如String，Integer等,因为这些类已经实现了Comparable接口，当元素是对象时需要手动实现Comparable接口，覆盖其compareTo方法。\n\n## Queue\n### 非阻塞队列\n> 非阻塞队列在添加（移除）时如果队列满（空）时会返回异常或者直接返回null，方法未做同步措施，采用CAS机制  \n\n非阻塞队列有：  \n\n* PriorityQueue  \n类实质上维护了一个有序列表。加入到 Queue 中的元素根据它们的天然排序（通过其 java.util.Comparable 实现）或者根据传递给构造函数的 java.util.Comparator 实现来定位  \n* ConcurrentLinkedQueue  \nConcurrentLinkedQueue 是基于链接节点的、线程安全的队列。并发访问不需要同步。因为它在队列的尾部添加元素并从头部删除它们，所以只要不需要知道队列的大小，ConcurrentLinkedQueue 对公共集合的共享访问就可以工作得很好，收集关于队列大小的信息会很慢，需要遍历队列。  \n \n非阻塞队列提供的主要方法如下：  \n\n* add(E e)：将元素e插入到队列末尾，如果插入成功，则返回true；如果插入失败（即队列已满），则会抛出异常；  \n* remove()：移除队首元素，若移除成功，则返回true；如果移除失败（队列为空），则会抛出异常；  \n* offer(E e)：将元素e插入到队列末尾，如果插入成功，则返回true；如果插入失败（即队列已满），则返回false；  \n* poll()：移除并获取队首元素，若成功，则返回队首元素；否则返回null；  \n* peek()：获取队首元素，若成功，则返回队首元素；否则返回null  \n\n对于非阻塞队列，一般情况下建议使用offer、poll和peek三个方法，不建议使用add和remove方法。因为使用offer、poll和peek三个方法可以通过返回值判断操作成功与否，而使用add和remove方法却不能达到这样的效果。注意，非阻塞队列中的方法都没有进行同步措施。\n\n### 阻塞队列\n> 阻塞队列在添加（移除）时如果队列满（空）时会等待（或超时退出），方法做同步措施，使用 ReentrantLock 锁\n\n阻塞队列有：\n\n* ArrayBlockingQueue  \nArrayListBlockingQueue是有界的，是一个有界缓存的等待队列。基于数组的阻塞队列，同LinkedBlockingQueue类似，内部维持着一个定长数据缓冲队列（该队列由数组构成）。ArrayBlockingQueue内部保存着两个整形变量标识着队列的头部和尾部在数组中的位置。生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此两者无法真正并行运行，这点不同于LinkedBlockingQueue；ArrayBlockingQueue在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。\n* LinkedBlockingQueue  \n可以设定大小，可以理解为由链表结构组成的一个缓存的有界等待队列。生产者端和消费者端分别采用了独立的锁来控制数据同步。\n* PriorityBlockingQueue  \n一个支持优先级排序的无界阻塞队列。元素按优先级顺序被移除，该队列也没有上限，注意的是有序的队列需要进入的元素具有比较能力。\n* DelayQueue  \n一个使用优先级队列实现的无界阻塞队列。是一个存放 Delayed 元素的无界阻塞队列，只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的 Delayed 元素。如果延迟都还没有期满，则队列没有头部，并且poll将返回null。当一个元素的 getDelay(TimeUnit.NANOSECONDS) 方法返回一个小于或等于零的值时，则出现期满，poll就以移除这个元素了。此队列不允许使用 null 元素。\n* SynchronousQueue  \n一个不存储元素的阻塞队列。是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。没有存储功能，因此put和take会一直阻塞，直到有另一个线程已经准备好参与到交付过程中。\n* LinkedTransferQueue  \n一个由链表结构组成的无界阻塞队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法。LinkedTransferQueue采用一种预占模式。意思就是消费者线程取元素时，如果队列不为空，则直接取走数据，若队列为空，那就生成一个节点（节点元素为null）入队，然后消费者线程被等待在这个节点上，后面生产者线程入队时发现有一个元素为null的节点，生产者线程就不入队了，直接就将元素填充到该节点，并唤醒该节点等待的线程，被唤醒的消费者线程取走元素，从调用的方法返回。我们称这种节点操作为“匹配”方式。\n* LinkedBlockingDeque  \n一个由链表结构组成的双向阻塞队列。即可以从队列的两端插入和移除元素。双向队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。 LinkedBlockingDeque多了addFirst、addLast、peekFirst、peekLast等方法，以first结尾的方法，表示插入、获取获移除双端队列的第一个元素。以last结尾的方法，表示插入、获取获移除双端队列的最后一个元素。 \n\n \n阻塞队列提供的主要方法如下：  \n\n* add：增加一个元索，如果队列已满，则抛出一个IIIegaISlabEepeplian异常  \n* remove：移除并返回队列头部的元素，如果队列为空，则抛出一个NoSuchElementException异常  \n* element：返回队列头部的元素，如果队列为空，则抛出一个NoSuchElementException异常  \n* offer：添加一个元素并返回true，如果队列已满，则返回false  \n* poll：移除并返问队列头部的元素，如果队列为空，则返回null  \n* peek：返回队列头部的元素，如果队列为空，则返回null  \n* put：添加一个元素，如果队列满，则阻塞  \n* take：移除并返回队列头部的元素，如果队列为空，则阻塞  \n\n\n\n> 参考博客：  \nhttps://www.cnblogs.com/tiancai/p/9935770.html  \nhttps://www.cnblogs.com/lemon-flm/p/7877898.html","slug":"data-structure-1","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7u7000nv8gpglfqers3","content":"<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><ul>\n<li>HashMap<br>基于数组+链表，默认大于8使用红黑树，小于6改为链表，默认容量是16，负载因子默认为0.75，HashMap每次put操作是都会检查一遍 size（当前容量）&gt;initailCapacity*loadFactor 是否成立。如果不成立则HashMap扩容为以前的两倍，HashMap中计算Hash值封装为：(key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)，原因是hashCode是32位的，length 绝大多数情况小于2的16次方。所以始终是hashcode 的低16位参与运算，这样做是使高16位也参与运算，会让得到的下标更加散列。</li>\n<li>LinkHashMap<br>继承于HashMap，是基于HashMap和双向链表来实现的。LinkedHashMap有序，可分为插入顺序和访问顺序两种（默认插入顺序，可在构造方法中指定），如果是访问顺序，那put和get操作已存在的Entry时，都会把Entry移动到双向链表的表尾(其实是先删除再插入)。</li>\n<li>Hashtable<br>线程安全，基于数组和链表，集成自Dictionary（此类已过时），Hashtable基本上被弃用，由ConcurrentHashMap替代</li>\n<li>ConcurrentHashMap<br>分段锁实现（获取size等时需要全部加锁并按顺序释放，否则可能死锁），包含一个Segment数组，Segment的结构和HashMap类似，数据结构为数组+链表+红黑树。ConcurrentHashMap中还包含一个重要属性sizeCtl，其是一个控制标识符，不同的值代表不同的意思：其为0时，表示hash表还未初始化，而为正数时这个数值表示初始化或下一次扩容的大小，相当于一个阈值；即如果hash表的实际大小&gt;=sizeCtl，则进行扩容，默认情况下其是当前ConcurrentHashMap容量的0.75倍；而如果sizeCtl为-1，表示正在进行初始化操作；而为-N时，则表示有N-1个线程正在进行扩容。ConcurrentHashMap和Hashtable都是支持并发的，这样会有一个问题，当你通过get(k)获取对应的value时，如果获取到的是null时，你无法判断，它是put（k,v）的时候value为null，还是这个key从来没有做过映射。HashMap是非并发的，可以通过contains(key)来做这个判断。而支持并发的Map在调用m.contains（key）和m.get(key),m可能已经不同了。注意jdk1.8后已经放弃了分段锁，采用读不加锁，通过volatile关键字保证，写通过synchronized与cas进行操作。</li>\n</ul>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><ul>\n<li>ArrayList<br>基于数组实现，存储在连续的内存空间上，查询很快，但是中间部分的插入和删除很慢。默认数据长度为10，当第一个元素添加时候初始化（如果使用传参构造方法会直接初始化），每次扩容为增加50%(size &gt;&gt; 1)</li>\n<li>LinkedList<br>基于双向链表实现，查询相对较慢(需移动指针)，删除和添加比较占优势。</li>\n<li>Vector<br>底层是基于数组实现，线程安全，默认长度为10，直接初始化，可以设置扩容增量，如果未设置，每次为增加原来的一倍。Vector和ArrayList最大容量都为（Integer.MAX_VALUE - 8），是因为一些虚拟机在数组中保留一些头字，会导致OOM。</li>\n</ul>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><ul>\n<li>HashSet<br>HashMap实现，key为存入的元素，value为一个static的空对象。判断元素是否重复为 由于HashMap中的key值不能修改，所以HashSet不能进行修改元素的操作。</li>\n<li>LinkedHashSet<br>继承自HashSet，基于LinkedHashMap，继承了HashSet的全部特性，元素不重复，快速查找，快速插入，并且新增了一个重要特性，那就是有序。</li>\n<li>TreeSet<br>TreeSet是基于TreeMap实现的，TreeSet的元素支持2种排序方式：自然排序或者根据提供的Comparator进行排序。TreeSet可以直接对其进行存储，如String，Integer等,因为这些类已经实现了Comparable接口，当元素是对象时需要手动实现Comparable接口，覆盖其compareTo方法。</li>\n</ul>\n<h2 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h2><h3 id=\"非阻塞队列\"><a href=\"#非阻塞队列\" class=\"headerlink\" title=\"非阻塞队列\"></a>非阻塞队列</h3><blockquote>\n<p>非阻塞队列在添加（移除）时如果队列满（空）时会返回异常或者直接返回null，方法未做同步措施，采用CAS机制  </p>\n</blockquote>\n<p>非阻塞队列有：  </p>\n<ul>\n<li>PriorityQueue<br>类实质上维护了一个有序列表。加入到 Queue 中的元素根据它们的天然排序（通过其 java.util.Comparable 实现）或者根据传递给构造函数的 java.util.Comparator 实现来定位  </li>\n<li>ConcurrentLinkedQueue<br>ConcurrentLinkedQueue 是基于链接节点的、线程安全的队列。并发访问不需要同步。因为它在队列的尾部添加元素并从头部删除它们，所以只要不需要知道队列的大小，ConcurrentLinkedQueue 对公共集合的共享访问就可以工作得很好，收集关于队列大小的信息会很慢，需要遍历队列。  </li>\n</ul>\n<p>非阻塞队列提供的主要方法如下：  </p>\n<ul>\n<li>add(E e)：将元素e插入到队列末尾，如果插入成功，则返回true；如果插入失败（即队列已满），则会抛出异常；  </li>\n<li>remove()：移除队首元素，若移除成功，则返回true；如果移除失败（队列为空），则会抛出异常；  </li>\n<li>offer(E e)：将元素e插入到队列末尾，如果插入成功，则返回true；如果插入失败（即队列已满），则返回false；  </li>\n<li>poll()：移除并获取队首元素，若成功，则返回队首元素；否则返回null；  </li>\n<li>peek()：获取队首元素，若成功，则返回队首元素；否则返回null  </li>\n</ul>\n<p>对于非阻塞队列，一般情况下建议使用offer、poll和peek三个方法，不建议使用add和remove方法。因为使用offer、poll和peek三个方法可以通过返回值判断操作成功与否，而使用add和remove方法却不能达到这样的效果。注意，非阻塞队列中的方法都没有进行同步措施。</p>\n<h3 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h3><blockquote>\n<p>阻塞队列在添加（移除）时如果队列满（空）时会等待（或超时退出），方法做同步措施，使用 ReentrantLock 锁</p>\n</blockquote>\n<p>阻塞队列有：</p>\n<ul>\n<li>ArrayBlockingQueue<br>ArrayListBlockingQueue是有界的，是一个有界缓存的等待队列。基于数组的阻塞队列，同LinkedBlockingQueue类似，内部维持着一个定长数据缓冲队列（该队列由数组构成）。ArrayBlockingQueue内部保存着两个整形变量标识着队列的头部和尾部在数组中的位置。生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此两者无法真正并行运行，这点不同于LinkedBlockingQueue；ArrayBlockingQueue在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。</li>\n<li>LinkedBlockingQueue<br>可以设定大小，可以理解为由链表结构组成的一个缓存的有界等待队列。生产者端和消费者端分别采用了独立的锁来控制数据同步。</li>\n<li>PriorityBlockingQueue<br>一个支持优先级排序的无界阻塞队列。元素按优先级顺序被移除，该队列也没有上限，注意的是有序的队列需要进入的元素具有比较能力。</li>\n<li>DelayQueue<br>一个使用优先级队列实现的无界阻塞队列。是一个存放 Delayed 元素的无界阻塞队列，只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的 Delayed 元素。如果延迟都还没有期满，则队列没有头部，并且poll将返回null。当一个元素的 getDelay(TimeUnit.NANOSECONDS) 方法返回一个小于或等于零的值时，则出现期满，poll就以移除这个元素了。此队列不允许使用 null 元素。</li>\n<li>SynchronousQueue<br>一个不存储元素的阻塞队列。是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。没有存储功能，因此put和take会一直阻塞，直到有另一个线程已经准备好参与到交付过程中。</li>\n<li>LinkedTransferQueue<br>一个由链表结构组成的无界阻塞队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法。LinkedTransferQueue采用一种预占模式。意思就是消费者线程取元素时，如果队列不为空，则直接取走数据，若队列为空，那就生成一个节点（节点元素为null）入队，然后消费者线程被等待在这个节点上，后面生产者线程入队时发现有一个元素为null的节点，生产者线程就不入队了，直接就将元素填充到该节点，并唤醒该节点等待的线程，被唤醒的消费者线程取走元素，从调用的方法返回。我们称这种节点操作为“匹配”方式。</li>\n<li>LinkedBlockingDeque<br>一个由链表结构组成的双向阻塞队列。即可以从队列的两端插入和移除元素。双向队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。 LinkedBlockingDeque多了addFirst、addLast、peekFirst、peekLast等方法，以first结尾的方法，表示插入、获取获移除双端队列的第一个元素。以last结尾的方法，表示插入、获取获移除双端队列的最后一个元素。 </li>\n</ul>\n<p>阻塞队列提供的主要方法如下：  </p>\n<ul>\n<li>add：增加一个元索，如果队列已满，则抛出一个IIIegaISlabEepeplian异常  </li>\n<li>remove：移除并返回队列头部的元素，如果队列为空，则抛出一个NoSuchElementException异常  </li>\n<li>element：返回队列头部的元素，如果队列为空，则抛出一个NoSuchElementException异常  </li>\n<li>offer：添加一个元素并返回true，如果队列已满，则返回false  </li>\n<li>poll：移除并返问队列头部的元素，如果队列为空，则返回null  </li>\n<li>peek：返回队列头部的元素，如果队列为空，则返回null  </li>\n<li>put：添加一个元素，如果队列满，则阻塞  </li>\n<li>take：移除并返回队列头部的元素，如果队列为空，则阻塞  </li>\n</ul>\n<blockquote>\n<p>参考博客：<br><a href=\"https://www.cnblogs.com/tiancai/p/9935770.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/tiancai/p/9935770.html</a><br><a href=\"https://www.cnblogs.com/lemon-flm/p/7877898.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lemon-flm/p/7877898.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><ul>\n<li>HashMap<br>基于数组+链表，默认大于8使用红黑树，小于6改为链表，默认容量是16，负载因子默认为0.75，HashMap每次put操作是都会检查一遍 size（当前容量）&gt;initailCapacity*loadFactor 是否成立。如果不成立则HashMap扩容为以前的两倍，HashMap中计算Hash值封装为：(key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)，原因是hashCode是32位的，length 绝大多数情况小于2的16次方。所以始终是hashcode 的低16位参与运算，这样做是使高16位也参与运算，会让得到的下标更加散列。</li>\n<li>LinkHashMap<br>继承于HashMap，是基于HashMap和双向链表来实现的。LinkedHashMap有序，可分为插入顺序和访问顺序两种（默认插入顺序，可在构造方法中指定），如果是访问顺序，那put和get操作已存在的Entry时，都会把Entry移动到双向链表的表尾(其实是先删除再插入)。</li>\n<li>Hashtable<br>线程安全，基于数组和链表，集成自Dictionary（此类已过时），Hashtable基本上被弃用，由ConcurrentHashMap替代</li>\n<li>ConcurrentHashMap<br>分段锁实现（获取size等时需要全部加锁并按顺序释放，否则可能死锁），包含一个Segment数组，Segment的结构和HashMap类似，数据结构为数组+链表+红黑树。ConcurrentHashMap中还包含一个重要属性sizeCtl，其是一个控制标识符，不同的值代表不同的意思：其为0时，表示hash表还未初始化，而为正数时这个数值表示初始化或下一次扩容的大小，相当于一个阈值；即如果hash表的实际大小&gt;=sizeCtl，则进行扩容，默认情况下其是当前ConcurrentHashMap容量的0.75倍；而如果sizeCtl为-1，表示正在进行初始化操作；而为-N时，则表示有N-1个线程正在进行扩容。ConcurrentHashMap和Hashtable都是支持并发的，这样会有一个问题，当你通过get(k)获取对应的value时，如果获取到的是null时，你无法判断，它是put（k,v）的时候value为null，还是这个key从来没有做过映射。HashMap是非并发的，可以通过contains(key)来做这个判断。而支持并发的Map在调用m.contains（key）和m.get(key),m可能已经不同了。注意jdk1.8后已经放弃了分段锁，采用读不加锁，通过volatile关键字保证，写通过synchronized与cas进行操作。</li>\n</ul>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><ul>\n<li>ArrayList<br>基于数组实现，存储在连续的内存空间上，查询很快，但是中间部分的插入和删除很慢。默认数据长度为10，当第一个元素添加时候初始化（如果使用传参构造方法会直接初始化），每次扩容为增加50%(size &gt;&gt; 1)</li>\n<li>LinkedList<br>基于双向链表实现，查询相对较慢(需移动指针)，删除和添加比较占优势。</li>\n<li>Vector<br>底层是基于数组实现，线程安全，默认长度为10，直接初始化，可以设置扩容增量，如果未设置，每次为增加原来的一倍。Vector和ArrayList最大容量都为（Integer.MAX_VALUE - 8），是因为一些虚拟机在数组中保留一些头字，会导致OOM。</li>\n</ul>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><ul>\n<li>HashSet<br>HashMap实现，key为存入的元素，value为一个static的空对象。判断元素是否重复为 由于HashMap中的key值不能修改，所以HashSet不能进行修改元素的操作。</li>\n<li>LinkedHashSet<br>继承自HashSet，基于LinkedHashMap，继承了HashSet的全部特性，元素不重复，快速查找，快速插入，并且新增了一个重要特性，那就是有序。</li>\n<li>TreeSet<br>TreeSet是基于TreeMap实现的，TreeSet的元素支持2种排序方式：自然排序或者根据提供的Comparator进行排序。TreeSet可以直接对其进行存储，如String，Integer等,因为这些类已经实现了Comparable接口，当元素是对象时需要手动实现Comparable接口，覆盖其compareTo方法。</li>\n</ul>\n<h2 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h2><h3 id=\"非阻塞队列\"><a href=\"#非阻塞队列\" class=\"headerlink\" title=\"非阻塞队列\"></a>非阻塞队列</h3><blockquote>\n<p>非阻塞队列在添加（移除）时如果队列满（空）时会返回异常或者直接返回null，方法未做同步措施，采用CAS机制  </p>\n</blockquote>\n<p>非阻塞队列有：  </p>\n<ul>\n<li>PriorityQueue<br>类实质上维护了一个有序列表。加入到 Queue 中的元素根据它们的天然排序（通过其 java.util.Comparable 实现）或者根据传递给构造函数的 java.util.Comparator 实现来定位  </li>\n<li>ConcurrentLinkedQueue<br>ConcurrentLinkedQueue 是基于链接节点的、线程安全的队列。并发访问不需要同步。因为它在队列的尾部添加元素并从头部删除它们，所以只要不需要知道队列的大小，ConcurrentLinkedQueue 对公共集合的共享访问就可以工作得很好，收集关于队列大小的信息会很慢，需要遍历队列。  </li>\n</ul>\n<p>非阻塞队列提供的主要方法如下：  </p>\n<ul>\n<li>add(E e)：将元素e插入到队列末尾，如果插入成功，则返回true；如果插入失败（即队列已满），则会抛出异常；  </li>\n<li>remove()：移除队首元素，若移除成功，则返回true；如果移除失败（队列为空），则会抛出异常；  </li>\n<li>offer(E e)：将元素e插入到队列末尾，如果插入成功，则返回true；如果插入失败（即队列已满），则返回false；  </li>\n<li>poll()：移除并获取队首元素，若成功，则返回队首元素；否则返回null；  </li>\n<li>peek()：获取队首元素，若成功，则返回队首元素；否则返回null  </li>\n</ul>\n<p>对于非阻塞队列，一般情况下建议使用offer、poll和peek三个方法，不建议使用add和remove方法。因为使用offer、poll和peek三个方法可以通过返回值判断操作成功与否，而使用add和remove方法却不能达到这样的效果。注意，非阻塞队列中的方法都没有进行同步措施。</p>\n<h3 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h3><blockquote>\n<p>阻塞队列在添加（移除）时如果队列满（空）时会等待（或超时退出），方法做同步措施，使用 ReentrantLock 锁</p>\n</blockquote>\n<p>阻塞队列有：</p>\n<ul>\n<li>ArrayBlockingQueue<br>ArrayListBlockingQueue是有界的，是一个有界缓存的等待队列。基于数组的阻塞队列，同LinkedBlockingQueue类似，内部维持着一个定长数据缓冲队列（该队列由数组构成）。ArrayBlockingQueue内部保存着两个整形变量标识着队列的头部和尾部在数组中的位置。生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此两者无法真正并行运行，这点不同于LinkedBlockingQueue；ArrayBlockingQueue在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。</li>\n<li>LinkedBlockingQueue<br>可以设定大小，可以理解为由链表结构组成的一个缓存的有界等待队列。生产者端和消费者端分别采用了独立的锁来控制数据同步。</li>\n<li>PriorityBlockingQueue<br>一个支持优先级排序的无界阻塞队列。元素按优先级顺序被移除，该队列也没有上限，注意的是有序的队列需要进入的元素具有比较能力。</li>\n<li>DelayQueue<br>一个使用优先级队列实现的无界阻塞队列。是一个存放 Delayed 元素的无界阻塞队列，只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的 Delayed 元素。如果延迟都还没有期满，则队列没有头部，并且poll将返回null。当一个元素的 getDelay(TimeUnit.NANOSECONDS) 方法返回一个小于或等于零的值时，则出现期满，poll就以移除这个元素了。此队列不允许使用 null 元素。</li>\n<li>SynchronousQueue<br>一个不存储元素的阻塞队列。是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。没有存储功能，因此put和take会一直阻塞，直到有另一个线程已经准备好参与到交付过程中。</li>\n<li>LinkedTransferQueue<br>一个由链表结构组成的无界阻塞队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法。LinkedTransferQueue采用一种预占模式。意思就是消费者线程取元素时，如果队列不为空，则直接取走数据，若队列为空，那就生成一个节点（节点元素为null）入队，然后消费者线程被等待在这个节点上，后面生产者线程入队时发现有一个元素为null的节点，生产者线程就不入队了，直接就将元素填充到该节点，并唤醒该节点等待的线程，被唤醒的消费者线程取走元素，从调用的方法返回。我们称这种节点操作为“匹配”方式。</li>\n<li>LinkedBlockingDeque<br>一个由链表结构组成的双向阻塞队列。即可以从队列的两端插入和移除元素。双向队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。 LinkedBlockingDeque多了addFirst、addLast、peekFirst、peekLast等方法，以first结尾的方法，表示插入、获取获移除双端队列的第一个元素。以last结尾的方法，表示插入、获取获移除双端队列的最后一个元素。 </li>\n</ul>\n<p>阻塞队列提供的主要方法如下：  </p>\n<ul>\n<li>add：增加一个元索，如果队列已满，则抛出一个IIIegaISlabEepeplian异常  </li>\n<li>remove：移除并返回队列头部的元素，如果队列为空，则抛出一个NoSuchElementException异常  </li>\n<li>element：返回队列头部的元素，如果队列为空，则抛出一个NoSuchElementException异常  </li>\n<li>offer：添加一个元素并返回true，如果队列已满，则返回false  </li>\n<li>poll：移除并返问队列头部的元素，如果队列为空，则返回null  </li>\n<li>peek：返回队列头部的元素，如果队列为空，则返回null  </li>\n<li>put：添加一个元素，如果队列满，则阻塞  </li>\n<li>take：移除并返回队列头部的元素，如果队列为空，则阻塞  </li>\n</ul>\n<blockquote>\n<p>参考博客：<br><a href=\"https://www.cnblogs.com/tiancai/p/9935770.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/tiancai/p/9935770.html</a><br><a href=\"https://www.cnblogs.com/lemon-flm/p/7877898.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lemon-flm/p/7877898.html</a></p>\n</blockquote>\n"},{"title":" Dubbo+Zookeeper+Spring-boot+dubbo-simple 搭建入门","id":"80","date":"2018-01-23T08:16:32.000Z","_content":"\n# 安装Zookeeper #\n\t[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n\t[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n\t[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n\t[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n\t[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n\t[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n\t[root@linxu conf]# vi zoo.cfg \n\t修改配置对应项\n\tdataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\n\tdataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n\t[root@linxu conf]# vi /etc/profile\n\t末尾添加\n\texport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\n\texport PATH=$ZOOKEEPER_HOME/bin:$PATH\n\texport PATH\n\t[root@linxu conf]# source /etc/profile #使生效\n\t[root@linxu conf]# zkServer.sh start   #启动\n\t[root@linxu conf]# zkServer.sh status  #查看状态\n\t[root@linxu conf]# zkServer.sh stop    #停止\n\t[root@linxu conf]# zkServer.sh restart #重启\n\n\n# 部署dubbo-admin #\n\n从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)\n\ndubbo地址：https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问http://localhost:8080/dubbo-admin-2.5.8/\n\n# 代码实现 #\n本地使用spring-boot创建提供者（provider）和消费者(consume) \n\n代码：https://github.com/reallinxu/spring-boot-dubbo\n\n分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。\n\nPS：provider和consume的接口位置必须一致\n\n# 搭建dubbo-simple监控 #\n\n从github上下载dubbox源码，编译dubbo-monitor-simple\n\ndubbox地址：https://github.com/reallinxu/dubbox\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器  \n\n\t[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n\t[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n\t修改dubbo.properties\n\tdubbo.container=log4j,spring,registry,jetty\n\tdubbo.application.name=simple-monitor\n\tdubbo.application.owner=\n\t#dubbo.registry.address=multicast://224.5.6.7:1234\n\tdubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n\t#dubbo.registry.address=redis://127.0.0.1:6379\n\t#dubbo.registry.address=dubbo://127.0.0.1:9090\n\tdubbo.protocol.port=7070\n\tdubbo.jetty.port=7072  #jetty端口，避免冲突\n\tdubbo.jetty.directory=${user.home}/monitor\n\tdubbo.charts.directory=${dubbo.jetty.directory}/charts\n\tdubbo.statistics.directory=${user.home}/monitor/statistics\n\tdubbo.log4j.file=logs/dubbo-monitor-simple.log\n\tdubbo.log4j.level=WARN</pre>\n\t启动dubbo-simple\n\t[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n\t[root@linxu bin]# sh start.sh\n启动成功后登陆访问http://192.168.43.163:7072 (端口为jetty端口)\n\n如果查看不到监控提供者\n\ncom.alibaba.dubbo.monitor.MonitorService\n\n请核对dubbo.properties zookeeper地址和端口是否正确\n","source":"_posts/dubbo.md","raw":"---\ntitle: \" Dubbo+Zookeeper+Spring-boot+dubbo-simple 搭建入门\"\nid: 80\ncategories:\n  - Dubbo\ndate: 2018-01-23 16:16:32\ntags:\n---\n\n# 安装Zookeeper #\n\t[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n\t[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n\t[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n\t[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n\t[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n\t[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n\t[root@linxu conf]# vi zoo.cfg \n\t修改配置对应项\n\tdataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\n\tdataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n\t[root@linxu conf]# vi /etc/profile\n\t末尾添加\n\texport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\n\texport PATH=$ZOOKEEPER_HOME/bin:$PATH\n\texport PATH\n\t[root@linxu conf]# source /etc/profile #使生效\n\t[root@linxu conf]# zkServer.sh start   #启动\n\t[root@linxu conf]# zkServer.sh status  #查看状态\n\t[root@linxu conf]# zkServer.sh stop    #停止\n\t[root@linxu conf]# zkServer.sh restart #重启\n\n\n# 部署dubbo-admin #\n\n从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)\n\ndubbo地址：https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问http://localhost:8080/dubbo-admin-2.5.8/\n\n# 代码实现 #\n本地使用spring-boot创建提供者（provider）和消费者(consume) \n\n代码：https://github.com/reallinxu/spring-boot-dubbo\n\n分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。\n\nPS：provider和consume的接口位置必须一致\n\n# 搭建dubbo-simple监控 #\n\n从github上下载dubbox源码，编译dubbo-monitor-simple\n\ndubbox地址：https://github.com/reallinxu/dubbox\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器  \n\n\t[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n\t[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n\t修改dubbo.properties\n\tdubbo.container=log4j,spring,registry,jetty\n\tdubbo.application.name=simple-monitor\n\tdubbo.application.owner=\n\t#dubbo.registry.address=multicast://224.5.6.7:1234\n\tdubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n\t#dubbo.registry.address=redis://127.0.0.1:6379\n\t#dubbo.registry.address=dubbo://127.0.0.1:9090\n\tdubbo.protocol.port=7070\n\tdubbo.jetty.port=7072  #jetty端口，避免冲突\n\tdubbo.jetty.directory=${user.home}/monitor\n\tdubbo.charts.directory=${dubbo.jetty.directory}/charts\n\tdubbo.statistics.directory=${user.home}/monitor/statistics\n\tdubbo.log4j.file=logs/dubbo-monitor-simple.log\n\tdubbo.log4j.level=WARN</pre>\n\t启动dubbo-simple\n\t[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n\t[root@linxu bin]# sh start.sh\n启动成功后登陆访问http://192.168.43.163:7072 (端口为jetty端口)\n\n如果查看不到监控提供者\n\ncom.alibaba.dubbo.monitor.MonitorService\n\n请核对dubbo.properties zookeeper地址和端口是否正确\n","slug":"dubbo","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7u9000rv8gp71zj77mi","content":"<h1 id=\"安装Zookeeper\"><a href=\"#安装Zookeeper\" class=\"headerlink\" title=\"安装Zookeeper\"></a>安装Zookeeper</h1><pre><code>[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n[root@linxu conf]# vi zoo.cfg \n修改配置对应项\ndataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\ndataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n[root@linxu conf]# vi /etc/profile\n末尾添加\nexport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\nexport PATH=$ZOOKEEPER_HOME/bin:$PATH\nexport PATH\n[root@linxu conf]# source /etc/profile #使生效\n[root@linxu conf]# zkServer.sh start   #启动\n[root@linxu conf]# zkServer.sh status  #查看状态\n[root@linxu conf]# zkServer.sh stop    #停止\n[root@linxu conf]# zkServer.sh restart #重启</code></pre><h1 id=\"部署dubbo-admin\"><a href=\"#部署dubbo-admin\" class=\"headerlink\" title=\"部署dubbo-admin\"></a>部署dubbo-admin</h1><p>从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)</p>\n<p>dubbo地址：<a href=\"https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/dubbo/tree/dubbo-2.5.8</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问<a href=\"http://localhost:8080/dubbo-admin-2.5.8/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/dubbo-admin-2.5.8/</a></p>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><p>本地使用spring-boot创建提供者（provider）和消费者(consume) </p>\n<p>代码：<a href=\"https://github.com/reallinxu/spring-boot-dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/spring-boot-dubbo</a></p>\n<p>分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。</p>\n<p>PS：provider和consume的接口位置必须一致</p>\n<h1 id=\"搭建dubbo-simple监控\"><a href=\"#搭建dubbo-simple监控\" class=\"headerlink\" title=\"搭建dubbo-simple监控\"></a>搭建dubbo-simple监控</h1><p>从github上下载dubbox源码，编译dubbo-monitor-simple</p>\n<p>dubbox地址：<a href=\"https://github.com/reallinxu/dubbox\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/dubbox</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器  </p>\n<pre><code>[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n修改dubbo.properties\ndubbo.container=log4j,spring,registry,jetty\ndubbo.application.name=simple-monitor\ndubbo.application.owner=\n#dubbo.registry.address=multicast://224.5.6.7:1234\ndubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n#dubbo.registry.address=redis://127.0.0.1:6379\n#dubbo.registry.address=dubbo://127.0.0.1:9090\ndubbo.protocol.port=7070\ndubbo.jetty.port=7072  #jetty端口，避免冲突\ndubbo.jetty.directory=${user.home}/monitor\ndubbo.charts.directory=${dubbo.jetty.directory}/charts\ndubbo.statistics.directory=${user.home}/monitor/statistics\ndubbo.log4j.file=logs/dubbo-monitor-simple.log\ndubbo.log4j.level=WARN&lt;/pre&gt;\n启动dubbo-simple\n[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n[root@linxu bin]# sh start.sh</code></pre><p>启动成功后登陆访问<a href=\"http://192.168.43.163:7072\" target=\"_blank\" rel=\"noopener\">http://192.168.43.163:7072</a> (端口为jetty端口)</p>\n<p>如果查看不到监控提供者</p>\n<p>com.alibaba.dubbo.monitor.MonitorService</p>\n<p>请核对dubbo.properties zookeeper地址和端口是否正确</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装Zookeeper\"><a href=\"#安装Zookeeper\" class=\"headerlink\" title=\"安装Zookeeper\"></a>安装Zookeeper</h1><pre><code>[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n[root@linxu conf]# vi zoo.cfg \n修改配置对应项\ndataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\ndataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n[root@linxu conf]# vi /etc/profile\n末尾添加\nexport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\nexport PATH=$ZOOKEEPER_HOME/bin:$PATH\nexport PATH\n[root@linxu conf]# source /etc/profile #使生效\n[root@linxu conf]# zkServer.sh start   #启动\n[root@linxu conf]# zkServer.sh status  #查看状态\n[root@linxu conf]# zkServer.sh stop    #停止\n[root@linxu conf]# zkServer.sh restart #重启</code></pre><h1 id=\"部署dubbo-admin\"><a href=\"#部署dubbo-admin\" class=\"headerlink\" title=\"部署dubbo-admin\"></a>部署dubbo-admin</h1><p>从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)</p>\n<p>dubbo地址：<a href=\"https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/dubbo/tree/dubbo-2.5.8</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问<a href=\"http://localhost:8080/dubbo-admin-2.5.8/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/dubbo-admin-2.5.8/</a></p>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><p>本地使用spring-boot创建提供者（provider）和消费者(consume) </p>\n<p>代码：<a href=\"https://github.com/reallinxu/spring-boot-dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/spring-boot-dubbo</a></p>\n<p>分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。</p>\n<p>PS：provider和consume的接口位置必须一致</p>\n<h1 id=\"搭建dubbo-simple监控\"><a href=\"#搭建dubbo-simple监控\" class=\"headerlink\" title=\"搭建dubbo-simple监控\"></a>搭建dubbo-simple监控</h1><p>从github上下载dubbox源码，编译dubbo-monitor-simple</p>\n<p>dubbox地址：<a href=\"https://github.com/reallinxu/dubbox\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/dubbox</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器  </p>\n<pre><code>[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n修改dubbo.properties\ndubbo.container=log4j,spring,registry,jetty\ndubbo.application.name=simple-monitor\ndubbo.application.owner=\n#dubbo.registry.address=multicast://224.5.6.7:1234\ndubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n#dubbo.registry.address=redis://127.0.0.1:6379\n#dubbo.registry.address=dubbo://127.0.0.1:9090\ndubbo.protocol.port=7070\ndubbo.jetty.port=7072  #jetty端口，避免冲突\ndubbo.jetty.directory=${user.home}/monitor\ndubbo.charts.directory=${dubbo.jetty.directory}/charts\ndubbo.statistics.directory=${user.home}/monitor/statistics\ndubbo.log4j.file=logs/dubbo-monitor-simple.log\ndubbo.log4j.level=WARN&lt;/pre&gt;\n启动dubbo-simple\n[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n[root@linxu bin]# sh start.sh</code></pre><p>启动成功后登陆访问<a href=\"http://192.168.43.163:7072\" target=\"_blank\" rel=\"noopener\">http://192.168.43.163:7072</a> (端口为jetty端口)</p>\n<p>如果查看不到监控提供者</p>\n<p>com.alibaba.dubbo.monitor.MonitorService</p>\n<p>请核对dubbo.properties zookeeper地址和端口是否正确</p>\n"},{"title":"使用Feign发送http请求以及源码分析","id":"20200115","date":"2020-01-15T08:28:47.000Z","_content":"\n## 使用Feign发送http请求以及源码分析\n\n### 简介\nFeign是一个http请求调用的轻量级框架，可以用Java接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用。 \n\n### 注解(Annotation)\n注解 | 作用域 |  用法  \n-|-|-\n@RequestLine | 方法 | 定义HttpMethod和UriTemplate请求。 {expression}使用大括号括起来的值使用其相应的带@Param注释参数进行解析。 |\n@Param | 参数 | 作用于参数上，定义一个模板变量，其值将用于Expression按名称解析相应的模板。 |\n@Headers | 方法，类型 | 定义一个HeaderTemplate; 的变体UriTemplate。使用带@Param注释的值来解析相应的Expressions。在上使用时Type，该模板将应用于每个请求。当在上使用时Method，模板将仅应用于带注释的方法。 |\n@QueryMap | 参数 | 定义一个Map名称-值对或POJO，以扩展为查询字符串。 |\n@HeaderMap | 参数 | 定义一个Map名称-值对，以扩展为Http Headers |\n@Body | 方法 | 定义Template，类似于UriTemplate和HeaderTemplate，使用@Param注释值来解决相应的Expressions。 |\n\n> 如果需要将请求定向到其他主机，则需要在创建Feign客户端时提供的主机，或者要为每个请求提供目标主机，请包含一个java.net.URI参数，Feign将使用该值作为请求目标。\n> @RequestLine(\"POST /repos/{owner}/{repo}/issues\")\nvoid createIssue(URI host, Issue issue, @Param(\"owner\") String owner, @Param(\"repo\") String repo);\n\n### Demo\n#### ready\nidea创建一个springboot项目(此处本人项目端口设置为8089，可自行设置)，勾选openfeign如下图所示：\n![new project](/imgs/feign/new-project.jpg)\n\n#### test\n创建controller作为服务接口  \n\n```java\npackage com.reallinxu.cloud.controller;\n\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * @author linxu\n */\n@RestController\npublic class TestController {\n\n    /**\n     * demo1 -- @RequestLine @Param 简单使用\n     *\n     * @param param1\n     * @return\n     */\n    @GetMapping(\"/demo1/{param1}\")\n    public String demo1(@PathVariable String param1) {\n        return \"Demo1: hello\" + param1;\n    }\n\n    /**\n     * demo2 -- @Headers使用\n     *\n     * @param param1\n     * @return\n     */\n    @GetMapping(\"/demo2/{param1}\")\n    public String demo2(HttpServletRequest request, @PathVariable String param1) {\n        System.out.println(request.getHeader(\"Accept\"));\n        return \"Demo2: hello\" + param1;\n    }\n\n    /**\n     * demo3 -- @QueryMap使用 map\n     *\n     * @param param1\n     * @return\n     */\n    @GetMapping(\"/demo3\")\n    public String demo3(@RequestParam String param1, @RequestParam String param2) {\n        return \"Demo3: param1-\" + param1 + \" param2-\" + param2;\n    }\n\n    /**\n     * demo4 -- @QueryMap使用 pojo\n     *\n     * @param param1\n     * @return\n     */\n    @GetMapping(\"/demo4\")\n    public String demo4(@RequestParam String param1, @RequestParam String param2) {\n        return \"Demo4: param1-\" + param1 + \" param2-\" + param2;\n    }\n\n    /**\n     * demo5 -- @HeaderMap使用\n     *\n     * @param request\n     * @return\n     */\n    @GetMapping(\"/demo5\")\n    public String demo5(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"Accept\"));\n        System.out.println(request.getHeader(\"accept-encoding\"));\n        return \"Demo5: hello \";\n    }\n\n    /**\n     * demo6 -- @Body使用\n     *\n     * @param param\n     * @return\n     */\n    @PostMapping(\"/demo6\")\n    public String demo6(@RequestBody String param) {\n        return \"Demo6: param- \" + param;\n    }\n\n}\n```\n\n创建接口，用来作为feign客户端\n```java\npackage com.reallinxu.cloud.feign;\n\n\nimport com.reallinxu.cloud.entity.Demo4;\nimport feign.*;\n\nimport java.net.URI;\nimport java.util.Map;\n\n/**\n * feign接口\n *\n * @author linxu\n */\npublic interface TestInterface {\n\n    /**\n     * demo1 -- 基本用法\n     *\n     * @param param1\n     * @return\n     */\n    @RequestLine(\"GET /demo1/{param1}\")\n    String demo1(@Param(\"param1\") String param1);\n\n    /**\n     * demo2 -- @Headers使用\n     *\n     * @param param1\n     * @param param2\n     * @return\n     */\n    @RequestLine(\"GET /demo2/{param1}\")\n    @Headers(\"Accept: {param2}\")\n    String demo2(@Param(\"param1\") String param1, @Param(\"param2\") String param2);\n\n    /**\n     * demo3 -- @QueryMap使用 map\n     *\n     * @param paramMap\n     * @return\n     */\n    @RequestLine(\"GET /demo3\")\n    String demo3(@QueryMap Map paramMap);\n\n    /**\n     * demo4 -- @QueryMap使用 pojo\n     *\n     * @param demo4\n     * @return\n     */\n    @RequestLine(\"GET /demo4\")\n    String demo4(@QueryMap Demo4 demo4);\n\n    /**\n     * demo5 -- @HeaderMap使用 pojo\n     *\n     * @param demo5\n     * @return\n     */\n    @RequestLine(\"GET /demo5\")\n    String demo5(@HeaderMap Map demo5);\n\n    /**\n     * demo6\n     */\n    @RequestLine(\"POST /demo6\")\n    @Headers(\"Content-Type: application/json\")\n    @Body(\"%7B\\\"param1\\\": \\\"{param1}\\\", \\\"param2\\\": \\\"{param2}\\\"%7D\")\n    String demo6(@Param(\"param1\") String param1, @Param(\"param2\") String param2);\n\n    /**\n     * demoN -- 自定义host\n     *\n     * @param param1\n     * @return\n     */\n    @RequestLine(\"GET /demo1/{param1}\")\n    String demoN(URI host, @Param(\"param1\") String param1);\n\n}\n\n```\n创建一个Demo4用到的pojo\n```java\npackage com.reallinxu.cloud.entity;\n\npublic class Demo4 {\n    private String param1;\n\n    private String param2;\n\n    public String getParam1() {\n        return param1;\n    }\n\n    public void setParam1(String param1) {\n        this.param1 = param1;\n    }\n\n    public String getParam2() {\n        return param2;\n    }\n\n    public void setParam2(String param2) {\n        this.param2 = param2;\n    }\n}\n\n```\n\n创建测试案例进行测试\n```java\npackage com.reallinxu.cloud.test;\n\nimport com.reallinxu.cloud.entity.Demo4;\nimport com.reallinxu.cloud.feign.TestInterface;\nimport feign.Feign;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 测试类\n * @author linxu\n */\npublic class Test {\n    public static void main(String[] args) throws URISyntaxException {\n        TestInterface testInterface = Feign.builder()\n                        .target(TestInterface.class, \"http://localhost:8089\");\n\n        //demo1\n        System.out.println(testInterface.demo1(\"demo1 - 1\"));\n\n        //demo2\n        System.out.println(testInterface.demo2(\"demo2 - 1\", \"text/html\"));\n\n        //demo3\n        Map demo3Map = new HashMap<String,String>();\n        demo3Map.put(\"param1\",\"heihei\");\n        demo3Map.put(\"param2\",\"haha\");\n        System.out.println(testInterface.demo3(demo3Map));\n\n        //demo4\n        Demo4 demo4 = new Demo4();\n        demo4.setParam1(\"heihei\");\n        demo4.setParam2(\"haha\");\n        System.out.println(testInterface.demo4(demo4));\n\n        //demo5\n        Map demo5 = new HashMap<String,String>();\n        demo5.put(\"Accept\",\"text/html\");\n        demo5.put(\"accept-encoding\",\"gzip\");\n        System.out.println(testInterface.demo5(demo5));\n\n        //demo6\n        System.out.println(testInterface.demo6(\"heihei\",\"haha\"));\n\n        //自定义host，此处会访问8081端口，连接拒绝\n        URI a = new URI(\"http://localhost:8081\");\n        System.out.println(testInterface.demoN(a,\"demo2 - 2\"));\n    }\n}\n\n```\n启动springboot项目，运行Test查看执行结果。\n\n### 源码分析\n#### 定义feign客户端接口\n\tTestInterface testInterface = Feign.builder().target(TestInterface.class, \"http://localhost:8089\");\nfeign.builder()时可以设置一些参数，未设置为默认值，参数对应如下：\n```java\n//控制日志级别\n//NONE：不记录。\n//BASIC：只记录请求方法和URL以及响应状态代码和执行时间。\n//HEADERS：记录基本信息以及请求和响应头。\n//FULL：记录请求和响应的头、正文和元数据。\nthis.logLevel = Level.NONE; \n//定义在接口上有效的注释和值。通过registerClassAnnotation对@RequestLine、@param等注解的定义及对应处理\nthis.contract = new Default();\n//Http请求客户端，https调用时需要设置参数\nthis.client = new feign.Client.Default((SSLSocketFactory)null, (HostnameVerifier)null);\n//重试机制，设置重试期间与重试次数\nthis.retryer = new feign.Retryer.Default();\n//可以设置自己的记录日志方式\nthis.logger = new NoOpLogger();\n//定义编码器，请求参数为对象时调用，默认支持json与String\nthis.encoder = new feign.codec.Encoder.Default();\n//定义解码器，响应为对象时调用，将响应转为对应对象\nthis.decoder = new feign.codec.Decoder.Default();\n//如果@QueryMap使用的类型是对象会通过编码转为Map\nthis.queryMapEncoder = new feign.QueryMapEncoder.Default();\n//可以根据状态实现抛出适合项目场景的类型异常\nthis.errorDecoder = new feign.codec.ErrorDecoder.Default();\n//控制客户端请求的设置，设置连接时间，读取时间，是否支持3xx重定向\nthis.options = new Options();\n//控制反射方法的调用\nthis.invocationHandlerFactory = new feign.InvocationHandlerFactory.Default();\n//解码完成后自动关闭响应\nthis.closeAfterDecode = true;\n//apache许可证不允许使用文件啥啥玩意的，不管了\nthis.propagationPolicy = ExceptionPropagationPolicy.NONE;\n```\n接下来我们看下target方法，原理主要是根据接口生成一个Proxy代理类，主要方法是build().newInstance(target)\n![new project](/imgs/feign/feign-core1.jpg)\n特别注意框中的几个参数，我们debug进去看下，各自是什么东西\n![new project](/imgs/feign/feign-core2.jpg)\n可以看出nameToHandler中的key为接口中的方法，value为初始化Feign时设置的参数，注意target中有传入的host地址\n![new project](/imgs/feign/feign-core3.jpg)\nmethodToHandler也很简单直白，明显就是为了以后的反射\n![new project](/imgs/feign/feign-core4.jpg)\n``` java\ndefault void defaultMethod(){\n    System.out.println(\"我是默认方法\");\n}\n```\n我们将TestInterface接口中加入上方默认方法再debug可以看到defaultMehthodHandlers用于存放接口的默认方法,默认方法需要另外绑定到代理对象上。\n\n#### 调用feign客户端接口\n代理类就已经生成完成，接下来我们看调用。\n![new project](/imgs/feign/feign-core5.jpg)\n除了object中自带的一些方法其他的都走反射\n![new project](/imgs/feign/feign-core6.jpg)\n这里可以看到创建了RestTemplate用来发起请求，并使用创建时设置的配置\n![new project](/imgs/feign/feign-core7.jpg)\n创建RestTemplate时会将表达式进行转换为正确的连接\n![new project](/imgs/feign/feign-core8.jpg)\n通过client发送请求，整个请求完成。\n\n### end\nFeign的Http调用到此处就完结了，Feign微服务中还可以通过service-id进行调用，内部使用ribbon进行负载均衡，等后续有兴趣再继续更新，over~\n\n\n\n\n\n","source":"_posts/feign.md","raw":"---\ntitle: \"使用Feign发送http请求以及源码分析\"\nid: 20200115\ncategories:\n  - spring cloud\ndate: 2020-01-15 16:28:47\ntags: spring cloud\n---\n\n## 使用Feign发送http请求以及源码分析\n\n### 简介\nFeign是一个http请求调用的轻量级框架，可以用Java接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用。 \n\n### 注解(Annotation)\n注解 | 作用域 |  用法  \n-|-|-\n@RequestLine | 方法 | 定义HttpMethod和UriTemplate请求。 {expression}使用大括号括起来的值使用其相应的带@Param注释参数进行解析。 |\n@Param | 参数 | 作用于参数上，定义一个模板变量，其值将用于Expression按名称解析相应的模板。 |\n@Headers | 方法，类型 | 定义一个HeaderTemplate; 的变体UriTemplate。使用带@Param注释的值来解析相应的Expressions。在上使用时Type，该模板将应用于每个请求。当在上使用时Method，模板将仅应用于带注释的方法。 |\n@QueryMap | 参数 | 定义一个Map名称-值对或POJO，以扩展为查询字符串。 |\n@HeaderMap | 参数 | 定义一个Map名称-值对，以扩展为Http Headers |\n@Body | 方法 | 定义Template，类似于UriTemplate和HeaderTemplate，使用@Param注释值来解决相应的Expressions。 |\n\n> 如果需要将请求定向到其他主机，则需要在创建Feign客户端时提供的主机，或者要为每个请求提供目标主机，请包含一个java.net.URI参数，Feign将使用该值作为请求目标。\n> @RequestLine(\"POST /repos/{owner}/{repo}/issues\")\nvoid createIssue(URI host, Issue issue, @Param(\"owner\") String owner, @Param(\"repo\") String repo);\n\n### Demo\n#### ready\nidea创建一个springboot项目(此处本人项目端口设置为8089，可自行设置)，勾选openfeign如下图所示：\n![new project](/imgs/feign/new-project.jpg)\n\n#### test\n创建controller作为服务接口  \n\n```java\npackage com.reallinxu.cloud.controller;\n\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * @author linxu\n */\n@RestController\npublic class TestController {\n\n    /**\n     * demo1 -- @RequestLine @Param 简单使用\n     *\n     * @param param1\n     * @return\n     */\n    @GetMapping(\"/demo1/{param1}\")\n    public String demo1(@PathVariable String param1) {\n        return \"Demo1: hello\" + param1;\n    }\n\n    /**\n     * demo2 -- @Headers使用\n     *\n     * @param param1\n     * @return\n     */\n    @GetMapping(\"/demo2/{param1}\")\n    public String demo2(HttpServletRequest request, @PathVariable String param1) {\n        System.out.println(request.getHeader(\"Accept\"));\n        return \"Demo2: hello\" + param1;\n    }\n\n    /**\n     * demo3 -- @QueryMap使用 map\n     *\n     * @param param1\n     * @return\n     */\n    @GetMapping(\"/demo3\")\n    public String demo3(@RequestParam String param1, @RequestParam String param2) {\n        return \"Demo3: param1-\" + param1 + \" param2-\" + param2;\n    }\n\n    /**\n     * demo4 -- @QueryMap使用 pojo\n     *\n     * @param param1\n     * @return\n     */\n    @GetMapping(\"/demo4\")\n    public String demo4(@RequestParam String param1, @RequestParam String param2) {\n        return \"Demo4: param1-\" + param1 + \" param2-\" + param2;\n    }\n\n    /**\n     * demo5 -- @HeaderMap使用\n     *\n     * @param request\n     * @return\n     */\n    @GetMapping(\"/demo5\")\n    public String demo5(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"Accept\"));\n        System.out.println(request.getHeader(\"accept-encoding\"));\n        return \"Demo5: hello \";\n    }\n\n    /**\n     * demo6 -- @Body使用\n     *\n     * @param param\n     * @return\n     */\n    @PostMapping(\"/demo6\")\n    public String demo6(@RequestBody String param) {\n        return \"Demo6: param- \" + param;\n    }\n\n}\n```\n\n创建接口，用来作为feign客户端\n```java\npackage com.reallinxu.cloud.feign;\n\n\nimport com.reallinxu.cloud.entity.Demo4;\nimport feign.*;\n\nimport java.net.URI;\nimport java.util.Map;\n\n/**\n * feign接口\n *\n * @author linxu\n */\npublic interface TestInterface {\n\n    /**\n     * demo1 -- 基本用法\n     *\n     * @param param1\n     * @return\n     */\n    @RequestLine(\"GET /demo1/{param1}\")\n    String demo1(@Param(\"param1\") String param1);\n\n    /**\n     * demo2 -- @Headers使用\n     *\n     * @param param1\n     * @param param2\n     * @return\n     */\n    @RequestLine(\"GET /demo2/{param1}\")\n    @Headers(\"Accept: {param2}\")\n    String demo2(@Param(\"param1\") String param1, @Param(\"param2\") String param2);\n\n    /**\n     * demo3 -- @QueryMap使用 map\n     *\n     * @param paramMap\n     * @return\n     */\n    @RequestLine(\"GET /demo3\")\n    String demo3(@QueryMap Map paramMap);\n\n    /**\n     * demo4 -- @QueryMap使用 pojo\n     *\n     * @param demo4\n     * @return\n     */\n    @RequestLine(\"GET /demo4\")\n    String demo4(@QueryMap Demo4 demo4);\n\n    /**\n     * demo5 -- @HeaderMap使用 pojo\n     *\n     * @param demo5\n     * @return\n     */\n    @RequestLine(\"GET /demo5\")\n    String demo5(@HeaderMap Map demo5);\n\n    /**\n     * demo6\n     */\n    @RequestLine(\"POST /demo6\")\n    @Headers(\"Content-Type: application/json\")\n    @Body(\"%7B\\\"param1\\\": \\\"{param1}\\\", \\\"param2\\\": \\\"{param2}\\\"%7D\")\n    String demo6(@Param(\"param1\") String param1, @Param(\"param2\") String param2);\n\n    /**\n     * demoN -- 自定义host\n     *\n     * @param param1\n     * @return\n     */\n    @RequestLine(\"GET /demo1/{param1}\")\n    String demoN(URI host, @Param(\"param1\") String param1);\n\n}\n\n```\n创建一个Demo4用到的pojo\n```java\npackage com.reallinxu.cloud.entity;\n\npublic class Demo4 {\n    private String param1;\n\n    private String param2;\n\n    public String getParam1() {\n        return param1;\n    }\n\n    public void setParam1(String param1) {\n        this.param1 = param1;\n    }\n\n    public String getParam2() {\n        return param2;\n    }\n\n    public void setParam2(String param2) {\n        this.param2 = param2;\n    }\n}\n\n```\n\n创建测试案例进行测试\n```java\npackage com.reallinxu.cloud.test;\n\nimport com.reallinxu.cloud.entity.Demo4;\nimport com.reallinxu.cloud.feign.TestInterface;\nimport feign.Feign;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 测试类\n * @author linxu\n */\npublic class Test {\n    public static void main(String[] args) throws URISyntaxException {\n        TestInterface testInterface = Feign.builder()\n                        .target(TestInterface.class, \"http://localhost:8089\");\n\n        //demo1\n        System.out.println(testInterface.demo1(\"demo1 - 1\"));\n\n        //demo2\n        System.out.println(testInterface.demo2(\"demo2 - 1\", \"text/html\"));\n\n        //demo3\n        Map demo3Map = new HashMap<String,String>();\n        demo3Map.put(\"param1\",\"heihei\");\n        demo3Map.put(\"param2\",\"haha\");\n        System.out.println(testInterface.demo3(demo3Map));\n\n        //demo4\n        Demo4 demo4 = new Demo4();\n        demo4.setParam1(\"heihei\");\n        demo4.setParam2(\"haha\");\n        System.out.println(testInterface.demo4(demo4));\n\n        //demo5\n        Map demo5 = new HashMap<String,String>();\n        demo5.put(\"Accept\",\"text/html\");\n        demo5.put(\"accept-encoding\",\"gzip\");\n        System.out.println(testInterface.demo5(demo5));\n\n        //demo6\n        System.out.println(testInterface.demo6(\"heihei\",\"haha\"));\n\n        //自定义host，此处会访问8081端口，连接拒绝\n        URI a = new URI(\"http://localhost:8081\");\n        System.out.println(testInterface.demoN(a,\"demo2 - 2\"));\n    }\n}\n\n```\n启动springboot项目，运行Test查看执行结果。\n\n### 源码分析\n#### 定义feign客户端接口\n\tTestInterface testInterface = Feign.builder().target(TestInterface.class, \"http://localhost:8089\");\nfeign.builder()时可以设置一些参数，未设置为默认值，参数对应如下：\n```java\n//控制日志级别\n//NONE：不记录。\n//BASIC：只记录请求方法和URL以及响应状态代码和执行时间。\n//HEADERS：记录基本信息以及请求和响应头。\n//FULL：记录请求和响应的头、正文和元数据。\nthis.logLevel = Level.NONE; \n//定义在接口上有效的注释和值。通过registerClassAnnotation对@RequestLine、@param等注解的定义及对应处理\nthis.contract = new Default();\n//Http请求客户端，https调用时需要设置参数\nthis.client = new feign.Client.Default((SSLSocketFactory)null, (HostnameVerifier)null);\n//重试机制，设置重试期间与重试次数\nthis.retryer = new feign.Retryer.Default();\n//可以设置自己的记录日志方式\nthis.logger = new NoOpLogger();\n//定义编码器，请求参数为对象时调用，默认支持json与String\nthis.encoder = new feign.codec.Encoder.Default();\n//定义解码器，响应为对象时调用，将响应转为对应对象\nthis.decoder = new feign.codec.Decoder.Default();\n//如果@QueryMap使用的类型是对象会通过编码转为Map\nthis.queryMapEncoder = new feign.QueryMapEncoder.Default();\n//可以根据状态实现抛出适合项目场景的类型异常\nthis.errorDecoder = new feign.codec.ErrorDecoder.Default();\n//控制客户端请求的设置，设置连接时间，读取时间，是否支持3xx重定向\nthis.options = new Options();\n//控制反射方法的调用\nthis.invocationHandlerFactory = new feign.InvocationHandlerFactory.Default();\n//解码完成后自动关闭响应\nthis.closeAfterDecode = true;\n//apache许可证不允许使用文件啥啥玩意的，不管了\nthis.propagationPolicy = ExceptionPropagationPolicy.NONE;\n```\n接下来我们看下target方法，原理主要是根据接口生成一个Proxy代理类，主要方法是build().newInstance(target)\n![new project](/imgs/feign/feign-core1.jpg)\n特别注意框中的几个参数，我们debug进去看下，各自是什么东西\n![new project](/imgs/feign/feign-core2.jpg)\n可以看出nameToHandler中的key为接口中的方法，value为初始化Feign时设置的参数，注意target中有传入的host地址\n![new project](/imgs/feign/feign-core3.jpg)\nmethodToHandler也很简单直白，明显就是为了以后的反射\n![new project](/imgs/feign/feign-core4.jpg)\n``` java\ndefault void defaultMethod(){\n    System.out.println(\"我是默认方法\");\n}\n```\n我们将TestInterface接口中加入上方默认方法再debug可以看到defaultMehthodHandlers用于存放接口的默认方法,默认方法需要另外绑定到代理对象上。\n\n#### 调用feign客户端接口\n代理类就已经生成完成，接下来我们看调用。\n![new project](/imgs/feign/feign-core5.jpg)\n除了object中自带的一些方法其他的都走反射\n![new project](/imgs/feign/feign-core6.jpg)\n这里可以看到创建了RestTemplate用来发起请求，并使用创建时设置的配置\n![new project](/imgs/feign/feign-core7.jpg)\n创建RestTemplate时会将表达式进行转换为正确的连接\n![new project](/imgs/feign/feign-core8.jpg)\n通过client发送请求，整个请求完成。\n\n### end\nFeign的Http调用到此处就完结了，Feign微服务中还可以通过service-id进行调用，内部使用ribbon进行负载均衡，等后续有兴趣再继续更新，over~\n\n\n\n\n\n","slug":"feign","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7ue000tv8gphava5ssg","content":"<h2 id=\"使用Feign发送http请求以及源码分析\"><a href=\"#使用Feign发送http请求以及源码分析\" class=\"headerlink\" title=\"使用Feign发送http请求以及源码分析\"></a>使用Feign发送http请求以及源码分析</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Feign是一个http请求调用的轻量级框架，可以用Java接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用。 </p>\n<h3 id=\"注解-Annotation\"><a href=\"#注解-Annotation\" class=\"headerlink\" title=\"注解(Annotation)\"></a>注解(Annotation)</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>作用域</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@RequestLine</td>\n<td>方法</td>\n<td>定义HttpMethod和UriTemplate请求。 {expression}使用大括号括起来的值使用其相应的带@Param注释参数进行解析。</td>\n</tr>\n<tr>\n<td>@Param</td>\n<td>参数</td>\n<td>作用于参数上，定义一个模板变量，其值将用于Expression按名称解析相应的模板。</td>\n</tr>\n<tr>\n<td>@Headers</td>\n<td>方法，类型</td>\n<td>定义一个HeaderTemplate; 的变体UriTemplate。使用带@Param注释的值来解析相应的Expressions。在上使用时Type，该模板将应用于每个请求。当在上使用时Method，模板将仅应用于带注释的方法。</td>\n</tr>\n<tr>\n<td>@QueryMap</td>\n<td>参数</td>\n<td>定义一个Map名称-值对或POJO，以扩展为查询字符串。</td>\n</tr>\n<tr>\n<td>@HeaderMap</td>\n<td>参数</td>\n<td>定义一个Map名称-值对，以扩展为Http Headers</td>\n</tr>\n<tr>\n<td>@Body</td>\n<td>方法</td>\n<td>定义Template，类似于UriTemplate和HeaderTemplate，使用@Param注释值来解决相应的Expressions。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果需要将请求定向到其他主机，则需要在创建Feign客户端时提供的主机，或者要为每个请求提供目标主机，请包含一个java.net.URI参数，Feign将使用该值作为请求目标。<br>@RequestLine(“POST /repos/{owner}/{repo}/issues”)<br>void createIssue(URI host, Issue issue, @Param(“owner”) String owner, @Param(“repo”) String repo);</p>\n</blockquote>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><h4 id=\"ready\"><a href=\"#ready\" class=\"headerlink\" title=\"ready\"></a>ready</h4><p>idea创建一个springboot项目(此处本人项目端口设置为8089，可自行设置)，勾选openfeign如下图所示：<br><img src=\"/imgs/feign/new-project.jpg\" alt=\"new project\"></p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><p>创建controller作为服务接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reallinxu.cloud.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> linxu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo1 -- <span class=\"doctag\">@RequestLine</span> <span class=\"doctag\">@Param</span> 简单使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo1/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo1</span><span class=\"params\">(@PathVariable String param1)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo1: hello\"</span> + param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo2 -- <span class=\"doctag\">@Headers</span>使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo2/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo2</span><span class=\"params\">(HttpServletRequest request, @PathVariable String param1)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(request.getHeader(<span class=\"string\">\"Accept\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo2: hello\"</span> + param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo3 -- <span class=\"doctag\">@QueryMap</span>使用 map</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo3\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo3</span><span class=\"params\">(@RequestParam String param1, @RequestParam String param2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo3: param1-\"</span> + param1 + <span class=\"string\">\" param2-\"</span> + param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo4 -- <span class=\"doctag\">@QueryMap</span>使用 pojo</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo4\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo4</span><span class=\"params\">(@RequestParam String param1, @RequestParam String param2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo4: param1-\"</span> + param1 + <span class=\"string\">\" param2-\"</span> + param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo5 -- <span class=\"doctag\">@HeaderMap</span>使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo5\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo5</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(request.getHeader(<span class=\"string\">\"Accept\"</span>));</span><br><span class=\"line\">        System.out.println(request.getHeader(<span class=\"string\">\"accept-encoding\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo5: hello \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo6 -- <span class=\"doctag\">@Body</span>使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/demo6\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo6</span><span class=\"params\">(@RequestBody String param)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo6: param- \"</span> + param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建接口，用来作为feign客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reallinxu.cloud.feign;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.reallinxu.cloud.entity.Demo4;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * feign接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> linxu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo1 -- 基本用法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo1/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo1</span><span class=\"params\">(@Param(<span class=\"string\">\"param1\"</span>)</span> String param1)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo2 -- <span class=\"doctag\">@Headers</span>使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo2/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Headers</span>(<span class=\"string\">\"Accept: &#123;param2&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo2</span><span class=\"params\">(@Param(<span class=\"string\">\"param1\"</span>)</span> String param1, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"param2\"</span>)</span> String param2)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo3 -- <span class=\"doctag\">@QueryMap</span>使用 map</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> paramMap</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo3\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo3</span><span class=\"params\">(@QueryMap Map paramMap)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo4 -- <span class=\"doctag\">@QueryMap</span>使用 pojo</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> demo4</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo4\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo4</span><span class=\"params\">(@QueryMap Demo4 demo4)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo5 -- <span class=\"doctag\">@HeaderMap</span>使用 pojo</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> demo5</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo5\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo5</span><span class=\"params\">(@HeaderMap Map demo5)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"POST /demo6\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Headers</span>(<span class=\"string\">\"Content-Type: application/json\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Body</span>(<span class=\"string\">\"%7B\\\"param1\\\": \\\"&#123;param1&#125;\\\", \\\"param2\\\": \\\"&#123;param2&#125;\\\"%7D\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo6</span><span class=\"params\">(@Param(<span class=\"string\">\"param1\"</span>)</span> String param1, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"param2\"</span>)</span> String param2)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demoN -- 自定义host</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo1/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demoN</span><span class=\"params\">(URI host, @Param(<span class=\"string\">\"param1\"</span>)</span> String param1)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个Demo4用到的pojo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reallinxu.cloud.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String param1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String param2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getParam1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParam1</span><span class=\"params\">(String param1)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param1 = param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getParam2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParam2</span><span class=\"params\">(String param2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param2 = param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建测试案例进行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reallinxu.cloud.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.reallinxu.cloud.entity.Demo4;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.reallinxu.cloud.feign.TestInterface;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Feign;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URISyntaxException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> linxu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> URISyntaxException </span>&#123;</span><br><span class=\"line\">        TestInterface testInterface = Feign.builder()</span><br><span class=\"line\">                        .target(TestInterface.class, \"http://localhost:8089\");</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo1</span></span><br><span class=\"line\">        System.out.println(testInterface.demo1(<span class=\"string\">\"demo1 - 1\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo2</span></span><br><span class=\"line\">        System.out.println(testInterface.demo2(<span class=\"string\">\"demo2 - 1\"</span>, <span class=\"string\">\"text/html\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo3</span></span><br><span class=\"line\">        Map demo3Map = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">        demo3Map.put(<span class=\"string\">\"param1\"</span>,<span class=\"string\">\"heihei\"</span>);</span><br><span class=\"line\">        demo3Map.put(<span class=\"string\">\"param2\"</span>,<span class=\"string\">\"haha\"</span>);</span><br><span class=\"line\">        System.out.println(testInterface.demo3(demo3Map));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo4</span></span><br><span class=\"line\">        Demo4 demo4 = <span class=\"keyword\">new</span> Demo4();</span><br><span class=\"line\">        demo4.setParam1(<span class=\"string\">\"heihei\"</span>);</span><br><span class=\"line\">        demo4.setParam2(<span class=\"string\">\"haha\"</span>);</span><br><span class=\"line\">        System.out.println(testInterface.demo4(demo4));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo5</span></span><br><span class=\"line\">        Map demo5 = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">        demo5.put(<span class=\"string\">\"Accept\"</span>,<span class=\"string\">\"text/html\"</span>);</span><br><span class=\"line\">        demo5.put(<span class=\"string\">\"accept-encoding\"</span>,<span class=\"string\">\"gzip\"</span>);</span><br><span class=\"line\">        System.out.println(testInterface.demo5(demo5));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo6</span></span><br><span class=\"line\">        System.out.println(testInterface.demo6(<span class=\"string\">\"heihei\"</span>,<span class=\"string\">\"haha\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//自定义host，此处会访问8081端口，连接拒绝</span></span><br><span class=\"line\">        URI a = <span class=\"keyword\">new</span> URI(<span class=\"string\">\"http://localhost:8081\"</span>);</span><br><span class=\"line\">        System.out.println(testInterface.demoN(a,<span class=\"string\">\"demo2 - 2\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动springboot项目，运行Test查看执行结果。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><h4 id=\"定义feign客户端接口\"><a href=\"#定义feign客户端接口\" class=\"headerlink\" title=\"定义feign客户端接口\"></a>定义feign客户端接口</h4><pre><code>TestInterface testInterface = Feign.builder().target(TestInterface.class, &quot;http://localhost:8089&quot;);</code></pre><p>feign.builder()时可以设置一些参数，未设置为默认值，参数对应如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//控制日志级别</span></span><br><span class=\"line\"><span class=\"comment\">//NONE：不记录。</span></span><br><span class=\"line\"><span class=\"comment\">//BASIC：只记录请求方法和URL以及响应状态代码和执行时间。</span></span><br><span class=\"line\"><span class=\"comment\">//HEADERS：记录基本信息以及请求和响应头。</span></span><br><span class=\"line\"><span class=\"comment\">//FULL：记录请求和响应的头、正文和元数据。</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.logLevel = Level.NONE; </span><br><span class=\"line\"><span class=\"comment\">//定义在接口上有效的注释和值。通过registerClassAnnotation对@RequestLine、@param等注解的定义及对应处理</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.contract = <span class=\"keyword\">new</span> Default();</span><br><span class=\"line\"><span class=\"comment\">//Http请求客户端，https调用时需要设置参数</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.client = <span class=\"keyword\">new</span> feign.Client.Default((SSLSocketFactory)<span class=\"keyword\">null</span>, (HostnameVerifier)<span class=\"keyword\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">//重试机制，设置重试期间与重试次数</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.retryer = <span class=\"keyword\">new</span> feign.Retryer.Default();</span><br><span class=\"line\"><span class=\"comment\">//可以设置自己的记录日志方式</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.logger = <span class=\"keyword\">new</span> NoOpLogger();</span><br><span class=\"line\"><span class=\"comment\">//定义编码器，请求参数为对象时调用，默认支持json与String</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.encoder = <span class=\"keyword\">new</span> feign.codec.Encoder.Default();</span><br><span class=\"line\"><span class=\"comment\">//定义解码器，响应为对象时调用，将响应转为对应对象</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.decoder = <span class=\"keyword\">new</span> feign.codec.Decoder.Default();</span><br><span class=\"line\"><span class=\"comment\">//如果@QueryMap使用的类型是对象会通过编码转为Map</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.queryMapEncoder = <span class=\"keyword\">new</span> feign.QueryMapEncoder.Default();</span><br><span class=\"line\"><span class=\"comment\">//可以根据状态实现抛出适合项目场景的类型异常</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.errorDecoder = <span class=\"keyword\">new</span> feign.codec.ErrorDecoder.Default();</span><br><span class=\"line\"><span class=\"comment\">//控制客户端请求的设置，设置连接时间，读取时间，是否支持3xx重定向</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.options = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\"><span class=\"comment\">//控制反射方法的调用</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.invocationHandlerFactory = <span class=\"keyword\">new</span> feign.InvocationHandlerFactory.Default();</span><br><span class=\"line\"><span class=\"comment\">//解码完成后自动关闭响应</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.closeAfterDecode = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//apache许可证不允许使用文件啥啥玩意的，不管了</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.propagationPolicy = ExceptionPropagationPolicy.NONE;</span><br></pre></td></tr></table></figure>\n<p>接下来我们看下target方法，原理主要是根据接口生成一个Proxy代理类，主要方法是build().newInstance(target)<br><img src=\"/imgs/feign/feign-core1.jpg\" alt=\"new project\"><br>特别注意框中的几个参数，我们debug进去看下，各自是什么东西<br><img src=\"/imgs/feign/feign-core2.jpg\" alt=\"new project\"><br>可以看出nameToHandler中的key为接口中的方法，value为初始化Feign时设置的参数，注意target中有传入的host地址<br><img src=\"/imgs/feign/feign-core3.jpg\" alt=\"new project\"><br>methodToHandler也很简单直白，明显就是为了以后的反射<br><img src=\"/imgs/feign/feign-core4.jpg\" alt=\"new project\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">defaultMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"我是默认方法\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将TestInterface接口中加入上方默认方法再debug可以看到defaultMehthodHandlers用于存放接口的默认方法,默认方法需要另外绑定到代理对象上。</p>\n<h4 id=\"调用feign客户端接口\"><a href=\"#调用feign客户端接口\" class=\"headerlink\" title=\"调用feign客户端接口\"></a>调用feign客户端接口</h4><p>代理类就已经生成完成，接下来我们看调用。<br><img src=\"/imgs/feign/feign-core5.jpg\" alt=\"new project\"><br>除了object中自带的一些方法其他的都走反射<br><img src=\"/imgs/feign/feign-core6.jpg\" alt=\"new project\"><br>这里可以看到创建了RestTemplate用来发起请求，并使用创建时设置的配置<br><img src=\"/imgs/feign/feign-core7.jpg\" alt=\"new project\"><br>创建RestTemplate时会将表达式进行转换为正确的连接<br><img src=\"/imgs/feign/feign-core8.jpg\" alt=\"new project\"><br>通过client发送请求，整个请求完成。</p>\n<h3 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h3><p>Feign的Http调用到此处就完结了，Feign微服务中还可以通过service-id进行调用，内部使用ribbon进行负载均衡，等后续有兴趣再继续更新，over~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用Feign发送http请求以及源码分析\"><a href=\"#使用Feign发送http请求以及源码分析\" class=\"headerlink\" title=\"使用Feign发送http请求以及源码分析\"></a>使用Feign发送http请求以及源码分析</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Feign是一个http请求调用的轻量级框架，可以用Java接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用。 </p>\n<h3 id=\"注解-Annotation\"><a href=\"#注解-Annotation\" class=\"headerlink\" title=\"注解(Annotation)\"></a>注解(Annotation)</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>作用域</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@RequestLine</td>\n<td>方法</td>\n<td>定义HttpMethod和UriTemplate请求。 {expression}使用大括号括起来的值使用其相应的带@Param注释参数进行解析。</td>\n</tr>\n<tr>\n<td>@Param</td>\n<td>参数</td>\n<td>作用于参数上，定义一个模板变量，其值将用于Expression按名称解析相应的模板。</td>\n</tr>\n<tr>\n<td>@Headers</td>\n<td>方法，类型</td>\n<td>定义一个HeaderTemplate; 的变体UriTemplate。使用带@Param注释的值来解析相应的Expressions。在上使用时Type，该模板将应用于每个请求。当在上使用时Method，模板将仅应用于带注释的方法。</td>\n</tr>\n<tr>\n<td>@QueryMap</td>\n<td>参数</td>\n<td>定义一个Map名称-值对或POJO，以扩展为查询字符串。</td>\n</tr>\n<tr>\n<td>@HeaderMap</td>\n<td>参数</td>\n<td>定义一个Map名称-值对，以扩展为Http Headers</td>\n</tr>\n<tr>\n<td>@Body</td>\n<td>方法</td>\n<td>定义Template，类似于UriTemplate和HeaderTemplate，使用@Param注释值来解决相应的Expressions。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果需要将请求定向到其他主机，则需要在创建Feign客户端时提供的主机，或者要为每个请求提供目标主机，请包含一个java.net.URI参数，Feign将使用该值作为请求目标。<br>@RequestLine(“POST /repos/{owner}/{repo}/issues”)<br>void createIssue(URI host, Issue issue, @Param(“owner”) String owner, @Param(“repo”) String repo);</p>\n</blockquote>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><h4 id=\"ready\"><a href=\"#ready\" class=\"headerlink\" title=\"ready\"></a>ready</h4><p>idea创建一个springboot项目(此处本人项目端口设置为8089，可自行设置)，勾选openfeign如下图所示：<br><img src=\"/imgs/feign/new-project.jpg\" alt=\"new project\"></p>\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><p>创建controller作为服务接口  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reallinxu.cloud.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> linxu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo1 -- <span class=\"doctag\">@RequestLine</span> <span class=\"doctag\">@Param</span> 简单使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo1/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo1</span><span class=\"params\">(@PathVariable String param1)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo1: hello\"</span> + param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo2 -- <span class=\"doctag\">@Headers</span>使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo2/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo2</span><span class=\"params\">(HttpServletRequest request, @PathVariable String param1)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(request.getHeader(<span class=\"string\">\"Accept\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo2: hello\"</span> + param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo3 -- <span class=\"doctag\">@QueryMap</span>使用 map</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo3\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo3</span><span class=\"params\">(@RequestParam String param1, @RequestParam String param2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo3: param1-\"</span> + param1 + <span class=\"string\">\" param2-\"</span> + param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo4 -- <span class=\"doctag\">@QueryMap</span>使用 pojo</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo4\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo4</span><span class=\"params\">(@RequestParam String param1, @RequestParam String param2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo4: param1-\"</span> + param1 + <span class=\"string\">\" param2-\"</span> + param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo5 -- <span class=\"doctag\">@HeaderMap</span>使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo5\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo5</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(request.getHeader(<span class=\"string\">\"Accept\"</span>));</span><br><span class=\"line\">        System.out.println(request.getHeader(<span class=\"string\">\"accept-encoding\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo5: hello \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo6 -- <span class=\"doctag\">@Body</span>使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/demo6\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">demo6</span><span class=\"params\">(@RequestBody String param)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Demo6: param- \"</span> + param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建接口，用来作为feign客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reallinxu.cloud.feign;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.reallinxu.cloud.entity.Demo4;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * feign接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> linxu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo1 -- 基本用法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo1/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo1</span><span class=\"params\">(@Param(<span class=\"string\">\"param1\"</span>)</span> String param1)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo2 -- <span class=\"doctag\">@Headers</span>使用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo2/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Headers</span>(<span class=\"string\">\"Accept: &#123;param2&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo2</span><span class=\"params\">(@Param(<span class=\"string\">\"param1\"</span>)</span> String param1, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"param2\"</span>)</span> String param2)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo3 -- <span class=\"doctag\">@QueryMap</span>使用 map</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> paramMap</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo3\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo3</span><span class=\"params\">(@QueryMap Map paramMap)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo4 -- <span class=\"doctag\">@QueryMap</span>使用 pojo</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> demo4</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo4\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo4</span><span class=\"params\">(@QueryMap Demo4 demo4)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo5 -- <span class=\"doctag\">@HeaderMap</span>使用 pojo</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> demo5</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo5\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo5</span><span class=\"params\">(@HeaderMap Map demo5)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demo6</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"POST /demo6\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Headers</span>(<span class=\"string\">\"Content-Type: application/json\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Body</span>(<span class=\"string\">\"%7B\\\"param1\\\": \\\"&#123;param1&#125;\\\", \\\"param2\\\": \\\"&#123;param2&#125;\\\"%7D\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demo6</span><span class=\"params\">(@Param(<span class=\"string\">\"param1\"</span>)</span> String param1, @<span class=\"title\">Param</span><span class=\"params\">(<span class=\"string\">\"param2\"</span>)</span> String param2)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * demoN -- 自定义host</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestLine</span>(<span class=\"string\">\"GET /demo1/&#123;param1&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">demoN</span><span class=\"params\">(URI host, @Param(<span class=\"string\">\"param1\"</span>)</span> String param1)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个Demo4用到的pojo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reallinxu.cloud.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String param1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String param2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getParam1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParam1</span><span class=\"params\">(String param1)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param1 = param1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getParam2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParam2</span><span class=\"params\">(String param2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.param2 = param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建测试案例进行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reallinxu.cloud.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.reallinxu.cloud.entity.Demo4;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.reallinxu.cloud.feign.TestInterface;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Feign;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URISyntaxException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> linxu</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> URISyntaxException </span>&#123;</span><br><span class=\"line\">        TestInterface testInterface = Feign.builder()</span><br><span class=\"line\">                        .target(TestInterface.class, \"http://localhost:8089\");</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo1</span></span><br><span class=\"line\">        System.out.println(testInterface.demo1(<span class=\"string\">\"demo1 - 1\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo2</span></span><br><span class=\"line\">        System.out.println(testInterface.demo2(<span class=\"string\">\"demo2 - 1\"</span>, <span class=\"string\">\"text/html\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo3</span></span><br><span class=\"line\">        Map demo3Map = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">        demo3Map.put(<span class=\"string\">\"param1\"</span>,<span class=\"string\">\"heihei\"</span>);</span><br><span class=\"line\">        demo3Map.put(<span class=\"string\">\"param2\"</span>,<span class=\"string\">\"haha\"</span>);</span><br><span class=\"line\">        System.out.println(testInterface.demo3(demo3Map));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo4</span></span><br><span class=\"line\">        Demo4 demo4 = <span class=\"keyword\">new</span> Demo4();</span><br><span class=\"line\">        demo4.setParam1(<span class=\"string\">\"heihei\"</span>);</span><br><span class=\"line\">        demo4.setParam2(<span class=\"string\">\"haha\"</span>);</span><br><span class=\"line\">        System.out.println(testInterface.demo4(demo4));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo5</span></span><br><span class=\"line\">        Map demo5 = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">        demo5.put(<span class=\"string\">\"Accept\"</span>,<span class=\"string\">\"text/html\"</span>);</span><br><span class=\"line\">        demo5.put(<span class=\"string\">\"accept-encoding\"</span>,<span class=\"string\">\"gzip\"</span>);</span><br><span class=\"line\">        System.out.println(testInterface.demo5(demo5));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//demo6</span></span><br><span class=\"line\">        System.out.println(testInterface.demo6(<span class=\"string\">\"heihei\"</span>,<span class=\"string\">\"haha\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//自定义host，此处会访问8081端口，连接拒绝</span></span><br><span class=\"line\">        URI a = <span class=\"keyword\">new</span> URI(<span class=\"string\">\"http://localhost:8081\"</span>);</span><br><span class=\"line\">        System.out.println(testInterface.demoN(a,<span class=\"string\">\"demo2 - 2\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动springboot项目，运行Test查看执行结果。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><h4 id=\"定义feign客户端接口\"><a href=\"#定义feign客户端接口\" class=\"headerlink\" title=\"定义feign客户端接口\"></a>定义feign客户端接口</h4><pre><code>TestInterface testInterface = Feign.builder().target(TestInterface.class, &quot;http://localhost:8089&quot;);</code></pre><p>feign.builder()时可以设置一些参数，未设置为默认值，参数对应如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//控制日志级别</span></span><br><span class=\"line\"><span class=\"comment\">//NONE：不记录。</span></span><br><span class=\"line\"><span class=\"comment\">//BASIC：只记录请求方法和URL以及响应状态代码和执行时间。</span></span><br><span class=\"line\"><span class=\"comment\">//HEADERS：记录基本信息以及请求和响应头。</span></span><br><span class=\"line\"><span class=\"comment\">//FULL：记录请求和响应的头、正文和元数据。</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.logLevel = Level.NONE; </span><br><span class=\"line\"><span class=\"comment\">//定义在接口上有效的注释和值。通过registerClassAnnotation对@RequestLine、@param等注解的定义及对应处理</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.contract = <span class=\"keyword\">new</span> Default();</span><br><span class=\"line\"><span class=\"comment\">//Http请求客户端，https调用时需要设置参数</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.client = <span class=\"keyword\">new</span> feign.Client.Default((SSLSocketFactory)<span class=\"keyword\">null</span>, (HostnameVerifier)<span class=\"keyword\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">//重试机制，设置重试期间与重试次数</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.retryer = <span class=\"keyword\">new</span> feign.Retryer.Default();</span><br><span class=\"line\"><span class=\"comment\">//可以设置自己的记录日志方式</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.logger = <span class=\"keyword\">new</span> NoOpLogger();</span><br><span class=\"line\"><span class=\"comment\">//定义编码器，请求参数为对象时调用，默认支持json与String</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.encoder = <span class=\"keyword\">new</span> feign.codec.Encoder.Default();</span><br><span class=\"line\"><span class=\"comment\">//定义解码器，响应为对象时调用，将响应转为对应对象</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.decoder = <span class=\"keyword\">new</span> feign.codec.Decoder.Default();</span><br><span class=\"line\"><span class=\"comment\">//如果@QueryMap使用的类型是对象会通过编码转为Map</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.queryMapEncoder = <span class=\"keyword\">new</span> feign.QueryMapEncoder.Default();</span><br><span class=\"line\"><span class=\"comment\">//可以根据状态实现抛出适合项目场景的类型异常</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.errorDecoder = <span class=\"keyword\">new</span> feign.codec.ErrorDecoder.Default();</span><br><span class=\"line\"><span class=\"comment\">//控制客户端请求的设置，设置连接时间，读取时间，是否支持3xx重定向</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.options = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\"><span class=\"comment\">//控制反射方法的调用</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.invocationHandlerFactory = <span class=\"keyword\">new</span> feign.InvocationHandlerFactory.Default();</span><br><span class=\"line\"><span class=\"comment\">//解码完成后自动关闭响应</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.closeAfterDecode = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//apache许可证不允许使用文件啥啥玩意的，不管了</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.propagationPolicy = ExceptionPropagationPolicy.NONE;</span><br></pre></td></tr></table></figure>\n<p>接下来我们看下target方法，原理主要是根据接口生成一个Proxy代理类，主要方法是build().newInstance(target)<br><img src=\"/imgs/feign/feign-core1.jpg\" alt=\"new project\"><br>特别注意框中的几个参数，我们debug进去看下，各自是什么东西<br><img src=\"/imgs/feign/feign-core2.jpg\" alt=\"new project\"><br>可以看出nameToHandler中的key为接口中的方法，value为初始化Feign时设置的参数，注意target中有传入的host地址<br><img src=\"/imgs/feign/feign-core3.jpg\" alt=\"new project\"><br>methodToHandler也很简单直白，明显就是为了以后的反射<br><img src=\"/imgs/feign/feign-core4.jpg\" alt=\"new project\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">defaultMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"我是默认方法\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将TestInterface接口中加入上方默认方法再debug可以看到defaultMehthodHandlers用于存放接口的默认方法,默认方法需要另外绑定到代理对象上。</p>\n<h4 id=\"调用feign客户端接口\"><a href=\"#调用feign客户端接口\" class=\"headerlink\" title=\"调用feign客户端接口\"></a>调用feign客户端接口</h4><p>代理类就已经生成完成，接下来我们看调用。<br><img src=\"/imgs/feign/feign-core5.jpg\" alt=\"new project\"><br>除了object中自带的一些方法其他的都走反射<br><img src=\"/imgs/feign/feign-core6.jpg\" alt=\"new project\"><br>这里可以看到创建了RestTemplate用来发起请求，并使用创建时设置的配置<br><img src=\"/imgs/feign/feign-core7.jpg\" alt=\"new project\"><br>创建RestTemplate时会将表达式进行转换为正确的连接<br><img src=\"/imgs/feign/feign-core8.jpg\" alt=\"new project\"><br>通过client发送请求，整个请求完成。</p>\n<h3 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h3><p>Feign的Http调用到此处就完结了，Feign微服务中还可以通过service-id进行调用，内部使用ribbon进行负载均衡，等后续有兴趣再继续更新，over~</p>\n"},{"title":"git常用命令","id":"93","date":"2018-01-23T08:28:47.000Z","_content":"# Note #\n此处为git使用过程中的一些常用命令记录汇总。\n\n## 初始化绑定github并提交 ##\n** 第一步：建立git仓库 **  \ncd到你的本地项目根目录下，执行git命令  \n\n\tgit init  \n\n** 第二步：将项目的所有文件添加到仓库中 **  \n\n\tgit add .\n\t如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n\n** 第三步：将add的文件commit到仓库 **  \n\n\tgit commit -m \"注释语句\"\n \n** 第四步：重点来了，将本地的仓库关联到github上 **  \n\n\tgit remote add origin https://github.com/reallinxu/spring-boot-dubbo\n\t后面的https链接地址换成你自己的仓库url地址  \n\n** 第五步：同步仓库代码(新初始仓库则不需要这步) **  \n\n\tgit pull origin master  \n\n** 第六步，也就是最后一步，上传代码到github远程仓库 **  \n\n\tgit push -u origin master\n\n## 更新代码到github ##\n** 第一步：查看当前的git仓库状态，可以使用git status **\n\n\tgit status\n\n** 第二步：更新全部 **\n\n\tgit add *\n\n** 第三步：接着输入git commit -m \"更新说明\" **\n\n\tgit commit -m \"更新说明\"\n\n** 第四步：先git pull,拉取当前分支最新代码 **\n\n\tgit pull\n\n** 第五步：push到远程master分支上 **\n\n\tgit push origin master\n\n## 创建本地分支，合并到master分支\n** 第一步：本地创建新分支 **\n  \n\tgit branch test  \n\n** 第二步：切换到本地分支 **  \n  \n\tgit checkout test\n\n** 第三步：改动后commit **\n  \n\tgit add .\n\tgit commit -m 'test'\n\n** 第四步：切换回master分支 **\n  \n\tgit checkout master\n\n** 第五步：merge **\n\t\n\tgit merge test\n\n** 第六步：同步master **\n\t\n\tgit pull\n\n** 第七步:解决冲突 **\n\tpull时冲突\n\tgit stash 暂存本地未提交的修改内容\n\tgit stash list 查看保存在栈中的版本信息,stash@{0}就是刚才保存的标记\n\tgit pull   合并远程代码\n\t手动修改冲突文件，重新add，commit\n\t\n\tmerge时冲突\n\tmerge后手动修改冲突文件，重新add，commit\n\n** 第八步:提交到仓库 **\n\t\n\tgit push\n\n## git日常笔记 ##\n+ 查看当前commit记录\n\tgit cherry -v\n+ 合并其他分支commit记录\n\tgit cherry-pick <commit SHA>\n+ git撤销到某次commit\n\tgit reset --hard <commit_id> （commit_id为撤销到的id）\n+ git撤销某次commit\n\tgit revert <commit_id>\n+ git撤销已经push的记录（log中也不显示）  \n\tgit log  \n\tgit reset --soft 43dc0de914173a1a8793a7eac31dbb26057bbee4（回退到的版本号）\n\tgit push origin master --force","source":"_posts/git.md","raw":"---\ntitle: \"git常用命令\"\nid: 93\ncategories:\n  - Git\ndate: 2018-01-23 16:28:47\ntags:\n---\n# Note #\n此处为git使用过程中的一些常用命令记录汇总。\n\n## 初始化绑定github并提交 ##\n** 第一步：建立git仓库 **  \ncd到你的本地项目根目录下，执行git命令  \n\n\tgit init  \n\n** 第二步：将项目的所有文件添加到仓库中 **  \n\n\tgit add .\n\t如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n\n** 第三步：将add的文件commit到仓库 **  \n\n\tgit commit -m \"注释语句\"\n \n** 第四步：重点来了，将本地的仓库关联到github上 **  \n\n\tgit remote add origin https://github.com/reallinxu/spring-boot-dubbo\n\t后面的https链接地址换成你自己的仓库url地址  \n\n** 第五步：同步仓库代码(新初始仓库则不需要这步) **  \n\n\tgit pull origin master  \n\n** 第六步，也就是最后一步，上传代码到github远程仓库 **  \n\n\tgit push -u origin master\n\n## 更新代码到github ##\n** 第一步：查看当前的git仓库状态，可以使用git status **\n\n\tgit status\n\n** 第二步：更新全部 **\n\n\tgit add *\n\n** 第三步：接着输入git commit -m \"更新说明\" **\n\n\tgit commit -m \"更新说明\"\n\n** 第四步：先git pull,拉取当前分支最新代码 **\n\n\tgit pull\n\n** 第五步：push到远程master分支上 **\n\n\tgit push origin master\n\n## 创建本地分支，合并到master分支\n** 第一步：本地创建新分支 **\n  \n\tgit branch test  \n\n** 第二步：切换到本地分支 **  \n  \n\tgit checkout test\n\n** 第三步：改动后commit **\n  \n\tgit add .\n\tgit commit -m 'test'\n\n** 第四步：切换回master分支 **\n  \n\tgit checkout master\n\n** 第五步：merge **\n\t\n\tgit merge test\n\n** 第六步：同步master **\n\t\n\tgit pull\n\n** 第七步:解决冲突 **\n\tpull时冲突\n\tgit stash 暂存本地未提交的修改内容\n\tgit stash list 查看保存在栈中的版本信息,stash@{0}就是刚才保存的标记\n\tgit pull   合并远程代码\n\t手动修改冲突文件，重新add，commit\n\t\n\tmerge时冲突\n\tmerge后手动修改冲突文件，重新add，commit\n\n** 第八步:提交到仓库 **\n\t\n\tgit push\n\n## git日常笔记 ##\n+ 查看当前commit记录\n\tgit cherry -v\n+ 合并其他分支commit记录\n\tgit cherry-pick <commit SHA>\n+ git撤销到某次commit\n\tgit reset --hard <commit_id> （commit_id为撤销到的id）\n+ git撤销某次commit\n\tgit revert <commit_id>\n+ git撤销已经push的记录（log中也不显示）  \n\tgit log  \n\tgit reset --soft 43dc0de914173a1a8793a7eac31dbb26057bbee4（回退到的版本号）\n\tgit push origin master --force","slug":"git","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7uh000xv8gpdtg97efs","content":"<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><p>此处为git使用过程中的一些常用命令记录汇总。</p>\n<h2 id=\"初始化绑定github并提交\"><a href=\"#初始化绑定github并提交\" class=\"headerlink\" title=\"初始化绑定github并提交\"></a>初始化绑定github并提交</h2><p>** 第一步：建立git仓库 **<br>cd到你的本地项目根目录下，执行git命令  </p>\n<pre><code>git init  </code></pre><p>** 第二步：将项目的所有文件添加到仓库中 **  </p>\n<pre><code>git add .\n如果想添加某个特定的文件，只需把.换成特定的文件名即可**</code></pre><p>** 第三步：将add的文件commit到仓库 **  </p>\n<pre><code>git commit -m &quot;注释语句&quot;</code></pre><p>** 第四步：重点来了，将本地的仓库关联到github上 **  </p>\n<pre><code>git remote add origin https://github.com/reallinxu/spring-boot-dubbo\n后面的https链接地址换成你自己的仓库url地址  </code></pre><p>** 第五步：同步仓库代码(新初始仓库则不需要这步) **  </p>\n<pre><code>git pull origin master  </code></pre><p>** 第六步，也就是最后一步，上传代码到github远程仓库 **  </p>\n<pre><code>git push -u origin master</code></pre><h2 id=\"更新代码到github\"><a href=\"#更新代码到github\" class=\"headerlink\" title=\"更新代码到github\"></a>更新代码到github</h2><p>** 第一步：查看当前的git仓库状态，可以使用git status **</p>\n<pre><code>git status</code></pre><p>** 第二步：更新全部 **</p>\n<pre><code>git add *</code></pre><p>** 第三步：接着输入git commit -m “更新说明” **</p>\n<pre><code>git commit -m &quot;更新说明&quot;</code></pre><p>** 第四步：先git pull,拉取当前分支最新代码 **</p>\n<pre><code>git pull</code></pre><p>** 第五步：push到远程master分支上 **</p>\n<pre><code>git push origin master</code></pre><h2 id=\"创建本地分支，合并到master分支\"><a href=\"#创建本地分支，合并到master分支\" class=\"headerlink\" title=\"创建本地分支，合并到master分支\"></a>创建本地分支，合并到master分支</h2><p>** 第一步：本地创建新分支 **</p>\n<pre><code>git branch test  </code></pre><p>** 第二步：切换到本地分支 **  </p>\n<pre><code>git checkout test</code></pre><p>** 第三步：改动后commit **</p>\n<pre><code>git add .\ngit commit -m &apos;test&apos;</code></pre><p>** 第四步：切换回master分支 **</p>\n<pre><code>git checkout master</code></pre><p>** 第五步：merge **</p>\n<pre><code>git merge test</code></pre><p>** 第六步：同步master **</p>\n<pre><code>git pull</code></pre><p>** 第七步:解决冲突 **<br>    pull时冲突<br>    git stash 暂存本地未提交的修改内容<br>    git stash list 查看保存在栈中的版本信息,stash@{0}就是刚才保存的标记<br>    git pull   合并远程代码<br>    手动修改冲突文件，重新add，commit</p>\n<pre><code>merge时冲突\nmerge后手动修改冲突文件，重新add，commit</code></pre><p>** 第八步:提交到仓库 **</p>\n<pre><code>git push</code></pre><h2 id=\"git日常笔记\"><a href=\"#git日常笔记\" class=\"headerlink\" title=\"git日常笔记\"></a>git日常笔记</h2><ul>\n<li>查看当前commit记录<br>  git cherry -v</li>\n<li>合并其他分支commit记录<br>  git cherry-pick <commit SHA></li>\n<li>git撤销到某次commit<br>  git reset –hard <commit_id> （commit_id为撤销到的id）</li>\n<li>git撤销某次commit<br>  git revert <commit_id></li>\n<li>git撤销已经push的记录（log中也不显示）<br>  git log<br>  git reset –soft 43dc0de914173a1a8793a7eac31dbb26057bbee4（回退到的版本号）<br>  git push origin master –force</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><p>此处为git使用过程中的一些常用命令记录汇总。</p>\n<h2 id=\"初始化绑定github并提交\"><a href=\"#初始化绑定github并提交\" class=\"headerlink\" title=\"初始化绑定github并提交\"></a>初始化绑定github并提交</h2><p>** 第一步：建立git仓库 **<br>cd到你的本地项目根目录下，执行git命令  </p>\n<pre><code>git init  </code></pre><p>** 第二步：将项目的所有文件添加到仓库中 **  </p>\n<pre><code>git add .\n如果想添加某个特定的文件，只需把.换成特定的文件名即可**</code></pre><p>** 第三步：将add的文件commit到仓库 **  </p>\n<pre><code>git commit -m &quot;注释语句&quot;</code></pre><p>** 第四步：重点来了，将本地的仓库关联到github上 **  </p>\n<pre><code>git remote add origin https://github.com/reallinxu/spring-boot-dubbo\n后面的https链接地址换成你自己的仓库url地址  </code></pre><p>** 第五步：同步仓库代码(新初始仓库则不需要这步) **  </p>\n<pre><code>git pull origin master  </code></pre><p>** 第六步，也就是最后一步，上传代码到github远程仓库 **  </p>\n<pre><code>git push -u origin master</code></pre><h2 id=\"更新代码到github\"><a href=\"#更新代码到github\" class=\"headerlink\" title=\"更新代码到github\"></a>更新代码到github</h2><p>** 第一步：查看当前的git仓库状态，可以使用git status **</p>\n<pre><code>git status</code></pre><p>** 第二步：更新全部 **</p>\n<pre><code>git add *</code></pre><p>** 第三步：接着输入git commit -m “更新说明” **</p>\n<pre><code>git commit -m &quot;更新说明&quot;</code></pre><p>** 第四步：先git pull,拉取当前分支最新代码 **</p>\n<pre><code>git pull</code></pre><p>** 第五步：push到远程master分支上 **</p>\n<pre><code>git push origin master</code></pre><h2 id=\"创建本地分支，合并到master分支\"><a href=\"#创建本地分支，合并到master分支\" class=\"headerlink\" title=\"创建本地分支，合并到master分支\"></a>创建本地分支，合并到master分支</h2><p>** 第一步：本地创建新分支 **</p>\n<pre><code>git branch test  </code></pre><p>** 第二步：切换到本地分支 **  </p>\n<pre><code>git checkout test</code></pre><p>** 第三步：改动后commit **</p>\n<pre><code>git add .\ngit commit -m &apos;test&apos;</code></pre><p>** 第四步：切换回master分支 **</p>\n<pre><code>git checkout master</code></pre><p>** 第五步：merge **</p>\n<pre><code>git merge test</code></pre><p>** 第六步：同步master **</p>\n<pre><code>git pull</code></pre><p>** 第七步:解决冲突 **<br>    pull时冲突<br>    git stash 暂存本地未提交的修改内容<br>    git stash list 查看保存在栈中的版本信息,stash@{0}就是刚才保存的标记<br>    git pull   合并远程代码<br>    手动修改冲突文件，重新add，commit</p>\n<pre><code>merge时冲突\nmerge后手动修改冲突文件，重新add，commit</code></pre><p>** 第八步:提交到仓库 **</p>\n<pre><code>git push</code></pre><h2 id=\"git日常笔记\"><a href=\"#git日常笔记\" class=\"headerlink\" title=\"git日常笔记\"></a>git日常笔记</h2><ul>\n<li>查看当前commit记录<br>  git cherry -v</li>\n<li>合并其他分支commit记录<br>  git cherry-pick <commit SHA></li>\n<li>git撤销到某次commit<br>  git reset –hard <commit_id> （commit_id为撤销到的id）</li>\n<li>git撤销某次commit<br>  git revert <commit_id></li>\n<li>git撤销已经push的记录（log中也不显示）<br>  git log<br>  git reset –soft 43dc0de914173a1a8793a7eac31dbb26057bbee4（回退到的版本号）<br>  git push origin master –force</li>\n</ul>\n"},{"title":" Hello，World！","id":"1","date":"2017-12-18T09:28:35.000Z","_content":"\n第一次搭建，有点小激动，感谢夏某某的服务器和指导。","source":"_posts/helloworld.md","raw":"---\ntitle: \" Hello，World！\"\nid: 1\ncategories:\n  - Essay\ndate: 2017-12-18 17:28:35\ntags: Essay\n---\n\n第一次搭建，有点小激动，感谢夏某某的服务器和指导。","slug":"helloworld","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7uj000zv8gp723l0sos","content":"<p>第一次搭建，有点小激动，感谢夏某某的服务器和指导。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一次搭建，有点小激动，感谢夏某某的服务器和指导。</p>\n"},{"title":"a=a++引发的思考","id":"67","date":"2018-04-26T02:20:31.000Z","author":["linxu"],"_content":"# 前言 #\n\n最近越来越感觉到java基础的重要性，开始重新拾起封存已久的《Thinking in java》,偶然的一个小案例引发了此次的思考。\n\n# Demo #\n\n首先一个小的demo：\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 1;\n\t\t\tSystem.out.println(\"1:\"+ a);\n\t\t\ta++;\n\t\t\tSystem.out.println(\"2:\"+ a);\n\t\t\t++a;\n\t\t\tSystem.out.println(\"3:\"+ a);\n\t\t\ta = ++a;\n\t\t\tSystem.out.println(\"4:\"+ a);\n\t\t\ta = a++;\n\t\t\tSystem.out.println(\"5:\"+ a);\n\t\t\ta = a++ + ++a;\n\t\t\tSystem.out.println(\"6:\"+ a);\n\t\t\tint b = a++;\n\t\t\tSystem.out.println(\"7:\"+ a);\n\t\t\tSystem.out.println(\"8:\"+ b);\n\t\t}\n\t}\n\njava入门时都会遇到过的小案例，前三个答案相信都会随口而出，但是第四个才是此次探索的问题所在，上面答案如下：\n\t1:1\n\t2:2\n\t3:3\n\t4:4\n\t5:4\n\t6:10\n\t7:11\n\t8:10\n回答正确的可以绕过本篇文章，回答错误的跟笔者一起探索下去吧。\n\n# 代码分析 #\n1. a++ 和 ++a 区别不在过多赘述，a++是先执行表达式后++，++a是先++再执行表达式。\n2. a = ++a; 从上的结果可以得出a=3，此时a先++等于4，再赋值给a。此时a=4无异议。\n3. a = a++; 从上的结果可以得出a=4，此时a先被赋值为4，再执行++，此时a=5。为什么++未生效呢？这篇文章主要就是这个问题的探讨，具体原因可以参考下面对jVM的分析。\n4. a = a++ + a++; 从上的结果可以得出a=4，运算时第一个a仍为4，然后经过a++为5，又因为++a先执行++，此时a=6，所以结果4+6=10。\n5. b = a++; 从上的结果可以得出a=10，此时b先被a赋值为10,a再执行++为11。对比上面的第三点，此时++也生效，什么原因？见JVM分析。\n\n# JVM分析 #\n\n上述Demo可以通过java自带的javap查看字节码文件，命令如下：\n\tjavac Test.java\n\tjavap -c Test.class\n觉得分不清的可以分别对语句进行查看字节码文件，以下是笔者的探索过程。\n1. a++和++a的字节码分析(两个字节码基本相同)：\n\t   0: iconst_1\t\t\t\t\t1压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(1)存入局部变量1(a)\n       2: iinc          1, 1\t\t  变量1自加（a++或++a操作，自加后变量1的值为2）  \n\n2. a=++a的字节码分析：\n\t   0: iconst_3\t\t\t\t\t3压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(3)存入局部变量1(a)\n       2: iinc          1, 1\t\t  变量1自加（++a操作，自加后变量1的值为4）\n       5: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为4）\n       6: istore_1\t\t\t\t\t将栈顶值（4）存入变量1（=操作）\n\t\t\t\t\n3. a=a++的字节码分析：\n       0: iconst_4\t\t\t\t\t4压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(4)存入局部变量1(a)\n       2: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为4）\n       3: iinc          1, 1\t\t  变量1自加（a++操作，自加后变量1的值为5）\n       6: istore_1\t\t\t\t\t将栈顶值（4）存入变量1（=操作）  \n\n4. b=a++的字节码分析：\n       0: bipush        10\t\t\t10压入栈顶\n       2: istore_1\t\t\t\t\t栈顶值(10)存入局部变量1(a)\n       3: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为10）\n       4: iinc          1, 1\t\t  变量1自加（a++操作，自加后变量1的值为11）\n       7: istore_2\t\t\t\t\t栈顶值(10)存入局部变量2(b)（=操作）\n        \n从3可以看出a=a++,a++操作后并没有压入栈，返回a的值为栈顶值4，所以a从5又被赋值为4。对于1,2本质上只是对变量操作，并没有计算的赋值逻辑，对于4，变量b被赋值栈顶值为10，变量a自加后为11。以上为思考全过程，如果不足请指正。\n\n\n\n\n\n","source":"_posts/java a=a++引发的思考.md","raw":"---\ntitle: \"a=a++引发的思考\"\ntags:\n  - java基础\nid: 67\ncategories:\n  - Java\ndate: 2018-04-26 10:20:31\nauthor: \n  - linxu\n---\n# 前言 #\n\n最近越来越感觉到java基础的重要性，开始重新拾起封存已久的《Thinking in java》,偶然的一个小案例引发了此次的思考。\n\n# Demo #\n\n首先一个小的demo：\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 1;\n\t\t\tSystem.out.println(\"1:\"+ a);\n\t\t\ta++;\n\t\t\tSystem.out.println(\"2:\"+ a);\n\t\t\t++a;\n\t\t\tSystem.out.println(\"3:\"+ a);\n\t\t\ta = ++a;\n\t\t\tSystem.out.println(\"4:\"+ a);\n\t\t\ta = a++;\n\t\t\tSystem.out.println(\"5:\"+ a);\n\t\t\ta = a++ + ++a;\n\t\t\tSystem.out.println(\"6:\"+ a);\n\t\t\tint b = a++;\n\t\t\tSystem.out.println(\"7:\"+ a);\n\t\t\tSystem.out.println(\"8:\"+ b);\n\t\t}\n\t}\n\njava入门时都会遇到过的小案例，前三个答案相信都会随口而出，但是第四个才是此次探索的问题所在，上面答案如下：\n\t1:1\n\t2:2\n\t3:3\n\t4:4\n\t5:4\n\t6:10\n\t7:11\n\t8:10\n回答正确的可以绕过本篇文章，回答错误的跟笔者一起探索下去吧。\n\n# 代码分析 #\n1. a++ 和 ++a 区别不在过多赘述，a++是先执行表达式后++，++a是先++再执行表达式。\n2. a = ++a; 从上的结果可以得出a=3，此时a先++等于4，再赋值给a。此时a=4无异议。\n3. a = a++; 从上的结果可以得出a=4，此时a先被赋值为4，再执行++，此时a=5。为什么++未生效呢？这篇文章主要就是这个问题的探讨，具体原因可以参考下面对jVM的分析。\n4. a = a++ + a++; 从上的结果可以得出a=4，运算时第一个a仍为4，然后经过a++为5，又因为++a先执行++，此时a=6，所以结果4+6=10。\n5. b = a++; 从上的结果可以得出a=10，此时b先被a赋值为10,a再执行++为11。对比上面的第三点，此时++也生效，什么原因？见JVM分析。\n\n# JVM分析 #\n\n上述Demo可以通过java自带的javap查看字节码文件，命令如下：\n\tjavac Test.java\n\tjavap -c Test.class\n觉得分不清的可以分别对语句进行查看字节码文件，以下是笔者的探索过程。\n1. a++和++a的字节码分析(两个字节码基本相同)：\n\t   0: iconst_1\t\t\t\t\t1压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(1)存入局部变量1(a)\n       2: iinc          1, 1\t\t  变量1自加（a++或++a操作，自加后变量1的值为2）  \n\n2. a=++a的字节码分析：\n\t   0: iconst_3\t\t\t\t\t3压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(3)存入局部变量1(a)\n       2: iinc          1, 1\t\t  变量1自加（++a操作，自加后变量1的值为4）\n       5: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为4）\n       6: istore_1\t\t\t\t\t将栈顶值（4）存入变量1（=操作）\n\t\t\t\t\n3. a=a++的字节码分析：\n       0: iconst_4\t\t\t\t\t4压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(4)存入局部变量1(a)\n       2: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为4）\n       3: iinc          1, 1\t\t  变量1自加（a++操作，自加后变量1的值为5）\n       6: istore_1\t\t\t\t\t将栈顶值（4）存入变量1（=操作）  \n\n4. b=a++的字节码分析：\n       0: bipush        10\t\t\t10压入栈顶\n       2: istore_1\t\t\t\t\t栈顶值(10)存入局部变量1(a)\n       3: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为10）\n       4: iinc          1, 1\t\t  变量1自加（a++操作，自加后变量1的值为11）\n       7: istore_2\t\t\t\t\t栈顶值(10)存入局部变量2(b)（=操作）\n        \n从3可以看出a=a++,a++操作后并没有压入栈，返回a的值为栈顶值4，所以a从5又被赋值为4。对于1,2本质上只是对变量操作，并没有计算的赋值逻辑，对于4，变量b被赋值栈顶值为10，变量a自加后为11。以上为思考全过程，如果不足请指正。\n\n\n\n\n\n","slug":"java a=a++引发的思考","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7ul0013v8gpd9m60jfm","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近越来越感觉到java基础的重要性，开始重新拾起封存已久的《Thinking in java》,偶然的一个小案例引发了此次的思考。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>首先一个小的demo：</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(&quot;1:&quot;+ a);\n        a++;\n        System.out.println(&quot;2:&quot;+ a);\n        ++a;\n        System.out.println(&quot;3:&quot;+ a);\n        a = ++a;\n        System.out.println(&quot;4:&quot;+ a);\n        a = a++;\n        System.out.println(&quot;5:&quot;+ a);\n        a = a++ + ++a;\n        System.out.println(&quot;6:&quot;+ a);\n        int b = a++;\n        System.out.println(&quot;7:&quot;+ a);\n        System.out.println(&quot;8:&quot;+ b);\n    }\n}</code></pre><p>java入门时都会遇到过的小案例，前三个答案相信都会随口而出，但是第四个才是此次探索的问题所在，上面答案如下：<br>    1:1<br>    2:2<br>    3:3<br>    4:4<br>    5:4<br>    6:10<br>    7:11<br>    8:10<br>回答正确的可以绕过本篇文章，回答错误的跟笔者一起探索下去吧。</p>\n<h1 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h1><ol>\n<li>a++ 和 ++a 区别不在过多赘述，a++是先执行表达式后++，++a是先++再执行表达式。</li>\n<li>a = ++a; 从上的结果可以得出a=3，此时a先++等于4，再赋值给a。此时a=4无异议。</li>\n<li>a = a++; 从上的结果可以得出a=4，此时a先被赋值为4，再执行++，此时a=5。为什么++未生效呢？这篇文章主要就是这个问题的探讨，具体原因可以参考下面对jVM的分析。</li>\n<li>a = a++ + a++; 从上的结果可以得出a=4，运算时第一个a仍为4，然后经过a++为5，又因为++a先执行++，此时a=6，所以结果4+6=10。</li>\n<li>b = a++; 从上的结果可以得出a=10，此时b先被a赋值为10,a再执行++为11。对比上面的第三点，此时++也生效，什么原因？见JVM分析。</li>\n</ol>\n<h1 id=\"JVM分析\"><a href=\"#JVM分析\" class=\"headerlink\" title=\"JVM分析\"></a>JVM分析</h1><p>上述Demo可以通过java自带的javap查看字节码文件，命令如下：<br>    javac Test.java<br>    javap -c Test.class<br>觉得分不清的可以分别对语句进行查看字节码文件，以下是笔者的探索过程。</p>\n<ol>\n<li><p>a++和++a的字节码分析(两个字节码基本相同)：</p>\n<pre><code>0: iconst_1                    1压入栈顶\n1: istore_1                    栈顶值(1)存入局部变量1(a)\n2: iinc          1, 1          变量1自加（a++或++a操作，自加后变量1的值为2）  </code></pre></li>\n<li><p>a=++a的字节码分析：</p>\n<pre><code>0: iconst_3                    3压入栈顶\n1: istore_1                    栈顶值(3)存入局部变量1(a)\n2: iinc          1, 1          变量1自加（++a操作，自加后变量1的值为4）\n5: iload_1                     变量1的值压入栈顶（值为4）\n6: istore_1                    将栈顶值（4）存入变量1（=操作）</code></pre></li>\n<li><p>a=a++的字节码分析：</p>\n<pre><code>0: iconst_4                    4压入栈顶\n1: istore_1                    栈顶值(4)存入局部变量1(a)\n2: iload_1                     变量1的值压入栈顶（值为4）\n3: iinc          1, 1          变量1自加（a++操作，自加后变量1的值为5）\n6: istore_1                    将栈顶值（4）存入变量1（=操作）  </code></pre></li>\n<li><p>b=a++的字节码分析：</p>\n<pre><code>0: bipush        10            10压入栈顶\n2: istore_1                    栈顶值(10)存入局部变量1(a)\n3: iload_1                     变量1的值压入栈顶（值为10）\n4: iinc          1, 1          变量1自加（a++操作，自加后变量1的值为11）\n7: istore_2                    栈顶值(10)存入局部变量2(b)（=操作）</code></pre></li>\n</ol>\n<p>从3可以看出a=a++,a++操作后并没有压入栈，返回a的值为栈顶值4，所以a从5又被赋值为4。对于1,2本质上只是对变量操作，并没有计算的赋值逻辑，对于4，变量b被赋值栈顶值为10，变量a自加后为11。以上为思考全过程，如果不足请指正。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近越来越感觉到java基础的重要性，开始重新拾起封存已久的《Thinking in java》,偶然的一个小案例引发了此次的思考。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>首先一个小的demo：</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(&quot;1:&quot;+ a);\n        a++;\n        System.out.println(&quot;2:&quot;+ a);\n        ++a;\n        System.out.println(&quot;3:&quot;+ a);\n        a = ++a;\n        System.out.println(&quot;4:&quot;+ a);\n        a = a++;\n        System.out.println(&quot;5:&quot;+ a);\n        a = a++ + ++a;\n        System.out.println(&quot;6:&quot;+ a);\n        int b = a++;\n        System.out.println(&quot;7:&quot;+ a);\n        System.out.println(&quot;8:&quot;+ b);\n    }\n}</code></pre><p>java入门时都会遇到过的小案例，前三个答案相信都会随口而出，但是第四个才是此次探索的问题所在，上面答案如下：<br>    1:1<br>    2:2<br>    3:3<br>    4:4<br>    5:4<br>    6:10<br>    7:11<br>    8:10<br>回答正确的可以绕过本篇文章，回答错误的跟笔者一起探索下去吧。</p>\n<h1 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h1><ol>\n<li>a++ 和 ++a 区别不在过多赘述，a++是先执行表达式后++，++a是先++再执行表达式。</li>\n<li>a = ++a; 从上的结果可以得出a=3，此时a先++等于4，再赋值给a。此时a=4无异议。</li>\n<li>a = a++; 从上的结果可以得出a=4，此时a先被赋值为4，再执行++，此时a=5。为什么++未生效呢？这篇文章主要就是这个问题的探讨，具体原因可以参考下面对jVM的分析。</li>\n<li>a = a++ + a++; 从上的结果可以得出a=4，运算时第一个a仍为4，然后经过a++为5，又因为++a先执行++，此时a=6，所以结果4+6=10。</li>\n<li>b = a++; 从上的结果可以得出a=10，此时b先被a赋值为10,a再执行++为11。对比上面的第三点，此时++也生效，什么原因？见JVM分析。</li>\n</ol>\n<h1 id=\"JVM分析\"><a href=\"#JVM分析\" class=\"headerlink\" title=\"JVM分析\"></a>JVM分析</h1><p>上述Demo可以通过java自带的javap查看字节码文件，命令如下：<br>    javac Test.java<br>    javap -c Test.class<br>觉得分不清的可以分别对语句进行查看字节码文件，以下是笔者的探索过程。</p>\n<ol>\n<li><p>a++和++a的字节码分析(两个字节码基本相同)：</p>\n<pre><code>0: iconst_1                    1压入栈顶\n1: istore_1                    栈顶值(1)存入局部变量1(a)\n2: iinc          1, 1          变量1自加（a++或++a操作，自加后变量1的值为2）  </code></pre></li>\n<li><p>a=++a的字节码分析：</p>\n<pre><code>0: iconst_3                    3压入栈顶\n1: istore_1                    栈顶值(3)存入局部变量1(a)\n2: iinc          1, 1          变量1自加（++a操作，自加后变量1的值为4）\n5: iload_1                     变量1的值压入栈顶（值为4）\n6: istore_1                    将栈顶值（4）存入变量1（=操作）</code></pre></li>\n<li><p>a=a++的字节码分析：</p>\n<pre><code>0: iconst_4                    4压入栈顶\n1: istore_1                    栈顶值(4)存入局部变量1(a)\n2: iload_1                     变量1的值压入栈顶（值为4）\n3: iinc          1, 1          变量1自加（a++操作，自加后变量1的值为5）\n6: istore_1                    将栈顶值（4）存入变量1（=操作）  </code></pre></li>\n<li><p>b=a++的字节码分析：</p>\n<pre><code>0: bipush        10            10压入栈顶\n2: istore_1                    栈顶值(10)存入局部变量1(a)\n3: iload_1                     变量1的值压入栈顶（值为10）\n4: iinc          1, 1          变量1自加（a++操作，自加后变量1的值为11）\n7: istore_2                    栈顶值(10)存入局部变量2(b)（=操作）</code></pre></li>\n</ol>\n<p>从3可以看出a=a++,a++操作后并没有压入栈，返回a的值为栈顶值4，所以a从5又被赋值为4。对于1,2本质上只是对变量操作，并没有计算的赋值逻辑，对于4，变量b被赋值栈顶值为10，变量a自加后为11。以上为思考全过程，如果不足请指正。</p>\n"},{"title":" java8初识","id":"156","date":"2018-03-13T01:19:22.000Z","_content":"\n1. 接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)\n\n2. 一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)\n\n3. Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)\n\n4. 我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)\n\n5. lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)\n\n6. lambda表达式可以访问全部变量。(test3)\n\n7. 当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)\n\n8. 当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)\n\n9. 数据流基础操作。(test5)\n\n10. 数据流衔接操作只在终止操作调用时被执行。(test6)\n\n11. 衔接操作是垂直进行的，数据流执行顺序研究.(test6)\n\n12. Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)\n\n13. 要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)\n\n14. Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)\n\n15. executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)\n\nPS:括号内为测试代码，代码地址：https://github.com/reallinxu/java8Test","source":"_posts/java8.md","raw":"---\ntitle: \" java8初识\"\nid: 156\ncategories:\n  - Java\ndate: 2018-03-13 09:19:22\ntags: java\n---\n\n1. 接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)\n\n2. 一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)\n\n3. Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)\n\n4. 我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)\n\n5. lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)\n\n6. lambda表达式可以访问全部变量。(test3)\n\n7. 当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)\n\n8. 当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)\n\n9. 数据流基础操作。(test5)\n\n10. 数据流衔接操作只在终止操作调用时被执行。(test6)\n\n11. 衔接操作是垂直进行的，数据流执行顺序研究.(test6)\n\n12. Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)\n\n13. 要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)\n\n14. Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)\n\n15. executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)\n\nPS:括号内为测试代码，代码地址：https://github.com/reallinxu/java8Test","slug":"java8","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7up0015v8gp6p8j6t4i","content":"<ol>\n<li><p>接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)</p>\n</li>\n<li><p>一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)</p>\n</li>\n<li><p>Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)</p>\n</li>\n<li><p>我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)</p>\n</li>\n<li><p>lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)</p>\n</li>\n<li><p>lambda表达式可以访问全部变量。(test3)</p>\n</li>\n<li><p>当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)</p>\n</li>\n<li><p>当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)</p>\n</li>\n<li><p>数据流基础操作。(test5)</p>\n</li>\n<li><p>数据流衔接操作只在终止操作调用时被执行。(test6)</p>\n</li>\n<li><p>衔接操作是垂直进行的，数据流执行顺序研究.(test6)</p>\n</li>\n<li><p>Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)</p>\n</li>\n<li><p>要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)</p>\n</li>\n<li><p>Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)</p>\n</li>\n<li><p>executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)</p>\n</li>\n</ol>\n<p>PS:括号内为测试代码，代码地址：<a href=\"https://github.com/reallinxu/java8Test\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/java8Test</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)</p>\n</li>\n<li><p>一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)</p>\n</li>\n<li><p>Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)</p>\n</li>\n<li><p>我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)</p>\n</li>\n<li><p>lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)</p>\n</li>\n<li><p>lambda表达式可以访问全部变量。(test3)</p>\n</li>\n<li><p>当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)</p>\n</li>\n<li><p>当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)</p>\n</li>\n<li><p>数据流基础操作。(test5)</p>\n</li>\n<li><p>数据流衔接操作只在终止操作调用时被执行。(test6)</p>\n</li>\n<li><p>衔接操作是垂直进行的，数据流执行顺序研究.(test6)</p>\n</li>\n<li><p>Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)</p>\n</li>\n<li><p>要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)</p>\n</li>\n<li><p>Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)</p>\n</li>\n<li><p>executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)</p>\n</li>\n</ol>\n<p>PS:括号内为测试代码，代码地址：<a href=\"https://github.com/reallinxu/java8Test\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/java8Test</a></p>\n"},{"title":"java多线程与高并发---(一)线程与锁基础","id":"1000","date":"2019-12-28T12:00:00.000Z","_content":"\n## 线程基础\n1. 进程与线程：进程是资源分配的最小单位，线程是程序执行的最小单位。\n2. 启动线程的三种方式：1.继承Thread类；2.实现Runable接口；3.Executors.newCacheThread(本质为前两种之一)。\n3. 线程的几个重要方法  \nsleep：线程休息，TIMED_WAITING状态。   \nyield：谦让的退出，让出一下cpu，重新等待，可能yield后又马上执行。  \njoin: 切换到其他线程运行，运行完了再执行当前线程，用来等待一个线程结束。可以保证线程按顺序执行。  \ninterrupt：中断线程，实际是设置一个中断标志，线程仍会继续运行。线程中断会抛出异常。  \ninterrupted：检测中断标志测试当前线程是够已经被中断，并清除中断标志。注意当前线程，主线程中直接用子线程thread.interrupted检测的是主线程，应该使用Thread.currentThread()。  \nisInterrupted：测试线程是否被中断，不清除中断状态。  \nstop：废弃，不建议使用。 \n4. 线程的六种状态(可通过Thread.currentThread().getState()获取)  \nNEW：线程刚创建  \nRUNNABLE：在JVM中正在运行的线程，又分为Ready和Runing，Ready状态为在cpu等待队列中，cpu会切换线程，被切换掉的线程会被挂起，running才是正在执行  \nBLOCKED：线程处于阻塞状态，等待监视锁，可以重新进行同步代码块中执行  \nWAITING：等待状态 \nTIMED_WAITING：计时等待\nTERMINATED：线程执行完毕，已经退出，不再可重新转为其他状态  \n![线程状态图](/imgs/线程状态图.png)\n\n## 锁基础\n1. sychoronise关键字，锁住的是对象，不能锁定String常量（常量公用），Interger，Long等基础数据类型（超过一个值还会new 对象）。子类重写父类方法，两个都加了sychoronised，锁住的都是this，同一个对象。程序中出现异常，默认锁会释放，这时可能会出现其他线程的乱入，获取了错误的数据。早先为重量级锁，直接进入os等待队列，后续升级为hotspot虚拟机中64位地址会markword标记记录锁状态和线程id,此时为偏向锁,即偏向当前线程,只有当前线程可以直接进入,如果线程争用升级为自旋锁，自旋10次或者自旋线程超过CPU内核数的一半后升级为重量锁。\n2. 自旋锁会耗费cpu资源，一般执行时间段，线程少使用，执行时间长线程比较多用系统锁。\n3. 重入锁和不可重入锁：冲入锁，同一个线程允许进入，sychoronise必须是重入锁，比如子类集成父类后重写方法调用super，如果不可重复则无法执行。  \n4. 公平锁和非公平锁  \n在公平的锁中，如果有另一个线程持有锁或者有其他线程在等待队列中等待这个所，那么新发出的请求的线程将被放入到队列中。而非公平锁上，只有当锁被某个线程持有时，新发出请求的线程才会被放入队列中（此时和公平锁是一样的）。所以，它们的差别在于非公平锁会有更多的机会去抢占锁。非公平锁性能高于公平锁性能。首先，在恢复一个被挂起的线程与该线程真正运行之间存在着严重的延迟。而且，非公平锁能更充分的利用cpu的时间片，尽量的减少cpu空闲的状态时间。使用场景的话呢，其实还是和他们的属性一一相关，举个栗子：如果业务中线程占用(处理)时间要远长于线程等待，那用非公平锁其实效率并不明显，但是用公平锁会给业务增强很多的可控制性。","source":"_posts/java多线程与高并发(一).md","raw":"---\ntitle: \"java多线程与高并发---(一)线程与锁基础\"\ntags:\n  - java多线程与高并发\nid: 1000\ncategories:\n  - java多线程与高并发\ndate: 2019-12-28 20:00:00\n---\n\n## 线程基础\n1. 进程与线程：进程是资源分配的最小单位，线程是程序执行的最小单位。\n2. 启动线程的三种方式：1.继承Thread类；2.实现Runable接口；3.Executors.newCacheThread(本质为前两种之一)。\n3. 线程的几个重要方法  \nsleep：线程休息，TIMED_WAITING状态。   \nyield：谦让的退出，让出一下cpu，重新等待，可能yield后又马上执行。  \njoin: 切换到其他线程运行，运行完了再执行当前线程，用来等待一个线程结束。可以保证线程按顺序执行。  \ninterrupt：中断线程，实际是设置一个中断标志，线程仍会继续运行。线程中断会抛出异常。  \ninterrupted：检测中断标志测试当前线程是够已经被中断，并清除中断标志。注意当前线程，主线程中直接用子线程thread.interrupted检测的是主线程，应该使用Thread.currentThread()。  \nisInterrupted：测试线程是否被中断，不清除中断状态。  \nstop：废弃，不建议使用。 \n4. 线程的六种状态(可通过Thread.currentThread().getState()获取)  \nNEW：线程刚创建  \nRUNNABLE：在JVM中正在运行的线程，又分为Ready和Runing，Ready状态为在cpu等待队列中，cpu会切换线程，被切换掉的线程会被挂起，running才是正在执行  \nBLOCKED：线程处于阻塞状态，等待监视锁，可以重新进行同步代码块中执行  \nWAITING：等待状态 \nTIMED_WAITING：计时等待\nTERMINATED：线程执行完毕，已经退出，不再可重新转为其他状态  \n![线程状态图](/imgs/线程状态图.png)\n\n## 锁基础\n1. sychoronise关键字，锁住的是对象，不能锁定String常量（常量公用），Interger，Long等基础数据类型（超过一个值还会new 对象）。子类重写父类方法，两个都加了sychoronised，锁住的都是this，同一个对象。程序中出现异常，默认锁会释放，这时可能会出现其他线程的乱入，获取了错误的数据。早先为重量级锁，直接进入os等待队列，后续升级为hotspot虚拟机中64位地址会markword标记记录锁状态和线程id,此时为偏向锁,即偏向当前线程,只有当前线程可以直接进入,如果线程争用升级为自旋锁，自旋10次或者自旋线程超过CPU内核数的一半后升级为重量锁。\n2. 自旋锁会耗费cpu资源，一般执行时间段，线程少使用，执行时间长线程比较多用系统锁。\n3. 重入锁和不可重入锁：冲入锁，同一个线程允许进入，sychoronise必须是重入锁，比如子类集成父类后重写方法调用super，如果不可重复则无法执行。  \n4. 公平锁和非公平锁  \n在公平的锁中，如果有另一个线程持有锁或者有其他线程在等待队列中等待这个所，那么新发出的请求的线程将被放入到队列中。而非公平锁上，只有当锁被某个线程持有时，新发出请求的线程才会被放入队列中（此时和公平锁是一样的）。所以，它们的差别在于非公平锁会有更多的机会去抢占锁。非公平锁性能高于公平锁性能。首先，在恢复一个被挂起的线程与该线程真正运行之间存在着严重的延迟。而且，非公平锁能更充分的利用cpu的时间片，尽量的减少cpu空闲的状态时间。使用场景的话呢，其实还是和他们的属性一一相关，举个栗子：如果业务中线程占用(处理)时间要远长于线程等待，那用非公平锁其实效率并不明显，但是用公平锁会给业务增强很多的可控制性。","slug":"java多线程与高并发(一)","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7ur0019v8gpdggpbe9i","content":"<h2 id=\"线程基础\"><a href=\"#线程基础\" class=\"headerlink\" title=\"线程基础\"></a>线程基础</h2><ol>\n<li>进程与线程：进程是资源分配的最小单位，线程是程序执行的最小单位。</li>\n<li>启动线程的三种方式：1.继承Thread类；2.实现Runable接口；3.Executors.newCacheThread(本质为前两种之一)。</li>\n<li>线程的几个重要方法<br>sleep：线程休息，TIMED_WAITING状态。<br>yield：谦让的退出，让出一下cpu，重新等待，可能yield后又马上执行。<br>join: 切换到其他线程运行，运行完了再执行当前线程，用来等待一个线程结束。可以保证线程按顺序执行。<br>interrupt：中断线程，实际是设置一个中断标志，线程仍会继续运行。线程中断会抛出异常。<br>interrupted：检测中断标志测试当前线程是够已经被中断，并清除中断标志。注意当前线程，主线程中直接用子线程thread.interrupted检测的是主线程，应该使用Thread.currentThread()。<br>isInterrupted：测试线程是否被中断，不清除中断状态。<br>stop：废弃，不建议使用。 </li>\n<li>线程的六种状态(可通过Thread.currentThread().getState()获取)<br>NEW：线程刚创建<br>RUNNABLE：在JVM中正在运行的线程，又分为Ready和Runing，Ready状态为在cpu等待队列中，cpu会切换线程，被切换掉的线程会被挂起，running才是正在执行<br>BLOCKED：线程处于阻塞状态，等待监视锁，可以重新进行同步代码块中执行<br>WAITING：等待状态<br>TIMED_WAITING：计时等待<br>TERMINATED：线程执行完毕，已经退出，不再可重新转为其他状态<br><img src=\"/imgs/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png\" alt=\"线程状态图\"></li>\n</ol>\n<h2 id=\"锁基础\"><a href=\"#锁基础\" class=\"headerlink\" title=\"锁基础\"></a>锁基础</h2><ol>\n<li>sychoronise关键字，锁住的是对象，不能锁定String常量（常量公用），Interger，Long等基础数据类型（超过一个值还会new 对象）。子类重写父类方法，两个都加了sychoronised，锁住的都是this，同一个对象。程序中出现异常，默认锁会释放，这时可能会出现其他线程的乱入，获取了错误的数据。早先为重量级锁，直接进入os等待队列，后续升级为hotspot虚拟机中64位地址会markword标记记录锁状态和线程id,此时为偏向锁,即偏向当前线程,只有当前线程可以直接进入,如果线程争用升级为自旋锁，自旋10次或者自旋线程超过CPU内核数的一半后升级为重量锁。</li>\n<li>自旋锁会耗费cpu资源，一般执行时间段，线程少使用，执行时间长线程比较多用系统锁。</li>\n<li>重入锁和不可重入锁：冲入锁，同一个线程允许进入，sychoronise必须是重入锁，比如子类集成父类后重写方法调用super，如果不可重复则无法执行。  </li>\n<li>公平锁和非公平锁<br>在公平的锁中，如果有另一个线程持有锁或者有其他线程在等待队列中等待这个所，那么新发出的请求的线程将被放入到队列中。而非公平锁上，只有当锁被某个线程持有时，新发出请求的线程才会被放入队列中（此时和公平锁是一样的）。所以，它们的差别在于非公平锁会有更多的机会去抢占锁。非公平锁性能高于公平锁性能。首先，在恢复一个被挂起的线程与该线程真正运行之间存在着严重的延迟。而且，非公平锁能更充分的利用cpu的时间片，尽量的减少cpu空闲的状态时间。使用场景的话呢，其实还是和他们的属性一一相关，举个栗子：如果业务中线程占用(处理)时间要远长于线程等待，那用非公平锁其实效率并不明显，但是用公平锁会给业务增强很多的可控制性。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程基础\"><a href=\"#线程基础\" class=\"headerlink\" title=\"线程基础\"></a>线程基础</h2><ol>\n<li>进程与线程：进程是资源分配的最小单位，线程是程序执行的最小单位。</li>\n<li>启动线程的三种方式：1.继承Thread类；2.实现Runable接口；3.Executors.newCacheThread(本质为前两种之一)。</li>\n<li>线程的几个重要方法<br>sleep：线程休息，TIMED_WAITING状态。<br>yield：谦让的退出，让出一下cpu，重新等待，可能yield后又马上执行。<br>join: 切换到其他线程运行，运行完了再执行当前线程，用来等待一个线程结束。可以保证线程按顺序执行。<br>interrupt：中断线程，实际是设置一个中断标志，线程仍会继续运行。线程中断会抛出异常。<br>interrupted：检测中断标志测试当前线程是够已经被中断，并清除中断标志。注意当前线程，主线程中直接用子线程thread.interrupted检测的是主线程，应该使用Thread.currentThread()。<br>isInterrupted：测试线程是否被中断，不清除中断状态。<br>stop：废弃，不建议使用。 </li>\n<li>线程的六种状态(可通过Thread.currentThread().getState()获取)<br>NEW：线程刚创建<br>RUNNABLE：在JVM中正在运行的线程，又分为Ready和Runing，Ready状态为在cpu等待队列中，cpu会切换线程，被切换掉的线程会被挂起，running才是正在执行<br>BLOCKED：线程处于阻塞状态，等待监视锁，可以重新进行同步代码块中执行<br>WAITING：等待状态<br>TIMED_WAITING：计时等待<br>TERMINATED：线程执行完毕，已经退出，不再可重新转为其他状态<br><img src=\"/imgs/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png\" alt=\"线程状态图\"></li>\n</ol>\n<h2 id=\"锁基础\"><a href=\"#锁基础\" class=\"headerlink\" title=\"锁基础\"></a>锁基础</h2><ol>\n<li>sychoronise关键字，锁住的是对象，不能锁定String常量（常量公用），Interger，Long等基础数据类型（超过一个值还会new 对象）。子类重写父类方法，两个都加了sychoronised，锁住的都是this，同一个对象。程序中出现异常，默认锁会释放，这时可能会出现其他线程的乱入，获取了错误的数据。早先为重量级锁，直接进入os等待队列，后续升级为hotspot虚拟机中64位地址会markword标记记录锁状态和线程id,此时为偏向锁,即偏向当前线程,只有当前线程可以直接进入,如果线程争用升级为自旋锁，自旋10次或者自旋线程超过CPU内核数的一半后升级为重量锁。</li>\n<li>自旋锁会耗费cpu资源，一般执行时间段，线程少使用，执行时间长线程比较多用系统锁。</li>\n<li>重入锁和不可重入锁：冲入锁，同一个线程允许进入，sychoronise必须是重入锁，比如子类集成父类后重写方法调用super，如果不可重复则无法执行。  </li>\n<li>公平锁和非公平锁<br>在公平的锁中，如果有另一个线程持有锁或者有其他线程在等待队列中等待这个所，那么新发出的请求的线程将被放入到队列中。而非公平锁上，只有当锁被某个线程持有时，新发出请求的线程才会被放入队列中（此时和公平锁是一样的）。所以，它们的差别在于非公平锁会有更多的机会去抢占锁。非公平锁性能高于公平锁性能。首先，在恢复一个被挂起的线程与该线程真正运行之间存在着严重的延迟。而且，非公平锁能更充分的利用cpu的时间片，尽量的减少cpu空闲的状态时间。使用场景的话呢，其实还是和他们的属性一一相关，举个栗子：如果业务中线程占用(处理)时间要远长于线程等待，那用非公平锁其实效率并不明显，但是用公平锁会给业务增强很多的可控制性。</li>\n</ol>\n"},{"title":"lombok","id":"520","date":"2018-09-04T02:20:31.000Z","author":["linxu"],"_content":"# 前言 #\n“发明起源于懒”，当你在java开发中需要不停地重复编写set，get，tostring方法时，当你觉得这些代码很浪费时间，影响美观时，lombok你需要了解一下。\n\n# 简介 #\nlombok可以通过简单注解实现bean的set，get，tostring等方法，不再需要额外编写。\nlombok常用注解如下：  \n\n+ @Data 注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、 hashCode、toString 方法\n+ @Setter ：注解在属性上；为属性提供 setting 方法\n+ @Setter ：注解在属性上；为属性提供 getting 方法\n+ @Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象\n+ @NoArgsConstructor ：注解在类上；为类提供一个无参的构造方法\n+ @AllArgsConstructor ：注解在类上；为类提供一个全参的构造方法\n+ @Cleanup : 可以关闭流\n+ @Builder ： 被注解的类加个构造者模式\n+ @Synchronized ： 加个同步锁\n+ @SneakyThrows : 等同于try/catch 捕获异常\n+ @NonNull : 如果给参数加个这个注解 参数为null会抛出空指针异常\n+ @Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。\n\n# IDE使用lombok #\n## eclipse ##\n1. 下载lombok，[click](https://projectlombok.org/download)\n2. 双击lombok.jar直接安装，如果安装不了，将lombok放入到eclipse安装目录，编辑eclipse.ini，在最后一行加上 -javaagent:lombok.jar，重启eclipse。\n3. 添加maven配置：  \n  \n``` java\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.16.10</version>\n\t</dependency>\n```\n\n## idea ##\n1. 安装lombok插件，File-->Settings-->plugins-->Browse Repositories，搜索lombok plugin，选择install，重启idea。\n2. 如果上面下载不了，或者太慢，且本地有shadowsocks翻墙支持，可以在当前窗口进入HTTP Proxy Settings，选择Manual proxy configuration，设置如图：\n\t![Http Proxy](/imgs/lombokhttpproxy.JPG)\n3. 添加maven配置：  \n \n``` java\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.16.10</version>\n\t</dependency>\n```\n\n","source":"_posts/lombok.md","raw":"---\ntitle: \"lombok\"\ntags:\n  - lombok\nid: 520\ncategories:\n  - Lombok\ndate: 2018-09-04 10:20:31\nauthor: \n  - linxu\n---\n# 前言 #\n“发明起源于懒”，当你在java开发中需要不停地重复编写set，get，tostring方法时，当你觉得这些代码很浪费时间，影响美观时，lombok你需要了解一下。\n\n# 简介 #\nlombok可以通过简单注解实现bean的set，get，tostring等方法，不再需要额外编写。\nlombok常用注解如下：  \n\n+ @Data 注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、 hashCode、toString 方法\n+ @Setter ：注解在属性上；为属性提供 setting 方法\n+ @Setter ：注解在属性上；为属性提供 getting 方法\n+ @Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象\n+ @NoArgsConstructor ：注解在类上；为类提供一个无参的构造方法\n+ @AllArgsConstructor ：注解在类上；为类提供一个全参的构造方法\n+ @Cleanup : 可以关闭流\n+ @Builder ： 被注解的类加个构造者模式\n+ @Synchronized ： 加个同步锁\n+ @SneakyThrows : 等同于try/catch 捕获异常\n+ @NonNull : 如果给参数加个这个注解 参数为null会抛出空指针异常\n+ @Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。\n\n# IDE使用lombok #\n## eclipse ##\n1. 下载lombok，[click](https://projectlombok.org/download)\n2. 双击lombok.jar直接安装，如果安装不了，将lombok放入到eclipse安装目录，编辑eclipse.ini，在最后一行加上 -javaagent:lombok.jar，重启eclipse。\n3. 添加maven配置：  \n  \n``` java\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.16.10</version>\n\t</dependency>\n```\n\n## idea ##\n1. 安装lombok插件，File-->Settings-->plugins-->Browse Repositories，搜索lombok plugin，选择install，重启idea。\n2. 如果上面下载不了，或者太慢，且本地有shadowsocks翻墙支持，可以在当前窗口进入HTTP Proxy Settings，选择Manual proxy configuration，设置如图：\n\t![Http Proxy](/imgs/lombokhttpproxy.JPG)\n3. 添加maven配置：  \n \n``` java\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.16.10</version>\n\t</dependency>\n```\n\n","slug":"lombok","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7us001bv8gp6lv369oz","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>“发明起源于懒”，当你在java开发中需要不停地重复编写set，get，tostring方法时，当你觉得这些代码很浪费时间，影响美观时，lombok你需要了解一下。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>lombok可以通过简单注解实现bean的set，get，tostring等方法，不再需要额外编写。<br>lombok常用注解如下：  </p>\n<ul>\n<li>@Data 注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、 hashCode、toString 方法</li>\n<li>@Setter ：注解在属性上；为属性提供 setting 方法</li>\n<li>@Setter ：注解在属性上；为属性提供 getting 方法</li>\n<li>@Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</li>\n<li>@NoArgsConstructor ：注解在类上；为类提供一个无参的构造方法</li>\n<li>@AllArgsConstructor ：注解在类上；为类提供一个全参的构造方法</li>\n<li>@Cleanup : 可以关闭流</li>\n<li>@Builder ： 被注解的类加个构造者模式</li>\n<li>@Synchronized ： 加个同步锁</li>\n<li>@SneakyThrows : 等同于try/catch 捕获异常</li>\n<li>@NonNull : 如果给参数加个这个注解 参数为null会抛出空指针异常</li>\n<li>@Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。</li>\n</ul>\n<h1 id=\"IDE使用lombok\"><a href=\"#IDE使用lombok\" class=\"headerlink\" title=\"IDE使用lombok\"></a>IDE使用lombok</h1><h2 id=\"eclipse\"><a href=\"#eclipse\" class=\"headerlink\" title=\"eclipse\"></a>eclipse</h2><ol>\n<li>下载lombok，<a href=\"https://projectlombok.org/download\" target=\"_blank\" rel=\"noopener\">click</a></li>\n<li>双击lombok.jar直接安装，如果安装不了，将lombok放入到eclipse安装目录，编辑eclipse.ini，在最后一行加上 -javaagent:lombok.jar，重启eclipse。</li>\n<li>添加maven配置：  </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><ol>\n<li>安装lombok插件，File–&gt;Settings–&gt;plugins–&gt;Browse Repositories，搜索lombok plugin，选择install，重启idea。</li>\n<li>如果上面下载不了，或者太慢，且本地有shadowsocks翻墙支持，可以在当前窗口进入HTTP Proxy Settings，选择Manual proxy configuration，设置如图：<br> <img src=\"/imgs/lombokhttpproxy.JPG\" alt=\"Http Proxy\"></li>\n<li>添加maven配置：  </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>“发明起源于懒”，当你在java开发中需要不停地重复编写set，get，tostring方法时，当你觉得这些代码很浪费时间，影响美观时，lombok你需要了解一下。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>lombok可以通过简单注解实现bean的set，get，tostring等方法，不再需要额外编写。<br>lombok常用注解如下：  </p>\n<ul>\n<li>@Data 注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、 hashCode、toString 方法</li>\n<li>@Setter ：注解在属性上；为属性提供 setting 方法</li>\n<li>@Setter ：注解在属性上；为属性提供 getting 方法</li>\n<li>@Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</li>\n<li>@NoArgsConstructor ：注解在类上；为类提供一个无参的构造方法</li>\n<li>@AllArgsConstructor ：注解在类上；为类提供一个全参的构造方法</li>\n<li>@Cleanup : 可以关闭流</li>\n<li>@Builder ： 被注解的类加个构造者模式</li>\n<li>@Synchronized ： 加个同步锁</li>\n<li>@SneakyThrows : 等同于try/catch 捕获异常</li>\n<li>@NonNull : 如果给参数加个这个注解 参数为null会抛出空指针异常</li>\n<li>@Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。</li>\n</ul>\n<h1 id=\"IDE使用lombok\"><a href=\"#IDE使用lombok\" class=\"headerlink\" title=\"IDE使用lombok\"></a>IDE使用lombok</h1><h2 id=\"eclipse\"><a href=\"#eclipse\" class=\"headerlink\" title=\"eclipse\"></a>eclipse</h2><ol>\n<li>下载lombok，<a href=\"https://projectlombok.org/download\" target=\"_blank\" rel=\"noopener\">click</a></li>\n<li>双击lombok.jar直接安装，如果安装不了，将lombok放入到eclipse安装目录，编辑eclipse.ini，在最后一行加上 -javaagent:lombok.jar，重启eclipse。</li>\n<li>添加maven配置：  </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><ol>\n<li>安装lombok插件，File–&gt;Settings–&gt;plugins–&gt;Browse Repositories，搜索lombok plugin，选择install，重启idea。</li>\n<li>如果上面下载不了，或者太慢，且本地有shadowsocks翻墙支持，可以在当前窗口进入HTTP Proxy Settings，选择Manual proxy configuration，设置如图：<br> <img src=\"/imgs/lombokhttpproxy.JPG\" alt=\"Http Proxy\"></li>\n<li>添加maven配置：  </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"nginx入门","id":"1201","date":"2018-12-01T02:20:31.000Z","author":["linxu"],"_content":"\n# nginx入门 #\n\n## 简介 ##\nNginx是一个很强大的高性能Web和反向代理服务。由俄罗斯的程序设计师lgor Sysoev(塞索耶夫)所开发，供俄国大型的入口网站及搜索引擎Rambler使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。\nnginx的崛起要感谢wordpress(WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的博客网站)，2008年，WordPress需要搬到软件上，这样才符合其开源哲学理念。当时选择的是全球最有名的Web服务器——Apache，当工程师开始修改软件安装设置的时候，Apache竟然死机了，尤其是在WordPress最繁忙的时候。所以他们最后撤除了不稳定的Apache，将公司放在一个那时候根本不起眼的一个叫作Nginx的开源项目的赌注上。五年之后，WordPress仍然在Nginx上安稳运行，这也使后来很多其它公司都如法炮制。\n\n## 优点 ##\n* 高并发连接：官方测试能够支撑5W并发连接，在实际生产中可跑到2~3W并发连接数。\n* 内存消耗少：在3万并发连接下，开启的10个Nginx 进程才消耗150M内存 （15M*10=150M）。\n* 配置文件非常简单：风格跟程序一样通俗易懂。\n* 成本廉价：Nginx为开源软件，可以免费使用。\n* 支持Rwrite重写：能够根据域名、URL的不同，将HTTP请求分发到不同的后端服务器群\n* 内置健康检查功能：在3万并发连接下，如果Nginx Proxy后端的某台Web服务器宕机了，不会影响前端的访问。\n* 节省带宽：支持GZIP压缩，可以添加浏览器本地缓存的Header头\n* 稳定性高 ：用于反向代理，宕机的概率微乎其微。\n\n## 主要功能 ##\n1. 反向代理\n* 正向代理：某些情况下，代理我们用户去访问服务器，需要用户手动的设置代理服务器的ip和端口号。\n* 反向代理：是用来代理服务器的，代理我们要访问的目标服务器。代理服务器接受请求，然后将请求转发给内部网络的服务器(集群化)，并将从服务器上得到的结果返回给客户端，此时代理服务器对外就表现为一个服务器。  \n\nNginx在反向代理上，提供灵活的功能，可以根据不同的正则采用不同的转发策略将不同的请求代理到不同的服务。\n\n2. 负载均衡\n高并发情况下将数据流量分摊到多个服务器执行，减轻每台服务器的压力，多台服务器(集群)共同完成工作任务，从而提高了数据的吞吐量。Nginx可使用的负载均衡策略有：轮询（默认）、权重、ip_hash、url_hash(第三方)、fair(第三方)\n\n3. 动静分离\nNginx提供的动静分离是指把动态请求和静态请求分离开，合适的服务器处理相应的请求，使整个服务器系统的性能、效率更高。Nginx可以根据配置对不同的请求做不同转发，这是动态分离的基础。静态请求对应的静态资源可以直接放在Nginx上做缓冲，更好的做法是放在相应的缓冲服务器上。动态请求由相应的后端服务器处理。\n\n## 配置示例 ##\n``` config\nserver {\n    listen       443 ssl;\n    server_name  xxx.cn;\n    ssl on;  #开启ssl证书\n\tssl_certificate \"/home/project/httpscrt/1_xxx.cn_bundle.crt\";  #证书位置\n     ssl_certificate_key \"/home/project/httpscrt/2_xxx.cn.key\";   #key位置\n\n    location / {\n    proxy_pass http://127.0.0.1:28081;  #转发到本地28081端口\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n}\n\nserver {\n\tlisten 8081;\n    server_name xxx.cn;\n    root /home/project/bbs/upload;   #静态网站目录\n\tlocation / {\n\t\t\t\n            try_files $uri @redirect;  # 找不到uri(/index等)则通过@redirect转发\n    \t}      \n    }\n\n\tlocation @redirect{\n     \trewrite ^/(.*)$   http://www.baidu.com;\n    }\n}\n```\n\n## 小经验 ##\n1.nginx监听不能监听服务器已经使用的端口\n2.如果某个端口下只有一个server_name的时候，所有访问该端口的请求，不管server_name是什么，都由该server处理。\n\n\n## jenkins简介 ##\nJenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。 \n可以新建maven任务或者流水线任务等，maven任务通过插件通过maven来进行打包测试等，流水线任务可以通过自己的脚本，自由的定义命令执行顺序，完全由脚本控制。","source":"_posts/nginx.md","raw":"---\ntitle: \"nginx入门\"\ntags:\n  - nginx\nid: 1201\ncategories:\n  - nginx\ndate: 2018-12-01 10:20:31\nauthor: \n  - linxu\n---\n\n# nginx入门 #\n\n## 简介 ##\nNginx是一个很强大的高性能Web和反向代理服务。由俄罗斯的程序设计师lgor Sysoev(塞索耶夫)所开发，供俄国大型的入口网站及搜索引擎Rambler使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。\nnginx的崛起要感谢wordpress(WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的博客网站)，2008年，WordPress需要搬到软件上，这样才符合其开源哲学理念。当时选择的是全球最有名的Web服务器——Apache，当工程师开始修改软件安装设置的时候，Apache竟然死机了，尤其是在WordPress最繁忙的时候。所以他们最后撤除了不稳定的Apache，将公司放在一个那时候根本不起眼的一个叫作Nginx的开源项目的赌注上。五年之后，WordPress仍然在Nginx上安稳运行，这也使后来很多其它公司都如法炮制。\n\n## 优点 ##\n* 高并发连接：官方测试能够支撑5W并发连接，在实际生产中可跑到2~3W并发连接数。\n* 内存消耗少：在3万并发连接下，开启的10个Nginx 进程才消耗150M内存 （15M*10=150M）。\n* 配置文件非常简单：风格跟程序一样通俗易懂。\n* 成本廉价：Nginx为开源软件，可以免费使用。\n* 支持Rwrite重写：能够根据域名、URL的不同，将HTTP请求分发到不同的后端服务器群\n* 内置健康检查功能：在3万并发连接下，如果Nginx Proxy后端的某台Web服务器宕机了，不会影响前端的访问。\n* 节省带宽：支持GZIP压缩，可以添加浏览器本地缓存的Header头\n* 稳定性高 ：用于反向代理，宕机的概率微乎其微。\n\n## 主要功能 ##\n1. 反向代理\n* 正向代理：某些情况下，代理我们用户去访问服务器，需要用户手动的设置代理服务器的ip和端口号。\n* 反向代理：是用来代理服务器的，代理我们要访问的目标服务器。代理服务器接受请求，然后将请求转发给内部网络的服务器(集群化)，并将从服务器上得到的结果返回给客户端，此时代理服务器对外就表现为一个服务器。  \n\nNginx在反向代理上，提供灵活的功能，可以根据不同的正则采用不同的转发策略将不同的请求代理到不同的服务。\n\n2. 负载均衡\n高并发情况下将数据流量分摊到多个服务器执行，减轻每台服务器的压力，多台服务器(集群)共同完成工作任务，从而提高了数据的吞吐量。Nginx可使用的负载均衡策略有：轮询（默认）、权重、ip_hash、url_hash(第三方)、fair(第三方)\n\n3. 动静分离\nNginx提供的动静分离是指把动态请求和静态请求分离开，合适的服务器处理相应的请求，使整个服务器系统的性能、效率更高。Nginx可以根据配置对不同的请求做不同转发，这是动态分离的基础。静态请求对应的静态资源可以直接放在Nginx上做缓冲，更好的做法是放在相应的缓冲服务器上。动态请求由相应的后端服务器处理。\n\n## 配置示例 ##\n``` config\nserver {\n    listen       443 ssl;\n    server_name  xxx.cn;\n    ssl on;  #开启ssl证书\n\tssl_certificate \"/home/project/httpscrt/1_xxx.cn_bundle.crt\";  #证书位置\n     ssl_certificate_key \"/home/project/httpscrt/2_xxx.cn.key\";   #key位置\n\n    location / {\n    proxy_pass http://127.0.0.1:28081;  #转发到本地28081端口\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n}\n\nserver {\n\tlisten 8081;\n    server_name xxx.cn;\n    root /home/project/bbs/upload;   #静态网站目录\n\tlocation / {\n\t\t\t\n            try_files $uri @redirect;  # 找不到uri(/index等)则通过@redirect转发\n    \t}      \n    }\n\n\tlocation @redirect{\n     \trewrite ^/(.*)$   http://www.baidu.com;\n    }\n}\n```\n\n## 小经验 ##\n1.nginx监听不能监听服务器已经使用的端口\n2.如果某个端口下只有一个server_name的时候，所有访问该端口的请求，不管server_name是什么，都由该server处理。\n\n\n## jenkins简介 ##\nJenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。 \n可以新建maven任务或者流水线任务等，maven任务通过插件通过maven来进行打包测试等，流水线任务可以通过自己的脚本，自由的定义命令执行顺序，完全由脚本控制。","slug":"nginx","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7uu001ev8gp7fm8b90g","content":"<h1 id=\"nginx入门\"><a href=\"#nginx入门\" class=\"headerlink\" title=\"nginx入门\"></a>nginx入门</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Nginx是一个很强大的高性能Web和反向代理服务。由俄罗斯的程序设计师lgor Sysoev(塞索耶夫)所开发，供俄国大型的入口网站及搜索引擎Rambler使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。<br>nginx的崛起要感谢wordpress(WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的博客网站)，2008年，WordPress需要搬到软件上，这样才符合其开源哲学理念。当时选择的是全球最有名的Web服务器——Apache，当工程师开始修改软件安装设置的时候，Apache竟然死机了，尤其是在WordPress最繁忙的时候。所以他们最后撤除了不稳定的Apache，将公司放在一个那时候根本不起眼的一个叫作Nginx的开源项目的赌注上。五年之后，WordPress仍然在Nginx上安稳运行，这也使后来很多其它公司都如法炮制。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>高并发连接：官方测试能够支撑5W并发连接，在实际生产中可跑到2~3W并发连接数。</li>\n<li>内存消耗少：在3万并发连接下，开启的10个Nginx 进程才消耗150M内存 （15M*10=150M）。</li>\n<li>配置文件非常简单：风格跟程序一样通俗易懂。</li>\n<li>成本廉价：Nginx为开源软件，可以免费使用。</li>\n<li>支持Rwrite重写：能够根据域名、URL的不同，将HTTP请求分发到不同的后端服务器群</li>\n<li>内置健康检查功能：在3万并发连接下，如果Nginx Proxy后端的某台Web服务器宕机了，不会影响前端的访问。</li>\n<li>节省带宽：支持GZIP压缩，可以添加浏览器本地缓存的Header头</li>\n<li>稳定性高 ：用于反向代理，宕机的概率微乎其微。</li>\n</ul>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><ol>\n<li>反向代理</li>\n</ol>\n<ul>\n<li>正向代理：某些情况下，代理我们用户去访问服务器，需要用户手动的设置代理服务器的ip和端口号。</li>\n<li>反向代理：是用来代理服务器的，代理我们要访问的目标服务器。代理服务器接受请求，然后将请求转发给内部网络的服务器(集群化)，并将从服务器上得到的结果返回给客户端，此时代理服务器对外就表现为一个服务器。  </li>\n</ul>\n<p>Nginx在反向代理上，提供灵活的功能，可以根据不同的正则采用不同的转发策略将不同的请求代理到不同的服务。</p>\n<ol start=\"2\">\n<li><p>负载均衡<br>高并发情况下将数据流量分摊到多个服务器执行，减轻每台服务器的压力，多台服务器(集群)共同完成工作任务，从而提高了数据的吞吐量。Nginx可使用的负载均衡策略有：轮询（默认）、权重、ip_hash、url_hash(第三方)、fair(第三方)</p>\n</li>\n<li><p>动静分离<br>Nginx提供的动静分离是指把动态请求和静态请求分离开，合适的服务器处理相应的请求，使整个服务器系统的性能、效率更高。Nginx可以根据配置对不同的请求做不同转发，这是动态分离的基础。静态请求对应的静态资源可以直接放在Nginx上做缓冲，更好的做法是放在相应的缓冲服务器上。动态请求由相应的后端服务器处理。</p>\n</li>\n</ol>\n<h2 id=\"配置示例\"><a href=\"#配置示例\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl;</span><br><span class=\"line\">    server_name  xxx.cn;</span><br><span class=\"line\">    ssl on;  #开启ssl证书</span><br><span class=\"line\">\tssl_certificate &quot;&#x2F;home&#x2F;project&#x2F;httpscrt&#x2F;1_xxx.cn_bundle.crt&quot;;  #证书位置</span><br><span class=\"line\">     ssl_certificate_key &quot;&#x2F;home&#x2F;project&#x2F;httpscrt&#x2F;2_xxx.cn.key&quot;;   #key位置</span><br><span class=\"line\"></span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:28081;  #转发到本地28081端口</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 &#x2F;404.html;</span><br><span class=\"line\">        location &#x3D; &#x2F;40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class=\"line\">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 8081;</span><br><span class=\"line\">    server_name xxx.cn;</span><br><span class=\"line\">    root &#x2F;home&#x2F;project&#x2F;bbs&#x2F;upload;   #静态网站目录</span><br><span class=\"line\">\tlocation &#x2F; &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            try_files $uri @redirect;  # 找不到uri(&#x2F;index等)则通过@redirect转发</span><br><span class=\"line\">    \t&#125;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation @redirect&#123;</span><br><span class=\"line\">     \trewrite ^&#x2F;(.*)$   http:&#x2F;&#x2F;www.baidu.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小经验\"><a href=\"#小经验\" class=\"headerlink\" title=\"小经验\"></a>小经验</h2><p>1.nginx监听不能监听服务器已经使用的端口<br>2.如果某个端口下只有一个server_name的时候，所有访问该端口的请求，不管server_name是什么，都由该server处理。</p>\n<h2 id=\"jenkins简介\"><a href=\"#jenkins简介\" class=\"headerlink\" title=\"jenkins简介\"></a>jenkins简介</h2><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。<br>可以新建maven任务或者流水线任务等，maven任务通过插件通过maven来进行打包测试等，流水线任务可以通过自己的脚本，自由的定义命令执行顺序，完全由脚本控制。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"nginx入门\"><a href=\"#nginx入门\" class=\"headerlink\" title=\"nginx入门\"></a>nginx入门</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Nginx是一个很强大的高性能Web和反向代理服务。由俄罗斯的程序设计师lgor Sysoev(塞索耶夫)所开发，供俄国大型的入口网站及搜索引擎Rambler使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。<br>nginx的崛起要感谢wordpress(WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的博客网站)，2008年，WordPress需要搬到软件上，这样才符合其开源哲学理念。当时选择的是全球最有名的Web服务器——Apache，当工程师开始修改软件安装设置的时候，Apache竟然死机了，尤其是在WordPress最繁忙的时候。所以他们最后撤除了不稳定的Apache，将公司放在一个那时候根本不起眼的一个叫作Nginx的开源项目的赌注上。五年之后，WordPress仍然在Nginx上安稳运行，这也使后来很多其它公司都如法炮制。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>高并发连接：官方测试能够支撑5W并发连接，在实际生产中可跑到2~3W并发连接数。</li>\n<li>内存消耗少：在3万并发连接下，开启的10个Nginx 进程才消耗150M内存 （15M*10=150M）。</li>\n<li>配置文件非常简单：风格跟程序一样通俗易懂。</li>\n<li>成本廉价：Nginx为开源软件，可以免费使用。</li>\n<li>支持Rwrite重写：能够根据域名、URL的不同，将HTTP请求分发到不同的后端服务器群</li>\n<li>内置健康检查功能：在3万并发连接下，如果Nginx Proxy后端的某台Web服务器宕机了，不会影响前端的访问。</li>\n<li>节省带宽：支持GZIP压缩，可以添加浏览器本地缓存的Header头</li>\n<li>稳定性高 ：用于反向代理，宕机的概率微乎其微。</li>\n</ul>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><ol>\n<li>反向代理</li>\n</ol>\n<ul>\n<li>正向代理：某些情况下，代理我们用户去访问服务器，需要用户手动的设置代理服务器的ip和端口号。</li>\n<li>反向代理：是用来代理服务器的，代理我们要访问的目标服务器。代理服务器接受请求，然后将请求转发给内部网络的服务器(集群化)，并将从服务器上得到的结果返回给客户端，此时代理服务器对外就表现为一个服务器。  </li>\n</ul>\n<p>Nginx在反向代理上，提供灵活的功能，可以根据不同的正则采用不同的转发策略将不同的请求代理到不同的服务。</p>\n<ol start=\"2\">\n<li><p>负载均衡<br>高并发情况下将数据流量分摊到多个服务器执行，减轻每台服务器的压力，多台服务器(集群)共同完成工作任务，从而提高了数据的吞吐量。Nginx可使用的负载均衡策略有：轮询（默认）、权重、ip_hash、url_hash(第三方)、fair(第三方)</p>\n</li>\n<li><p>动静分离<br>Nginx提供的动静分离是指把动态请求和静态请求分离开，合适的服务器处理相应的请求，使整个服务器系统的性能、效率更高。Nginx可以根据配置对不同的请求做不同转发，这是动态分离的基础。静态请求对应的静态资源可以直接放在Nginx上做缓冲，更好的做法是放在相应的缓冲服务器上。动态请求由相应的后端服务器处理。</p>\n</li>\n</ol>\n<h2 id=\"配置示例\"><a href=\"#配置示例\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl;</span><br><span class=\"line\">    server_name  xxx.cn;</span><br><span class=\"line\">    ssl on;  #开启ssl证书</span><br><span class=\"line\">\tssl_certificate &quot;&#x2F;home&#x2F;project&#x2F;httpscrt&#x2F;1_xxx.cn_bundle.crt&quot;;  #证书位置</span><br><span class=\"line\">     ssl_certificate_key &quot;&#x2F;home&#x2F;project&#x2F;httpscrt&#x2F;2_xxx.cn.key&quot;;   #key位置</span><br><span class=\"line\"></span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:28081;  #转发到本地28081端口</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 &#x2F;404.html;</span><br><span class=\"line\">        location &#x3D; &#x2F;40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class=\"line\">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 8081;</span><br><span class=\"line\">    server_name xxx.cn;</span><br><span class=\"line\">    root &#x2F;home&#x2F;project&#x2F;bbs&#x2F;upload;   #静态网站目录</span><br><span class=\"line\">\tlocation &#x2F; &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            try_files $uri @redirect;  # 找不到uri(&#x2F;index等)则通过@redirect转发</span><br><span class=\"line\">    \t&#125;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation @redirect&#123;</span><br><span class=\"line\">     \trewrite ^&#x2F;(.*)$   http:&#x2F;&#x2F;www.baidu.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小经验\"><a href=\"#小经验\" class=\"headerlink\" title=\"小经验\"></a>小经验</h2><p>1.nginx监听不能监听服务器已经使用的端口<br>2.如果某个端口下只有一个server_name的时候，所有访问该端口的请求，不管server_name是什么，都由该server处理。</p>\n<h2 id=\"jenkins简介\"><a href=\"#jenkins简介\" class=\"headerlink\" title=\"jenkins简介\"></a>jenkins简介</h2><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。<br>可以新建maven任务或者流水线任务等，maven任务通过插件通过maven来进行打包测试等，流水线任务可以通过自己的脚本，自由的定义命令执行顺序，完全由脚本控制。</p>\n"},{"title":"java多线程与高并发---(二)JUC","id":"1001","date":"2020-01-01T08:00:00.000Z","_content":"\n## volatile\n1. 保证线程可见性\n2. 禁止指令重排序\n3. 单例模式双重检查，还是要加volatitle，问题可能会出在指令重排序上。 jvm new对象分为三步，申请内存--->构建成员变量-->赋值给对象，加了volatile才能保证赋值完成才会返回new出的对象。\n4. 锁细化，前后都有逻辑，只有中间几步需要加锁，不加在方法，而加在这几步上\n5. 锁粗化，很多个锁的时候直接整体锁，锁争用减少\n6. 只能保证可见性，不能保证原子性，因为写的时候不能保证，比如count++内部指令是分几步的，高并发读的时候还是会出错。还是得用sychoronised\n\n\n## CAS(Compare and set)\n1. 无锁优化 自旋\n2. juc中Atomic开头都是CAS保证的\n3. ABA问题  加version版本号 AtomicStampedReference解决 基础类型不影响，但是如果Object等引用，过程中改变了引用中的值，就会有问题 比如你的女朋友跟你复合，但是中间已经经历了很多，已经不是原来的女朋友了。。。\n\n## unsafe类\n1. 直接操作内存 allocateMemory 分配内存\nfreeMemory 释放内存\n2. 直接生产类实例\n3. 直接操作类或实例变1量\n4. CAS相关操作\n5. jdk1.8是不可以直接用的，11已经可以直接使用\n\n## LongAdder\n分段锁\n\n## ReentrantLock\n1. lock 只能unlock，否则无法停止\n2. unlock 一般放finally里\n3. trylock\n4. lockInterruptibly 跟lock相比，他可以调用interrupt()方法进行打断\n5. new ReentrantLock(true) 为公平锁，默认不公平\n\n## ReentrantLock vs sychoronised\n1. cas vs sync\n2. trylock\n3. lockinterruptibly\n4. 公平和非公平\n5. 可以替代synchronized\n\n## CountDownLatch\n1. 相当于一个门栓，wait等倒数，等变成0时打开，用来等待线程结束，比join更灵活\n2. await():等待变为0\n3. countDown()：值减一\n\n## CyclicBarrier\nawait等待线程达到一个指定数量开始放行，人满发车，可以定义一个到达后执行的线程，比如需要等待其他线程完成后才执行\n\n\n## phaser\n按阶段执行\n1. 自定义一个类继承Phaser,重写onAdvance方法，数量到达后自动调用，第一个参数为第几个阶段(从0开始)，第二个参数为此阶段剩余多少线程，arriveAndDeregister会移除注册\n2. bulkRegister(n) 执行到达一个阶段的线程数量\n3. arriveAndAwaitAdvance() 到达后等待，等指定数量后执行\n4. arriveAndDeregister()\n解除注册，和调用此方法的线程无关系。\n5. register() 注册一个\n\n## ReadWriteLock\n读写锁，即共享锁和排他锁\n1. readLock() 获取读锁\n2. WriteLock() 获取写锁\n\n## Semaphore\n1. new Semaphore(n) 指定信号量，允许n个线程同时运行\n2. new Semaphore(n，true) 第二个参数为true为公平，默认不公平\n2. acquire() 取得信号量，信号量会减1\n3. release() 释放信号量，信号量加1\n4. 作用是限流，一般也用Guava RateLimiter\n\n## Exchanger\n1. exchange(String) 两个线程间交换数据,返回交换后的数据\n2. exhange可以设置交换超时时间\n\n\n\n\n\n\n\n","source":"_posts/java多线程与高并发(二).md","raw":"---\ntitle: \"java多线程与高并发---(二)JUC\"\ntags:\n  - java多线程与高并发\nid: 1001\ncategories:\n  - java多线程与高并发\ndate: 2020-1-1 16:00:00\n---\n\n## volatile\n1. 保证线程可见性\n2. 禁止指令重排序\n3. 单例模式双重检查，还是要加volatitle，问题可能会出在指令重排序上。 jvm new对象分为三步，申请内存--->构建成员变量-->赋值给对象，加了volatile才能保证赋值完成才会返回new出的对象。\n4. 锁细化，前后都有逻辑，只有中间几步需要加锁，不加在方法，而加在这几步上\n5. 锁粗化，很多个锁的时候直接整体锁，锁争用减少\n6. 只能保证可见性，不能保证原子性，因为写的时候不能保证，比如count++内部指令是分几步的，高并发读的时候还是会出错。还是得用sychoronised\n\n\n## CAS(Compare and set)\n1. 无锁优化 自旋\n2. juc中Atomic开头都是CAS保证的\n3. ABA问题  加version版本号 AtomicStampedReference解决 基础类型不影响，但是如果Object等引用，过程中改变了引用中的值，就会有问题 比如你的女朋友跟你复合，但是中间已经经历了很多，已经不是原来的女朋友了。。。\n\n## unsafe类\n1. 直接操作内存 allocateMemory 分配内存\nfreeMemory 释放内存\n2. 直接生产类实例\n3. 直接操作类或实例变1量\n4. CAS相关操作\n5. jdk1.8是不可以直接用的，11已经可以直接使用\n\n## LongAdder\n分段锁\n\n## ReentrantLock\n1. lock 只能unlock，否则无法停止\n2. unlock 一般放finally里\n3. trylock\n4. lockInterruptibly 跟lock相比，他可以调用interrupt()方法进行打断\n5. new ReentrantLock(true) 为公平锁，默认不公平\n\n## ReentrantLock vs sychoronised\n1. cas vs sync\n2. trylock\n3. lockinterruptibly\n4. 公平和非公平\n5. 可以替代synchronized\n\n## CountDownLatch\n1. 相当于一个门栓，wait等倒数，等变成0时打开，用来等待线程结束，比join更灵活\n2. await():等待变为0\n3. countDown()：值减一\n\n## CyclicBarrier\nawait等待线程达到一个指定数量开始放行，人满发车，可以定义一个到达后执行的线程，比如需要等待其他线程完成后才执行\n\n\n## phaser\n按阶段执行\n1. 自定义一个类继承Phaser,重写onAdvance方法，数量到达后自动调用，第一个参数为第几个阶段(从0开始)，第二个参数为此阶段剩余多少线程，arriveAndDeregister会移除注册\n2. bulkRegister(n) 执行到达一个阶段的线程数量\n3. arriveAndAwaitAdvance() 到达后等待，等指定数量后执行\n4. arriveAndDeregister()\n解除注册，和调用此方法的线程无关系。\n5. register() 注册一个\n\n## ReadWriteLock\n读写锁，即共享锁和排他锁\n1. readLock() 获取读锁\n2. WriteLock() 获取写锁\n\n## Semaphore\n1. new Semaphore(n) 指定信号量，允许n个线程同时运行\n2. new Semaphore(n，true) 第二个参数为true为公平，默认不公平\n2. acquire() 取得信号量，信号量会减1\n3. release() 释放信号量，信号量加1\n4. 作用是限流，一般也用Guava RateLimiter\n\n## Exchanger\n1. exchange(String) 两个线程间交换数据,返回交换后的数据\n2. exhange可以设置交换超时时间\n\n\n\n\n\n\n\n","slug":"java多线程与高并发(二)","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7uv001hv8gp40jv6exi","content":"<h2 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h2><ol>\n<li>保证线程可见性</li>\n<li>禁止指令重排序</li>\n<li>单例模式双重检查，还是要加volatitle，问题可能会出在指令重排序上。 jvm new对象分为三步，申请内存—&gt;构建成员变量–&gt;赋值给对象，加了volatile才能保证赋值完成才会返回new出的对象。</li>\n<li>锁细化，前后都有逻辑，只有中间几步需要加锁，不加在方法，而加在这几步上</li>\n<li>锁粗化，很多个锁的时候直接整体锁，锁争用减少</li>\n<li>只能保证可见性，不能保证原子性，因为写的时候不能保证，比如count++内部指令是分几步的，高并发读的时候还是会出错。还是得用sychoronised</li>\n</ol>\n<h2 id=\"CAS-Compare-and-set\"><a href=\"#CAS-Compare-and-set\" class=\"headerlink\" title=\"CAS(Compare and set)\"></a>CAS(Compare and set)</h2><ol>\n<li>无锁优化 自旋</li>\n<li>juc中Atomic开头都是CAS保证的</li>\n<li>ABA问题  加version版本号 AtomicStampedReference解决 基础类型不影响，但是如果Object等引用，过程中改变了引用中的值，就会有问题 比如你的女朋友跟你复合，但是中间已经经历了很多，已经不是原来的女朋友了。。。</li>\n</ol>\n<h2 id=\"unsafe类\"><a href=\"#unsafe类\" class=\"headerlink\" title=\"unsafe类\"></a>unsafe类</h2><ol>\n<li>直接操作内存 allocateMemory 分配内存<br>freeMemory 释放内存</li>\n<li>直接生产类实例</li>\n<li>直接操作类或实例变1量</li>\n<li>CAS相关操作</li>\n<li>jdk1.8是不可以直接用的，11已经可以直接使用</li>\n</ol>\n<h2 id=\"LongAdder\"><a href=\"#LongAdder\" class=\"headerlink\" title=\"LongAdder\"></a>LongAdder</h2><p>分段锁</p>\n<h2 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h2><ol>\n<li>lock 只能unlock，否则无法停止</li>\n<li>unlock 一般放finally里</li>\n<li>trylock</li>\n<li>lockInterruptibly 跟lock相比，他可以调用interrupt()方法进行打断</li>\n<li>new ReentrantLock(true) 为公平锁，默认不公平</li>\n</ol>\n<h2 id=\"ReentrantLock-vs-sychoronised\"><a href=\"#ReentrantLock-vs-sychoronised\" class=\"headerlink\" title=\"ReentrantLock vs sychoronised\"></a>ReentrantLock vs sychoronised</h2><ol>\n<li>cas vs sync</li>\n<li>trylock</li>\n<li>lockinterruptibly</li>\n<li>公平和非公平</li>\n<li>可以替代synchronized</li>\n</ol>\n<h2 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h2><ol>\n<li>相当于一个门栓，wait等倒数，等变成0时打开，用来等待线程结束，比join更灵活</li>\n<li>await():等待变为0</li>\n<li>countDown()：值减一</li>\n</ol>\n<h2 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h2><p>await等待线程达到一个指定数量开始放行，人满发车，可以定义一个到达后执行的线程，比如需要等待其他线程完成后才执行</p>\n<h2 id=\"phaser\"><a href=\"#phaser\" class=\"headerlink\" title=\"phaser\"></a>phaser</h2><p>按阶段执行</p>\n<ol>\n<li>自定义一个类继承Phaser,重写onAdvance方法，数量到达后自动调用，第一个参数为第几个阶段(从0开始)，第二个参数为此阶段剩余多少线程，arriveAndDeregister会移除注册</li>\n<li>bulkRegister(n) 执行到达一个阶段的线程数量</li>\n<li>arriveAndAwaitAdvance() 到达后等待，等指定数量后执行</li>\n<li>arriveAndDeregister()<br>解除注册，和调用此方法的线程无关系。</li>\n<li>register() 注册一个</li>\n</ol>\n<h2 id=\"ReadWriteLock\"><a href=\"#ReadWriteLock\" class=\"headerlink\" title=\"ReadWriteLock\"></a>ReadWriteLock</h2><p>读写锁，即共享锁和排他锁</p>\n<ol>\n<li>readLock() 获取读锁</li>\n<li>WriteLock() 获取写锁</li>\n</ol>\n<h2 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h2><ol>\n<li>new Semaphore(n) 指定信号量，允许n个线程同时运行</li>\n<li>new Semaphore(n，true) 第二个参数为true为公平，默认不公平</li>\n<li>acquire() 取得信号量，信号量会减1</li>\n<li>release() 释放信号量，信号量加1</li>\n<li>作用是限流，一般也用Guava RateLimiter</li>\n</ol>\n<h2 id=\"Exchanger\"><a href=\"#Exchanger\" class=\"headerlink\" title=\"Exchanger\"></a>Exchanger</h2><ol>\n<li>exchange(String) 两个线程间交换数据,返回交换后的数据</li>\n<li>exhange可以设置交换超时时间</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h2><ol>\n<li>保证线程可见性</li>\n<li>禁止指令重排序</li>\n<li>单例模式双重检查，还是要加volatitle，问题可能会出在指令重排序上。 jvm new对象分为三步，申请内存—&gt;构建成员变量–&gt;赋值给对象，加了volatile才能保证赋值完成才会返回new出的对象。</li>\n<li>锁细化，前后都有逻辑，只有中间几步需要加锁，不加在方法，而加在这几步上</li>\n<li>锁粗化，很多个锁的时候直接整体锁，锁争用减少</li>\n<li>只能保证可见性，不能保证原子性，因为写的时候不能保证，比如count++内部指令是分几步的，高并发读的时候还是会出错。还是得用sychoronised</li>\n</ol>\n<h2 id=\"CAS-Compare-and-set\"><a href=\"#CAS-Compare-and-set\" class=\"headerlink\" title=\"CAS(Compare and set)\"></a>CAS(Compare and set)</h2><ol>\n<li>无锁优化 自旋</li>\n<li>juc中Atomic开头都是CAS保证的</li>\n<li>ABA问题  加version版本号 AtomicStampedReference解决 基础类型不影响，但是如果Object等引用，过程中改变了引用中的值，就会有问题 比如你的女朋友跟你复合，但是中间已经经历了很多，已经不是原来的女朋友了。。。</li>\n</ol>\n<h2 id=\"unsafe类\"><a href=\"#unsafe类\" class=\"headerlink\" title=\"unsafe类\"></a>unsafe类</h2><ol>\n<li>直接操作内存 allocateMemory 分配内存<br>freeMemory 释放内存</li>\n<li>直接生产类实例</li>\n<li>直接操作类或实例变1量</li>\n<li>CAS相关操作</li>\n<li>jdk1.8是不可以直接用的，11已经可以直接使用</li>\n</ol>\n<h2 id=\"LongAdder\"><a href=\"#LongAdder\" class=\"headerlink\" title=\"LongAdder\"></a>LongAdder</h2><p>分段锁</p>\n<h2 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h2><ol>\n<li>lock 只能unlock，否则无法停止</li>\n<li>unlock 一般放finally里</li>\n<li>trylock</li>\n<li>lockInterruptibly 跟lock相比，他可以调用interrupt()方法进行打断</li>\n<li>new ReentrantLock(true) 为公平锁，默认不公平</li>\n</ol>\n<h2 id=\"ReentrantLock-vs-sychoronised\"><a href=\"#ReentrantLock-vs-sychoronised\" class=\"headerlink\" title=\"ReentrantLock vs sychoronised\"></a>ReentrantLock vs sychoronised</h2><ol>\n<li>cas vs sync</li>\n<li>trylock</li>\n<li>lockinterruptibly</li>\n<li>公平和非公平</li>\n<li>可以替代synchronized</li>\n</ol>\n<h2 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h2><ol>\n<li>相当于一个门栓，wait等倒数，等变成0时打开，用来等待线程结束，比join更灵活</li>\n<li>await():等待变为0</li>\n<li>countDown()：值减一</li>\n</ol>\n<h2 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h2><p>await等待线程达到一个指定数量开始放行，人满发车，可以定义一个到达后执行的线程，比如需要等待其他线程完成后才执行</p>\n<h2 id=\"phaser\"><a href=\"#phaser\" class=\"headerlink\" title=\"phaser\"></a>phaser</h2><p>按阶段执行</p>\n<ol>\n<li>自定义一个类继承Phaser,重写onAdvance方法，数量到达后自动调用，第一个参数为第几个阶段(从0开始)，第二个参数为此阶段剩余多少线程，arriveAndDeregister会移除注册</li>\n<li>bulkRegister(n) 执行到达一个阶段的线程数量</li>\n<li>arriveAndAwaitAdvance() 到达后等待，等指定数量后执行</li>\n<li>arriveAndDeregister()<br>解除注册，和调用此方法的线程无关系。</li>\n<li>register() 注册一个</li>\n</ol>\n<h2 id=\"ReadWriteLock\"><a href=\"#ReadWriteLock\" class=\"headerlink\" title=\"ReadWriteLock\"></a>ReadWriteLock</h2><p>读写锁，即共享锁和排他锁</p>\n<ol>\n<li>readLock() 获取读锁</li>\n<li>WriteLock() 获取写锁</li>\n</ol>\n<h2 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h2><ol>\n<li>new Semaphore(n) 指定信号量，允许n个线程同时运行</li>\n<li>new Semaphore(n，true) 第二个参数为true为公平，默认不公平</li>\n<li>acquire() 取得信号量，信号量会减1</li>\n<li>release() 释放信号量，信号量加1</li>\n<li>作用是限流，一般也用Guava RateLimiter</li>\n</ol>\n<h2 id=\"Exchanger\"><a href=\"#Exchanger\" class=\"headerlink\" title=\"Exchanger\"></a>Exchanger</h2><ol>\n<li>exchange(String) 两个线程间交换数据,返回交换后的数据</li>\n<li>exhange可以设置交换超时时间</li>\n</ol>\n"},{"title":" redis入门","id":"102","date":"2018-01-24T10:53:33.000Z","_content":"\n# 安装redis #\n\t[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n\t[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n\t[root@linxu ~]# mkdir /usr/local/redis\n\t[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n\t[root@linxu redis-4.0.6]# make\n\t[root@linxu redis]# cd src\n\t[root@linxu src]# ./redis-server  #运行 \n\t[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n# 测试redis #\n\t第一个窗口:\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n\t[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n\t第二个窗口:\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n\t[root@linxu src]# ./redis-cli\n\t127.0.0.1:6379>set test hahaah  \n\tOK\n\t127.0.0.1:6379>get test\n\t\"hahaah\"\n\n# 利用jedis测试java连接redis #\n\t//pom.xml中添加\n\t<dependency>\n    \t<groupId>redis.clients<groupId>\n    \t<artifactId>jedis<artifactId>\n    \t<version&gt;2.9.0<version>\n\t<dependency>\n测试代码：\n\tpackage com.redis.demo;\n\n\timport redis.clients.jedis.Jedis;\n\n\tpublic class TestRedis {\n    \tpublic static void main(String[] args) {\n        \t//连接本地的 Redis 服务\n        \tJedis jedis = new Jedis(\"192.168.43.163\",6379);\n        \tSystem.out.println(\"连接成功\");\n        \t//查看服务是否运行\n        \tSystem.out.println(\"服务正在运行: \"+jedis.ping());\n    \t}\n\t}\n运行时报异常：  \n\n\tException in thread \"main\" redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command 'CONFIG SET protected-mode no' from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to 'no', and then restarting the server. 3) If you started the server manually just for testing, restart it with the '--protected-mode no' option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.\n此时需要修改配置文件redis.conf，修改如下\n\t1.注释掉bind\n\t#bind 127.0.0.1\n\t2.protected-mode yes\n\t改为\n\tprotected-mode no\n\t重新启动redis即可\n","source":"_posts/redis.md","raw":"---\ntitle: \" redis入门\"\nid: 102\ncategories:\n  - Redis\ndate: 2018-01-24 18:53:33\ntags:\n---\n\n# 安装redis #\n\t[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n\t[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n\t[root@linxu ~]# mkdir /usr/local/redis\n\t[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n\t[root@linxu redis-4.0.6]# make\n\t[root@linxu redis]# cd src\n\t[root@linxu src]# ./redis-server  #运行 \n\t[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n# 测试redis #\n\t第一个窗口:\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n\t[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n\t第二个窗口:\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n\t[root@linxu src]# ./redis-cli\n\t127.0.0.1:6379>set test hahaah  \n\tOK\n\t127.0.0.1:6379>get test\n\t\"hahaah\"\n\n# 利用jedis测试java连接redis #\n\t//pom.xml中添加\n\t<dependency>\n    \t<groupId>redis.clients<groupId>\n    \t<artifactId>jedis<artifactId>\n    \t<version&gt;2.9.0<version>\n\t<dependency>\n测试代码：\n\tpackage com.redis.demo;\n\n\timport redis.clients.jedis.Jedis;\n\n\tpublic class TestRedis {\n    \tpublic static void main(String[] args) {\n        \t//连接本地的 Redis 服务\n        \tJedis jedis = new Jedis(\"192.168.43.163\",6379);\n        \tSystem.out.println(\"连接成功\");\n        \t//查看服务是否运行\n        \tSystem.out.println(\"服务正在运行: \"+jedis.ping());\n    \t}\n\t}\n运行时报异常：  \n\n\tException in thread \"main\" redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command 'CONFIG SET protected-mode no' from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to 'no', and then restarting the server. 3) If you started the server manually just for testing, restart it with the '--protected-mode no' option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.\n此时需要修改配置文件redis.conf，修改如下\n\t1.注释掉bind\n\t#bind 127.0.0.1\n\t2.protected-mode yes\n\t改为\n\tprotected-mode no\n\t重新启动redis即可\n","slug":"redis","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7uy001jv8gp5f44fcwl","content":"<h1 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h1><pre><code>[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n[root@linxu ~]# mkdir /usr/local/redis\n[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n[root@linxu redis-4.0.6]# make\n[root@linxu redis]# cd src\n[root@linxu src]# ./redis-server  #运行 \n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行</code></pre><h1 id=\"测试redis\"><a href=\"#测试redis\" class=\"headerlink\" title=\"测试redis\"></a>测试redis</h1><pre><code>第一个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n第二个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-cli\n127.0.0.1:6379&gt;set test hahaah  \nOK\n127.0.0.1:6379&gt;get test\n&quot;hahaah&quot;</code></pre><h1 id=\"利用jedis测试java连接redis\"><a href=\"#利用jedis测试java连接redis\" class=\"headerlink\" title=\"利用jedis测试java连接redis\"></a>利用jedis测试java连接redis</h1><pre><code>//pom.xml中添加\n&lt;dependency&gt;\n    &lt;groupId&gt;redis.clients&lt;groupId&gt;\n    &lt;artifactId&gt;jedis&lt;artifactId&gt;\n    &lt;version&amp;gt;2.9.0&lt;version&gt;\n&lt;dependency&gt;</code></pre><p>测试代码：<br>    package com.redis.demo;</p>\n<pre><code>import redis.clients.jedis.Jedis;\n\npublic class TestRedis {\n    public static void main(String[] args) {\n        //连接本地的 Redis 服务\n        Jedis jedis = new Jedis(&quot;192.168.43.163&quot;,6379);\n        System.out.println(&quot;连接成功&quot;);\n        //查看服务是否运行\n        System.out.println(&quot;服务正在运行: &quot;+jedis.ping());\n    }\n}</code></pre><p>运行时报异常：  </p>\n<pre><code>Exception in thread &quot;main&quot; redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &apos;CONFIG SET protected-mode no&apos; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &apos;no&apos;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &apos;--protected-mode no&apos; option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.</code></pre><p>此时需要修改配置文件redis.conf，修改如下<br>    1.注释掉bind<br>    #bind 127.0.0.1<br>    2.protected-mode yes<br>    改为<br>    protected-mode no<br>    重新启动redis即可</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h1><pre><code>[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n[root@linxu ~]# mkdir /usr/local/redis\n[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n[root@linxu redis-4.0.6]# make\n[root@linxu redis]# cd src\n[root@linxu src]# ./redis-server  #运行 \n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行</code></pre><h1 id=\"测试redis\"><a href=\"#测试redis\" class=\"headerlink\" title=\"测试redis\"></a>测试redis</h1><pre><code>第一个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n第二个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-cli\n127.0.0.1:6379&gt;set test hahaah  \nOK\n127.0.0.1:6379&gt;get test\n&quot;hahaah&quot;</code></pre><h1 id=\"利用jedis测试java连接redis\"><a href=\"#利用jedis测试java连接redis\" class=\"headerlink\" title=\"利用jedis测试java连接redis\"></a>利用jedis测试java连接redis</h1><pre><code>//pom.xml中添加\n&lt;dependency&gt;\n    &lt;groupId&gt;redis.clients&lt;groupId&gt;\n    &lt;artifactId&gt;jedis&lt;artifactId&gt;\n    &lt;version&amp;gt;2.9.0&lt;version&gt;\n&lt;dependency&gt;</code></pre><p>测试代码：<br>    package com.redis.demo;</p>\n<pre><code>import redis.clients.jedis.Jedis;\n\npublic class TestRedis {\n    public static void main(String[] args) {\n        //连接本地的 Redis 服务\n        Jedis jedis = new Jedis(&quot;192.168.43.163&quot;,6379);\n        System.out.println(&quot;连接成功&quot;);\n        //查看服务是否运行\n        System.out.println(&quot;服务正在运行: &quot;+jedis.ping());\n    }\n}</code></pre><p>运行时报异常：  </p>\n<pre><code>Exception in thread &quot;main&quot; redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &apos;CONFIG SET protected-mode no&apos; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &apos;no&apos;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &apos;--protected-mode no&apos; option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.</code></pre><p>此时需要修改配置文件redis.conf，修改如下<br>    1.注释掉bind<br>    #bind 127.0.0.1<br>    2.protected-mode yes<br>    改为<br>    protected-mode no<br>    重新启动redis即可</p>\n"},{"title":" Redis集群搭建","id":"108","date":"2018-01-26T06:36:50.000Z","_content":"\nredis安装请参考：\n\nhttp://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\n\n1.单台机器redis集群搭建  \n\t\n\t[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n\t[root@linxu ~]# cd /usr/local/redis-cluster    \n\t[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n\t[root@linxu redis-cluster]# mkdir bin\n\t[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n\t[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n\t[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n\t[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n\t[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n\t[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\n\tport 9001（每个节点的端口号）\n\tdaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;号强制后台运行)\n\tbind 192.168.43.163（绑定当前机器 IP）\n\tdir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\n\tpidfile /var/run/redis_9001.pid（pid 9001和port要对应）\n\tcluster-enabled yes（启动集群模式）\n\tcluster-config-file nodes-9001.conf（9001和port要对应）\n\tcluster-node-timeout 15000\n\tappendonly yes(是否开启AOF，默认关闭no)\n\n\tPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n\t[root@linxu bin]# cd /usr/local/redis-cluster/bin \n\t[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n\t[root@linxu bin]# ./redis-server  ../9002/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9003/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9004/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9005/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9006/redis.conf\n\t[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n\t[root@linxu bin]# cd  #返回根目录\n\t[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n\t[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n\t[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n\t[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n\t[root@linxu ruby-2.5.0]# ./configure\n\t[root@linxu ruby-2.5.0]# make\n\t[root@linxu ruby-2.5.0]# make install\n\t[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n\t[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n\t[root@linxu ~]# gem install redis\n\n\tPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n    [root@linxu ~]# yum install curl  #安装curl\n    [root@linxu ~]# curl -L get.rvm.io | bash -s stable \n    如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n    [root@linxu ~]#  source /etc/profile.d/rvm.sh\n    此时再执行[root@linxu ~]# gem install redis即可\n\n\t[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n\t[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n\t192.168.43.216:9001> set name da\n\t>Redirected to slot [5798] located at 192.168.43.216:9002\n\tOK\n\n\tPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002\n\n2.不同机器搭建redis集群\n此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点\n第一台  192.168.43.216 节点 10001 10002 10003\n第二台  192.168.43.163 节点 10004 10005 10006\n将六个节点全部启动  \n\n\t[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动\n启动后创建集群  \n\n\t./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n\t[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n\t192.168.43.216:10001> set a 1\n\t>Redirected to slot [15495] located at 192.168.43.163:10005\n\tOK","source":"_posts/redis集群.md","raw":"---\ntitle: \" Redis集群搭建\"\nid: 108\ncategories:\n  - Redis\ndate: 2018-01-26 14:36:50\ntags:\n---\n\nredis安装请参考：\n\nhttp://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\n\n1.单台机器redis集群搭建  \n\t\n\t[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n\t[root@linxu ~]# cd /usr/local/redis-cluster    \n\t[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n\t[root@linxu redis-cluster]# mkdir bin\n\t[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n\t[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n\t[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n\t[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n\t[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n\t[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\n\tport 9001（每个节点的端口号）\n\tdaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;号强制后台运行)\n\tbind 192.168.43.163（绑定当前机器 IP）\n\tdir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\n\tpidfile /var/run/redis_9001.pid（pid 9001和port要对应）\n\tcluster-enabled yes（启动集群模式）\n\tcluster-config-file nodes-9001.conf（9001和port要对应）\n\tcluster-node-timeout 15000\n\tappendonly yes(是否开启AOF，默认关闭no)\n\n\tPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n\t[root@linxu bin]# cd /usr/local/redis-cluster/bin \n\t[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n\t[root@linxu bin]# ./redis-server  ../9002/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9003/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9004/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9005/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9006/redis.conf\n\t[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n\t[root@linxu bin]# cd  #返回根目录\n\t[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n\t[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n\t[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n\t[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n\t[root@linxu ruby-2.5.0]# ./configure\n\t[root@linxu ruby-2.5.0]# make\n\t[root@linxu ruby-2.5.0]# make install\n\t[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n\t[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n\t[root@linxu ~]# gem install redis\n\n\tPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n    [root@linxu ~]# yum install curl  #安装curl\n    [root@linxu ~]# curl -L get.rvm.io | bash -s stable \n    如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n    [root@linxu ~]#  source /etc/profile.d/rvm.sh\n    此时再执行[root@linxu ~]# gem install redis即可\n\n\t[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n\t[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n\t192.168.43.216:9001> set name da\n\t>Redirected to slot [5798] located at 192.168.43.216:9002\n\tOK\n\n\tPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002\n\n2.不同机器搭建redis集群\n此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点\n第一台  192.168.43.216 节点 10001 10002 10003\n第二台  192.168.43.163 节点 10004 10005 10006\n将六个节点全部启动  \n\n\t[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动\n启动后创建集群  \n\n\t./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n\t[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n\t192.168.43.216:10001> set a 1\n\t>Redirected to slot [15495] located at 192.168.43.163:10005\n\tOK","slug":"redis集群","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7v0001mv8gp9f6hg98o","content":"<p>redis安装请参考：</p>\n<p><a href=\"http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"noopener\">http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/</a></p>\n<p>1.单台机器redis集群搭建  </p>\n<pre><code>[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n[root@linxu ~]# cd /usr/local/redis-cluster    \n[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n[root@linxu redis-cluster]# mkdir bin\n[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\nport 9001（每个节点的端口号）\ndaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;amp;号强制后台运行)\nbind 192.168.43.163（绑定当前机器 IP）\ndir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\npidfile /var/run/redis_9001.pid（pid 9001和port要对应）\ncluster-enabled yes（启动集群模式）\ncluster-config-file nodes-9001.conf（9001和port要对应）\ncluster-node-timeout 15000\nappendonly yes(是否开启AOF，默认关闭no)\n\nPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n[root@linxu bin]# cd /usr/local/redis-cluster/bin \n[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n[root@linxu bin]# ./redis-server  ../9002/redis.conf\n[root@linxu bin]# ./redis-server  ../9003/redis.conf\n[root@linxu bin]# ./redis-server  ../9004/redis.conf\n[root@linxu bin]# ./redis-server  ../9005/redis.conf\n[root@linxu bin]# ./redis-server  ../9006/redis.conf\n[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n[root@linxu bin]# cd  #返回根目录\n[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n[root@linxu ruby-2.5.0]# ./configure\n[root@linxu ruby-2.5.0]# make\n[root@linxu ruby-2.5.0]# make install\n[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n[root@linxu ~]# gem install redis\n\nPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n[root@linxu ~]# yum install curl  #安装curl\n[root@linxu ~]# curl -L get.rvm.io | bash -s stable \n如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n[root@linxu ~]#  source /etc/profile.d/rvm.sh\n此时再执行[root@linxu ~]# gem install redis即可\n\n[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n192.168.43.216:9001&gt; set name da\n&gt;Redirected to slot [5798] located at 192.168.43.216:9002\nOK\n\nPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002</code></pre><p>2.不同机器搭建redis集群<br>此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点<br>第一台  192.168.43.216 节点 10001 10002 10003<br>第二台  192.168.43.163 节点 10004 10005 10006<br>将六个节点全部启动  </p>\n<pre><code>[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动</code></pre><p>启动后创建集群  </p>\n<pre><code>./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n192.168.43.216:10001&gt; set a 1\n&gt;Redirected to slot [15495] located at 192.168.43.163:10005\nOK</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>redis安装请参考：</p>\n<p><a href=\"http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"noopener\">http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/</a></p>\n<p>1.单台机器redis集群搭建  </p>\n<pre><code>[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n[root@linxu ~]# cd /usr/local/redis-cluster    \n[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n[root@linxu redis-cluster]# mkdir bin\n[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\nport 9001（每个节点的端口号）\ndaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;amp;号强制后台运行)\nbind 192.168.43.163（绑定当前机器 IP）\ndir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\npidfile /var/run/redis_9001.pid（pid 9001和port要对应）\ncluster-enabled yes（启动集群模式）\ncluster-config-file nodes-9001.conf（9001和port要对应）\ncluster-node-timeout 15000\nappendonly yes(是否开启AOF，默认关闭no)\n\nPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n[root@linxu bin]# cd /usr/local/redis-cluster/bin \n[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n[root@linxu bin]# ./redis-server  ../9002/redis.conf\n[root@linxu bin]# ./redis-server  ../9003/redis.conf\n[root@linxu bin]# ./redis-server  ../9004/redis.conf\n[root@linxu bin]# ./redis-server  ../9005/redis.conf\n[root@linxu bin]# ./redis-server  ../9006/redis.conf\n[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n[root@linxu bin]# cd  #返回根目录\n[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n[root@linxu ruby-2.5.0]# ./configure\n[root@linxu ruby-2.5.0]# make\n[root@linxu ruby-2.5.0]# make install\n[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n[root@linxu ~]# gem install redis\n\nPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n[root@linxu ~]# yum install curl  #安装curl\n[root@linxu ~]# curl -L get.rvm.io | bash -s stable \n如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n[root@linxu ~]#  source /etc/profile.d/rvm.sh\n此时再执行[root@linxu ~]# gem install redis即可\n\n[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n192.168.43.216:9001&gt; set name da\n&gt;Redirected to slot [5798] located at 192.168.43.216:9002\nOK\n\nPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002</code></pre><p>2.不同机器搭建redis集群<br>此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点<br>第一台  192.168.43.216 节点 10001 10002 10003<br>第二台  192.168.43.163 节点 10004 10005 10006<br>将六个节点全部启动  </p>\n<pre><code>[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动</code></pre><p>启动后创建集群  </p>\n<pre><code>./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n192.168.43.216:10001&gt; set a 1\n&gt;Redirected to slot [15495] located at 192.168.43.163:10005\nOK</code></pre>"},{"title":" Spring-batch restart重拉机制","id":"64","date":"2017-12-22T06:27:28.000Z","_content":"\n对于Spring-batch中的Reader-processor-writer模式，例如   \n\n\t<batch:step id=\"test-01\">\n\t\t<batch:tasklet>\n\t\t\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\">\n\t\t\t\t<batch:writer>\n\t\t\t\t\t<bean class=\"com.test.TestW\">\n\t\t\t\t<batch:writer>\n\t\t\t<batch:chunk>\n\t\t<batch:tasklet>\n\t<batch:step>\n如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。\n\n如果此时将  \n\n\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\">\n改为  \n\n\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"2\">\n这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。\n\n以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。","source":"_posts/springbatch.md","raw":"---\ntitle: \" Spring-batch restart重拉机制\"\nid: 64\ncategories:\n  - Spring-batch\ndate: 2017-12-22 14:27:28\ntags:\n---\n\n对于Spring-batch中的Reader-processor-writer模式，例如   \n\n\t<batch:step id=\"test-01\">\n\t\t<batch:tasklet>\n\t\t\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\">\n\t\t\t\t<batch:writer>\n\t\t\t\t\t<bean class=\"com.test.TestW\">\n\t\t\t\t<batch:writer>\n\t\t\t<batch:chunk>\n\t\t<batch:tasklet>\n\t<batch:step>\n如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。\n\n如果此时将  \n\n\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\">\n改为  \n\n\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"2\">\n这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。\n\n以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。","slug":"springbatch","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7v2001ov8gp4zy4azoj","content":"<p>对于Spring-batch中的Reader-processor-writer模式，例如   </p>\n<pre><code>&lt;batch:step id=&quot;test-01&quot;&gt;\n    &lt;batch:tasklet&gt;\n        &lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;1&quot;&gt;\n            &lt;batch:writer&gt;\n                &lt;bean class=&quot;com.test.TestW&quot;&gt;\n            &lt;batch:writer&gt;\n        &lt;batch:chunk&gt;\n    &lt;batch:tasklet&gt;\n&lt;batch:step&gt;</code></pre><p>如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。</p>\n<p>如果此时将  </p>\n<pre><code>&lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;1&quot;&gt;</code></pre><p>改为  </p>\n<pre><code>&lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;2&quot;&gt;</code></pre><p>这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。</p>\n<p>以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于Spring-batch中的Reader-processor-writer模式，例如   </p>\n<pre><code>&lt;batch:step id=&quot;test-01&quot;&gt;\n    &lt;batch:tasklet&gt;\n        &lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;1&quot;&gt;\n            &lt;batch:writer&gt;\n                &lt;bean class=&quot;com.test.TestW&quot;&gt;\n            &lt;batch:writer&gt;\n        &lt;batch:chunk&gt;\n    &lt;batch:tasklet&gt;\n&lt;batch:step&gt;</code></pre><p>如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。</p>\n<p>如果此时将  </p>\n<pre><code>&lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;1&quot;&gt;</code></pre><p>改为  </p>\n<pre><code>&lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;2&quot;&gt;</code></pre><p>这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。</p>\n<p>以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。</p>\n"},{"title":"时间简史","id":"1201","date":"2018-12-04T02:20:31.000Z","author":["linxu"],"_content":"\n# 时间简史 #\n## 时间的开端 ##\n* 公元前340年，亚里士多德提出地球是宇宙中心，是不动的，其他的行星和恒星都是围绕着地球做规律的圆周运动的，也就是地心说\n* 1514年，哥白尼提出了日心说。\n* 直到一个世纪后伽利略和开普勒通过观测才开始公开支持日心说，并且修正运动轨迹为椭圆形。\n* 1687年，牛顿提出万有引力定律，并证明了引力使月亮绕着地球转动，地球和其他行星绕着太阳转动。 \n* 1929年，哈勃发现不管从哪个方向观测，远处的星系都在飞速的离我们而去，离得越远速度越快，这也和外有引力相契合，这证明宇宙是在不停膨胀的，哈勃也暗示了一个宇宙大爆炸的时刻，当时宇宙的尺度无穷小，而且无限紧密。在这种条件下，所有科学定律并因此所有预见将来的能力都失效了。如果在此时刻之前有过些事件，它们将不可能影响现在所发生的一切。所以在这个意义上人们可以说，时间在大爆炸时有一开端。\n\n## 相对论 ##\n* 证明物体无法超过光速\n根据狭义相对论,物体的动质量,与速度之间的关系：\nM=m0√（1-v²/c²）\nM是物体的动质量,m0是物体的静质量,v是物体的速度,C是光速.\n当V增大的时候,分母变小,M增大.\n当V=C的时候,分母为0,M=无限大.\nE=mc^2，质量无限大能量也就是无限大，根据能量守恒这是不可能的，所以物体无法超过光速\n\n* 双生子佯谬\n佯缪：一个命题看上去是一个错误，但实际上不是。\n考虑一对双生子，假定其中一个孩子去山顶上生活，而另一个留在海平面，第一个将比第二个老得快。在这种情形下，年纪的差别非常小。但是，如果有一个孩子在以近于光速运动的空间飞船中作长途旅行，这种差别就会大得多。当他回来时，他会比留在地球上另一个人年轻得多。这即是被称为双生子的佯谬。\n\n## 黑洞 ## \n### 恒星 \n大量的气体（大部分为氢）受自身的引力吸引，而开始向自身坍缩而形成恒星。当它收缩时，气体原子相互越来越频繁地以越来越大的速度碰撞——气体的温度上升。最后，气体变得如此之热，以至于当氢原子碰撞时，它们不再弹开而是聚合形成氦。如同一个受控氢弹爆炸，反应中释放出来的热使得恒星发光。这增添的热又使气体的压力升高，直到它足以平衡引力的吸引，这时气体停止收缩。它们之间存在一个平衡。然而，最终恒星会耗尽了它的氢和其他核燃料。恒星初始的燃料越多，它则燃尽得越快。这是因为恒星的质量越大，它就必须越热才足以抵抗引力。而它越热，它的燃料就被用得越快。我们的太阳大概足够再燃烧50多亿年。\n### 时间的终点--黑洞\n恒星耗尽了燃料，它开始变冷并开始收缩。当该恒星收缩时，其表面的引力场变得很强，光线向内偏折得更多，当这恒星收缩到某一临界半径时，表面的引力场变得光线也逃逸不出去。根据相对论，没有东西会走得比光还快。这样，如果光都逃逸不出来，其他东西更不可能逃逸，都会被引力拉回去。也就是说，存在一个事件的集合或空间－时间区域，光或任何东西都不可能从该区域逃逸而到达远处的观察者。现在我们将这区域称作黑洞。当光进入黑洞后，里面的事件就传不出来人也不得而知里面的情况所以称为“黑洞”在这个里面也就没有了时间这一概念。","source":"_posts/time.md","raw":"---\ntitle: \"时间简史\"\ntags:\n  - others\nid: 1201\ncategories:\n  - others\ndate: 2018-12-04 10:20:31\nauthor: \n  - linxu\n---\n\n# 时间简史 #\n## 时间的开端 ##\n* 公元前340年，亚里士多德提出地球是宇宙中心，是不动的，其他的行星和恒星都是围绕着地球做规律的圆周运动的，也就是地心说\n* 1514年，哥白尼提出了日心说。\n* 直到一个世纪后伽利略和开普勒通过观测才开始公开支持日心说，并且修正运动轨迹为椭圆形。\n* 1687年，牛顿提出万有引力定律，并证明了引力使月亮绕着地球转动，地球和其他行星绕着太阳转动。 \n* 1929年，哈勃发现不管从哪个方向观测，远处的星系都在飞速的离我们而去，离得越远速度越快，这也和外有引力相契合，这证明宇宙是在不停膨胀的，哈勃也暗示了一个宇宙大爆炸的时刻，当时宇宙的尺度无穷小，而且无限紧密。在这种条件下，所有科学定律并因此所有预见将来的能力都失效了。如果在此时刻之前有过些事件，它们将不可能影响现在所发生的一切。所以在这个意义上人们可以说，时间在大爆炸时有一开端。\n\n## 相对论 ##\n* 证明物体无法超过光速\n根据狭义相对论,物体的动质量,与速度之间的关系：\nM=m0√（1-v²/c²）\nM是物体的动质量,m0是物体的静质量,v是物体的速度,C是光速.\n当V增大的时候,分母变小,M增大.\n当V=C的时候,分母为0,M=无限大.\nE=mc^2，质量无限大能量也就是无限大，根据能量守恒这是不可能的，所以物体无法超过光速\n\n* 双生子佯谬\n佯缪：一个命题看上去是一个错误，但实际上不是。\n考虑一对双生子，假定其中一个孩子去山顶上生活，而另一个留在海平面，第一个将比第二个老得快。在这种情形下，年纪的差别非常小。但是，如果有一个孩子在以近于光速运动的空间飞船中作长途旅行，这种差别就会大得多。当他回来时，他会比留在地球上另一个人年轻得多。这即是被称为双生子的佯谬。\n\n## 黑洞 ## \n### 恒星 \n大量的气体（大部分为氢）受自身的引力吸引，而开始向自身坍缩而形成恒星。当它收缩时，气体原子相互越来越频繁地以越来越大的速度碰撞——气体的温度上升。最后，气体变得如此之热，以至于当氢原子碰撞时，它们不再弹开而是聚合形成氦。如同一个受控氢弹爆炸，反应中释放出来的热使得恒星发光。这增添的热又使气体的压力升高，直到它足以平衡引力的吸引，这时气体停止收缩。它们之间存在一个平衡。然而，最终恒星会耗尽了它的氢和其他核燃料。恒星初始的燃料越多，它则燃尽得越快。这是因为恒星的质量越大，它就必须越热才足以抵抗引力。而它越热，它的燃料就被用得越快。我们的太阳大概足够再燃烧50多亿年。\n### 时间的终点--黑洞\n恒星耗尽了燃料，它开始变冷并开始收缩。当该恒星收缩时，其表面的引力场变得很强，光线向内偏折得更多，当这恒星收缩到某一临界半径时，表面的引力场变得光线也逃逸不出去。根据相对论，没有东西会走得比光还快。这样，如果光都逃逸不出来，其他东西更不可能逃逸，都会被引力拉回去。也就是说，存在一个事件的集合或空间－时间区域，光或任何东西都不可能从该区域逃逸而到达远处的观察者。现在我们将这区域称作黑洞。当光进入黑洞后，里面的事件就传不出来人也不得而知里面的情况所以称为“黑洞”在这个里面也就没有了时间这一概念。","slug":"time","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7v3001sv8gpca480aea","content":"<h1 id=\"时间简史\"><a href=\"#时间简史\" class=\"headerlink\" title=\"时间简史\"></a>时间简史</h1><h2 id=\"时间的开端\"><a href=\"#时间的开端\" class=\"headerlink\" title=\"时间的开端\"></a>时间的开端</h2><ul>\n<li>公元前340年，亚里士多德提出地球是宇宙中心，是不动的，其他的行星和恒星都是围绕着地球做规律的圆周运动的，也就是地心说</li>\n<li>1514年，哥白尼提出了日心说。</li>\n<li>直到一个世纪后伽利略和开普勒通过观测才开始公开支持日心说，并且修正运动轨迹为椭圆形。</li>\n<li>1687年，牛顿提出万有引力定律，并证明了引力使月亮绕着地球转动，地球和其他行星绕着太阳转动。 </li>\n<li>1929年，哈勃发现不管从哪个方向观测，远处的星系都在飞速的离我们而去，离得越远速度越快，这也和外有引力相契合，这证明宇宙是在不停膨胀的，哈勃也暗示了一个宇宙大爆炸的时刻，当时宇宙的尺度无穷小，而且无限紧密。在这种条件下，所有科学定律并因此所有预见将来的能力都失效了。如果在此时刻之前有过些事件，它们将不可能影响现在所发生的一切。所以在这个意义上人们可以说，时间在大爆炸时有一开端。</li>\n</ul>\n<h2 id=\"相对论\"><a href=\"#相对论\" class=\"headerlink\" title=\"相对论\"></a>相对论</h2><ul>\n<li><p>证明物体无法超过光速<br>根据狭义相对论,物体的动质量,与速度之间的关系：<br>M=m0√（1-v²/c²）<br>M是物体的动质量,m0是物体的静质量,v是物体的速度,C是光速.<br>当V增大的时候,分母变小,M增大.<br>当V=C的时候,分母为0,M=无限大.<br>E=mc^2，质量无限大能量也就是无限大，根据能量守恒这是不可能的，所以物体无法超过光速</p>\n</li>\n<li><p>双生子佯谬<br>佯缪：一个命题看上去是一个错误，但实际上不是。<br>考虑一对双生子，假定其中一个孩子去山顶上生活，而另一个留在海平面，第一个将比第二个老得快。在这种情形下，年纪的差别非常小。但是，如果有一个孩子在以近于光速运动的空间飞船中作长途旅行，这种差别就会大得多。当他回来时，他会比留在地球上另一个人年轻得多。这即是被称为双生子的佯谬。</p>\n</li>\n</ul>\n<h2 id=\"黑洞\"><a href=\"#黑洞\" class=\"headerlink\" title=\"黑洞\"></a>黑洞</h2><h3 id=\"恒星\"><a href=\"#恒星\" class=\"headerlink\" title=\"恒星\"></a>恒星</h3><p>大量的气体（大部分为氢）受自身的引力吸引，而开始向自身坍缩而形成恒星。当它收缩时，气体原子相互越来越频繁地以越来越大的速度碰撞——气体的温度上升。最后，气体变得如此之热，以至于当氢原子碰撞时，它们不再弹开而是聚合形成氦。如同一个受控氢弹爆炸，反应中释放出来的热使得恒星发光。这增添的热又使气体的压力升高，直到它足以平衡引力的吸引，这时气体停止收缩。它们之间存在一个平衡。然而，最终恒星会耗尽了它的氢和其他核燃料。恒星初始的燃料越多，它则燃尽得越快。这是因为恒星的质量越大，它就必须越热才足以抵抗引力。而它越热，它的燃料就被用得越快。我们的太阳大概足够再燃烧50多亿年。</p>\n<h3 id=\"时间的终点–黑洞\"><a href=\"#时间的终点–黑洞\" class=\"headerlink\" title=\"时间的终点–黑洞\"></a>时间的终点–黑洞</h3><p>恒星耗尽了燃料，它开始变冷并开始收缩。当该恒星收缩时，其表面的引力场变得很强，光线向内偏折得更多，当这恒星收缩到某一临界半径时，表面的引力场变得光线也逃逸不出去。根据相对论，没有东西会走得比光还快。这样，如果光都逃逸不出来，其他东西更不可能逃逸，都会被引力拉回去。也就是说，存在一个事件的集合或空间－时间区域，光或任何东西都不可能从该区域逃逸而到达远处的观察者。现在我们将这区域称作黑洞。当光进入黑洞后，里面的事件就传不出来人也不得而知里面的情况所以称为“黑洞”在这个里面也就没有了时间这一概念。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"时间简史\"><a href=\"#时间简史\" class=\"headerlink\" title=\"时间简史\"></a>时间简史</h1><h2 id=\"时间的开端\"><a href=\"#时间的开端\" class=\"headerlink\" title=\"时间的开端\"></a>时间的开端</h2><ul>\n<li>公元前340年，亚里士多德提出地球是宇宙中心，是不动的，其他的行星和恒星都是围绕着地球做规律的圆周运动的，也就是地心说</li>\n<li>1514年，哥白尼提出了日心说。</li>\n<li>直到一个世纪后伽利略和开普勒通过观测才开始公开支持日心说，并且修正运动轨迹为椭圆形。</li>\n<li>1687年，牛顿提出万有引力定律，并证明了引力使月亮绕着地球转动，地球和其他行星绕着太阳转动。 </li>\n<li>1929年，哈勃发现不管从哪个方向观测，远处的星系都在飞速的离我们而去，离得越远速度越快，这也和外有引力相契合，这证明宇宙是在不停膨胀的，哈勃也暗示了一个宇宙大爆炸的时刻，当时宇宙的尺度无穷小，而且无限紧密。在这种条件下，所有科学定律并因此所有预见将来的能力都失效了。如果在此时刻之前有过些事件，它们将不可能影响现在所发生的一切。所以在这个意义上人们可以说，时间在大爆炸时有一开端。</li>\n</ul>\n<h2 id=\"相对论\"><a href=\"#相对论\" class=\"headerlink\" title=\"相对论\"></a>相对论</h2><ul>\n<li><p>证明物体无法超过光速<br>根据狭义相对论,物体的动质量,与速度之间的关系：<br>M=m0√（1-v²/c²）<br>M是物体的动质量,m0是物体的静质量,v是物体的速度,C是光速.<br>当V增大的时候,分母变小,M增大.<br>当V=C的时候,分母为0,M=无限大.<br>E=mc^2，质量无限大能量也就是无限大，根据能量守恒这是不可能的，所以物体无法超过光速</p>\n</li>\n<li><p>双生子佯谬<br>佯缪：一个命题看上去是一个错误，但实际上不是。<br>考虑一对双生子，假定其中一个孩子去山顶上生活，而另一个留在海平面，第一个将比第二个老得快。在这种情形下，年纪的差别非常小。但是，如果有一个孩子在以近于光速运动的空间飞船中作长途旅行，这种差别就会大得多。当他回来时，他会比留在地球上另一个人年轻得多。这即是被称为双生子的佯谬。</p>\n</li>\n</ul>\n<h2 id=\"黑洞\"><a href=\"#黑洞\" class=\"headerlink\" title=\"黑洞\"></a>黑洞</h2><h3 id=\"恒星\"><a href=\"#恒星\" class=\"headerlink\" title=\"恒星\"></a>恒星</h3><p>大量的气体（大部分为氢）受自身的引力吸引，而开始向自身坍缩而形成恒星。当它收缩时，气体原子相互越来越频繁地以越来越大的速度碰撞——气体的温度上升。最后，气体变得如此之热，以至于当氢原子碰撞时，它们不再弹开而是聚合形成氦。如同一个受控氢弹爆炸，反应中释放出来的热使得恒星发光。这增添的热又使气体的压力升高，直到它足以平衡引力的吸引，这时气体停止收缩。它们之间存在一个平衡。然而，最终恒星会耗尽了它的氢和其他核燃料。恒星初始的燃料越多，它则燃尽得越快。这是因为恒星的质量越大，它就必须越热才足以抵抗引力。而它越热，它的燃料就被用得越快。我们的太阳大概足够再燃烧50多亿年。</p>\n<h3 id=\"时间的终点–黑洞\"><a href=\"#时间的终点–黑洞\" class=\"headerlink\" title=\"时间的终点–黑洞\"></a>时间的终点–黑洞</h3><p>恒星耗尽了燃料，它开始变冷并开始收缩。当该恒星收缩时，其表面的引力场变得很强，光线向内偏折得更多，当这恒星收缩到某一临界半径时，表面的引力场变得光线也逃逸不出去。根据相对论，没有东西会走得比光还快。这样，如果光都逃逸不出来，其他东西更不可能逃逸，都会被引力拉回去。也就是说，存在一个事件的集合或空间－时间区域，光或任何东西都不可能从该区域逃逸而到达远处的观察者。现在我们将这区域称作黑洞。当光进入黑洞后，里面的事件就传不出来人也不得而知里面的情况所以称为“黑洞”在这个里面也就没有了时间这一概念。</p>\n"},{"title":"SpringBoot小知识点","id":"62","date":"2018-07-22T06:17:01.000Z","_content":"\n# Spring-boot 小知识点 #\n\n## 注解 ##\n\n\n## Bean ##\n+ MappingJackson2HttpMessageConverter\n  Spring Boot底层通过HttpMessageConverters依靠Jackson库将Java实体类输出为JSON格式。当有多个转换器可用时，根据消息对象类型和需要的内容类型选择最适合的转换器使用。  \n\n  ![avatar](/imgs/MessageConverter.png)\n","source":"_posts/springboot-notes.md","raw":"---\ntitle: \"SpringBoot小知识点\"\nid: 62\ncategories:\n  - WordPress\ndate: 2018-07-22 14:17:01\ntags:\n---\n\n# Spring-boot 小知识点 #\n\n## 注解 ##\n\n\n## Bean ##\n+ MappingJackson2HttpMessageConverter\n  Spring Boot底层通过HttpMessageConverters依靠Jackson库将Java实体类输出为JSON格式。当有多个转换器可用时，根据消息对象类型和需要的内容类型选择最适合的转换器使用。  \n\n  ![avatar](/imgs/MessageConverter.png)\n","slug":"springboot-notes","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7v5001uv8gpa4c3g8rj","content":"<h1 id=\"Spring-boot-小知识点\"><a href=\"#Spring-boot-小知识点\" class=\"headerlink\" title=\"Spring-boot 小知识点\"></a>Spring-boot 小知识点</h1><h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h2><ul>\n<li><p>MappingJackson2HttpMessageConverter<br>Spring Boot底层通过HttpMessageConverters依靠Jackson库将Java实体类输出为JSON格式。当有多个转换器可用时，根据消息对象类型和需要的内容类型选择最适合的转换器使用。  </p>\n<p><img src=\"/imgs/MessageConverter.png\" alt=\"avatar\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-boot-小知识点\"><a href=\"#Spring-boot-小知识点\" class=\"headerlink\" title=\"Spring-boot 小知识点\"></a>Spring-boot 小知识点</h1><h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h2><ul>\n<li><p>MappingJackson2HttpMessageConverter<br>Spring Boot底层通过HttpMessageConverters依靠Jackson库将Java实体类输出为JSON格式。当有多个转换器可用时，根据消息对象类型和需要的内容类型选择最适合的转换器使用。  </p>\n<p><img src=\"/imgs/MessageConverter.png\" alt=\"avatar\"></p>\n</li>\n</ul>\n"},{"title":" WordPress从Apache迁移到nginx","id":"130","date":"2018-01-29T07:02:48.000Z","_content":"\n1.停掉httpd当前服务，禁用重启  \n\n\tservice httpd stop\n\t#开机重启后，apache服务不再启动p \n\tchkconfig httpd off\n2.安装nginx  \n\n\tyum -y install nginx\n3.安装php-fpm  \n\n\tyum install php-fpm\n\t/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\n\tchkconfig php-fpm on\n4.编辑nginx配置文件  \n\n\tvi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n\t#转发给wordpress网站\n\tserver {\n    \tlisten 80;\n    \tserver_name www.reallinxu.com;        \n    \taccess_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    \terror_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    \tlocation / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    \t}\n\n    \terror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    \tlocation = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \t# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    \tlocation ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    \t}\n    \tlocation ~ /\\.ht {\n             deny all;\n    \t}\n\n    \trewrite /wp-admin$ $scheme://$host$uri/ permanent;\n \t}\n\n5.新建日志目录并赋权限  \n\n\tmkdir -p /var/log/nginx/aaa\n\tchown -R nginx:adm /var/log/nginx/aaa\n6.安装最新的php-mysql  \n\n\tyum update\n\tyum install php-mysql\n7.启动nginx  \n\n\tservice nginx start\n8.此时访问可能会出现数据库错误  \n\n\tvi wp-config.php\n\t#修改以下部分\n\tdefine( 'WP_DEBUG', true );\n再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下  \n\n\tdefine( 'DB_HOST', '127.0.0.1' );   #原为localhost\n9.修改线程数，优化内存  \n\n\tvi /etc/php-fpm.d/www.conf   #修改如下\n\t最大线程数\n\tpm.max_children = 3\n\t初始线程数\n\tpm.start_servers = 1\n\t最小空余线程数\n\tpm.min_spare_servers = 1\n\t最大空余线程数\n\tpm.max_spare_servers = 1\n\tphp_admin内存最大限制\n\tphp_admin_value[memory_limit] = 128M\n","source":"_posts/wordpress-nginx.md","raw":"---\ntitle: \" WordPress从Apache迁移到nginx\"\nid: 130\ncategories:\n  - WordPress\ndate: 2018-01-29 15:02:48\ntags:\n---\n\n1.停掉httpd当前服务，禁用重启  \n\n\tservice httpd stop\n\t#开机重启后，apache服务不再启动p \n\tchkconfig httpd off\n2.安装nginx  \n\n\tyum -y install nginx\n3.安装php-fpm  \n\n\tyum install php-fpm\n\t/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\n\tchkconfig php-fpm on\n4.编辑nginx配置文件  \n\n\tvi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n\t#转发给wordpress网站\n\tserver {\n    \tlisten 80;\n    \tserver_name www.reallinxu.com;        \n    \taccess_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    \terror_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    \tlocation / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    \t}\n\n    \terror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    \tlocation = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \t# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    \tlocation ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    \t}\n    \tlocation ~ /\\.ht {\n             deny all;\n    \t}\n\n    \trewrite /wp-admin$ $scheme://$host$uri/ permanent;\n \t}\n\n5.新建日志目录并赋权限  \n\n\tmkdir -p /var/log/nginx/aaa\n\tchown -R nginx:adm /var/log/nginx/aaa\n6.安装最新的php-mysql  \n\n\tyum update\n\tyum install php-mysql\n7.启动nginx  \n\n\tservice nginx start\n8.此时访问可能会出现数据库错误  \n\n\tvi wp-config.php\n\t#修改以下部分\n\tdefine( 'WP_DEBUG', true );\n再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下  \n\n\tdefine( 'DB_HOST', '127.0.0.1' );   #原为localhost\n9.修改线程数，优化内存  \n\n\tvi /etc/php-fpm.d/www.conf   #修改如下\n\t最大线程数\n\tpm.max_children = 3\n\t初始线程数\n\tpm.start_servers = 1\n\t最小空余线程数\n\tpm.min_spare_servers = 1\n\t最大空余线程数\n\tpm.max_spare_servers = 1\n\tphp_admin内存最大限制\n\tphp_admin_value[memory_limit] = 128M\n","slug":"wordpress-nginx","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7v7001yv8gp9p9w1fh0","content":"<p>1.停掉httpd当前服务，禁用重启  </p>\n<pre><code>service httpd stop\n#开机重启后，apache服务不再启动p \nchkconfig httpd off</code></pre><p>2.安装nginx  </p>\n<pre><code>yum -y install nginx</code></pre><p>3.安装php-fpm  </p>\n<pre><code>yum install php-fpm\n/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\nchkconfig php-fpm on</code></pre><p>4.编辑nginx配置文件  </p>\n<pre><code>vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n         root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n    }\n    location ~ /\\.ht {\n         deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }</code></pre><p>5.新建日志目录并赋权限  </p>\n<pre><code>mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm /var/log/nginx/aaa</code></pre><p>6.安装最新的php-mysql  </p>\n<pre><code>yum update\nyum install php-mysql</code></pre><p>7.启动nginx  </p>\n<pre><code>service nginx start</code></pre><p>8.此时访问可能会出现数据库错误  </p>\n<pre><code>vi wp-config.php\n#修改以下部分\ndefine( &apos;WP_DEBUG&apos;, true );</code></pre><p>再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下  </p>\n<pre><code>define( &apos;DB_HOST&apos;, &apos;127.0.0.1&apos; );   #原为localhost</code></pre><p>9.修改线程数，优化内存  </p>\n<pre><code>vi /etc/php-fpm.d/www.conf   #修改如下\n最大线程数\npm.max_children = 3\n初始线程数\npm.start_servers = 1\n最小空余线程数\npm.min_spare_servers = 1\n最大空余线程数\npm.max_spare_servers = 1\nphp_admin内存最大限制\nphp_admin_value[memory_limit] = 128M</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>1.停掉httpd当前服务，禁用重启  </p>\n<pre><code>service httpd stop\n#开机重启后，apache服务不再启动p \nchkconfig httpd off</code></pre><p>2.安装nginx  </p>\n<pre><code>yum -y install nginx</code></pre><p>3.安装php-fpm  </p>\n<pre><code>yum install php-fpm\n/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\nchkconfig php-fpm on</code></pre><p>4.编辑nginx配置文件  </p>\n<pre><code>vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n         root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n    }\n    location ~ /\\.ht {\n         deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }</code></pre><p>5.新建日志目录并赋权限  </p>\n<pre><code>mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm /var/log/nginx/aaa</code></pre><p>6.安装最新的php-mysql  </p>\n<pre><code>yum update\nyum install php-mysql</code></pre><p>7.启动nginx  </p>\n<pre><code>service nginx start</code></pre><p>8.此时访问可能会出现数据库错误  </p>\n<pre><code>vi wp-config.php\n#修改以下部分\ndefine( &apos;WP_DEBUG&apos;, true );</code></pre><p>再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下  </p>\n<pre><code>define( &apos;DB_HOST&apos;, &apos;127.0.0.1&apos; );   #原为localhost</code></pre><p>9.修改线程数，优化内存  </p>\n<pre><code>vi /etc/php-fpm.d/www.conf   #修改如下\n最大线程数\npm.max_children = 3\n初始线程数\npm.start_servers = 1\n最小空余线程数\npm.min_spare_servers = 1\n最大空余线程数\npm.max_spare_servers = 1\nphp_admin内存最大限制\nphp_admin_value[memory_limit] = 128M</code></pre>"},{"title":" 微信小程序初探","id":"66","date":"2017-12-22T02:20:31.000Z","_content":"\n>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。\n\n# 前言：#\n<font size ='4' >距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  \n\n\n# 初探：#\n\n\n1.小程序的组成主要由以下四种类型文件：  \n\n  .js　　　JavaScrip文件  \n  .json　　项目配置文件，负责窗口颜色等等  \n  .wxss　　类似HTML文件  \n  .wxml　　类似CSS文件\n\n2.小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：\n\n   app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。  \n   app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。  \n   app.wxss　　不必须有这个文件，可以定义全局的css样式。  \n   app.wxml　　不必须有这个文件，并不是首页界面。  \n  \n3.小程序的基本函数如下：  \n\nApp函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  \n    \n属性|描述|触发时机  \n:-| :- | :-   \nonLaunch|生命周期函数--监听小程序初始化|当小程序初始化完成时，会触发 onLaunch（全局只触发一次）  \nonShow|生命周期函数--监听小程序显示|当小程序启动，或从后台进入前台显示，会触发 onShow  \nonHide|Function|生命周期函数--监听小程序隐藏\t当小程序从前台进入后台，会触发 onHide  \nonError|Function|错误监听函数\t当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息  \n其他||开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问 \n<br/>   \n\nPage函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。   \n  \n    \n属性 | 类型 | 描述 \n:- | :- | :-  \ndata | Object | 页面的初始数据 \nonLoad | Function | 生命周期函数--监听页面加载 \nonReady | Function | 生命周期函数--监听页面初次渲染完成 \nonShow | Function | 生命周期函数--监听页面显示 \nonHide | Function | 生命周期函数--监听页面隐藏 \nonUnload | Function | 生命周期函数--监听页面卸载 \nonPullDownRefresh | Function | 页面相关事件处理函数--监听用户下拉动作 \nonReachBottom | Function | 页面上拉触底事件的处理函数 \nonShareAppMessage | Function | 用户点击右上角转发 \nonPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问   \n<br/>\n\n4.更多小程序API请参考官方文档。  \n   [点击传送门](https://developers.weixin.qq.com/miniprogram/dev/api/)  \n\n# 实践：#\n\n通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。\n\n[数字爆炸小程序代码github地址](https://github.com/reallinxu/NumBomb.git)\n\n要点笔记：\n\n1.js文件中page中方法data为初始化数据，可以在wxml文件中通过{{demo}}来获取，也可在js定义的方法中通过setData进行修改。\n\n2.传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。  \ngetNumJson: function (e){  \n　var numjson = e.currentTarget.dataset.id;  \n}\n\n3.多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。\n\n4.页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。   \nwx.redirectTo({  \n　　url: '../boom/boom'  \n})\n当页面在tabbar时，用此方法不会跳转，应使用：  \nwx.switchTab({   \n　　url: '../index/index'   \n}) \n\n5.图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 \n\n6.隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden='true'，通过使用class='{{demo}}'在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。\n\n7.普通方法中修改变量使用:  \nbaseInput: function (e) {  \n   　　this.setData({  \n 　　　　baseNum: e.detail.value  \n   　　})  \n}   \nwx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。\n","source":"_posts/wechat.md","raw":"---\ntitle: \" 微信小程序初探\"\ntags:\n  - 微信，小程序\nid: 66\ncategories:\n  - WeChat小程序\ndate: 2017-12-22 10:20:31\n---\n\n>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。\n\n# 前言：#\n<font size ='4' >距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  \n\n\n# 初探：#\n\n\n1.小程序的组成主要由以下四种类型文件：  \n\n  .js　　　JavaScrip文件  \n  .json　　项目配置文件，负责窗口颜色等等  \n  .wxss　　类似HTML文件  \n  .wxml　　类似CSS文件\n\n2.小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：\n\n   app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。  \n   app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。  \n   app.wxss　　不必须有这个文件，可以定义全局的css样式。  \n   app.wxml　　不必须有这个文件，并不是首页界面。  \n  \n3.小程序的基本函数如下：  \n\nApp函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  \n    \n属性|描述|触发时机  \n:-| :- | :-   \nonLaunch|生命周期函数--监听小程序初始化|当小程序初始化完成时，会触发 onLaunch（全局只触发一次）  \nonShow|生命周期函数--监听小程序显示|当小程序启动，或从后台进入前台显示，会触发 onShow  \nonHide|Function|生命周期函数--监听小程序隐藏\t当小程序从前台进入后台，会触发 onHide  \nonError|Function|错误监听函数\t当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息  \n其他||开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问 \n<br/>   \n\nPage函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。   \n  \n    \n属性 | 类型 | 描述 \n:- | :- | :-  \ndata | Object | 页面的初始数据 \nonLoad | Function | 生命周期函数--监听页面加载 \nonReady | Function | 生命周期函数--监听页面初次渲染完成 \nonShow | Function | 生命周期函数--监听页面显示 \nonHide | Function | 生命周期函数--监听页面隐藏 \nonUnload | Function | 生命周期函数--监听页面卸载 \nonPullDownRefresh | Function | 页面相关事件处理函数--监听用户下拉动作 \nonReachBottom | Function | 页面上拉触底事件的处理函数 \nonShareAppMessage | Function | 用户点击右上角转发 \nonPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问   \n<br/>\n\n4.更多小程序API请参考官方文档。  \n   [点击传送门](https://developers.weixin.qq.com/miniprogram/dev/api/)  \n\n# 实践：#\n\n通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。\n\n[数字爆炸小程序代码github地址](https://github.com/reallinxu/NumBomb.git)\n\n要点笔记：\n\n1.js文件中page中方法data为初始化数据，可以在wxml文件中通过{{demo}}来获取，也可在js定义的方法中通过setData进行修改。\n\n2.传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。  \ngetNumJson: function (e){  \n　var numjson = e.currentTarget.dataset.id;  \n}\n\n3.多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。\n\n4.页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。   \nwx.redirectTo({  \n　　url: '../boom/boom'  \n})\n当页面在tabbar时，用此方法不会跳转，应使用：  \nwx.switchTab({   \n　　url: '../index/index'   \n}) \n\n5.图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 \n\n6.隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden='true'，通过使用class='{{demo}}'在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。\n\n7.普通方法中修改变量使用:  \nbaseInput: function (e) {  \n   　　this.setData({  \n 　　　　baseNum: e.detail.value  \n   　　})  \n}   \nwx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。\n","slug":"wechat","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7v80020v8gpg3k0bksk","content":"<blockquote>\n<p>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。</p>\n</blockquote>\n<h1 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：#\"></a>前言：#</h1><p><font size ='4' >距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  </p>\n<h1 id=\"初探：\"><a href=\"#初探：\" class=\"headerlink\" title=\"初探：#\"></a>初探：#</h1><p>1.小程序的组成主要由以下四种类型文件：  </p>\n<p>  .js　　　JavaScrip文件<br>  .json　　项目配置文件，负责窗口颜色等等<br>  .wxss　　类似HTML文件<br>  .wxml　　类似CSS文件</p>\n<p>2.小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：</p>\n<p>   app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。<br>   app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。<br>   app.wxss　　不必须有这个文件，可以定义全局的css样式。<br>   app.wxml　　不必须有这个文件，并不是首页界面。  </p>\n<p>3.小程序的基本函数如下：  </p>\n<p>App函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">触发时机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onLaunch</td>\n<td align=\"left\">生命周期函数–监听小程序初始化</td>\n<td align=\"left\">当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</td>\n</tr>\n<tr>\n<td align=\"left\">onShow</td>\n<td align=\"left\">生命周期函数–监听小程序显示</td>\n<td align=\"left\">当小程序启动，或从后台进入前台显示，会触发 onShow</td>\n</tr>\n<tr>\n<td align=\"left\">onHide</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听小程序隐藏    当小程序从前台进入后台，会触发 onHide</td>\n</tr>\n<tr>\n<td align=\"left\">onError</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">错误监听函数    当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息</td>\n</tr>\n<tr>\n<td align=\"left\">其他</td>\n<td align=\"left\"></td>\n<td align=\"left\">开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问</td>\n</tr>\n<tr>\n<td align=\"left\"><br/></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>Page函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。   </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">data</td>\n<td align=\"left\">Object</td>\n<td align=\"left\">页面的初始数据</td>\n</tr>\n<tr>\n<td align=\"left\">onLoad</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面加载</td>\n</tr>\n<tr>\n<td align=\"left\">onReady</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面初次渲染完成</td>\n</tr>\n<tr>\n<td align=\"left\">onShow</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面显示</td>\n</tr>\n<tr>\n<td align=\"left\">onHide</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面隐藏</td>\n</tr>\n<tr>\n<td align=\"left\">onUnload</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面卸载</td>\n</tr>\n<tr>\n<td align=\"left\">onPullDownRefresh</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">页面相关事件处理函数–监听用户下拉动作</td>\n</tr>\n<tr>\n<td align=\"left\">onReachBottom</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">页面上拉触底事件的处理函数</td>\n</tr>\n<tr>\n<td align=\"left\">onShareAppMessage</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">用户点击右上角转发</td>\n</tr>\n<tr>\n<td align=\"left\">onPageScroll</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问</td>\n</tr>\n<tr>\n<td align=\"left\"><br/></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>4.更多小程序API请参考官方文档。<br>   <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">点击传送门</a>  </p>\n<h1 id=\"实践：\"><a href=\"#实践：\" class=\"headerlink\" title=\"实践：#\"></a>实践：#</h1><p>通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。</p>\n<p><a href=\"https://github.com/reallinxu/NumBomb.git\" target=\"_blank\" rel=\"noopener\">数字爆炸小程序代码github地址</a></p>\n<p>要点笔记：</p>\n<p>1.js文件中page中方法data为初始化数据，可以在wxml文件中通过来获取，也可在js定义的方法中通过setData进行修改。</p>\n<p>2.传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。<br>getNumJson: function (e){<br>　var numjson = e.currentTarget.dataset.id;<br>}</p>\n<p>3.多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。</p>\n<p>4.页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。<br>wx.redirectTo({<br>　　url: ‘../boom/boom’<br>})<br>当页面在tabbar时，用此方法不会跳转，应使用：<br>wx.switchTab({<br>　　url: ‘../index/index’<br>}) </p>\n<p>5.图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 </p>\n<p>6.隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden=’true’，通过使用class=’‘在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。</p>\n<p>7.普通方法中修改变量使用:<br>baseInput: function (e) {<br>   　　this.setData({<br> 　　　　baseNum: e.detail.value<br>   　　})<br>}<br>wx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。</p>\n</blockquote>\n<h1 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：#\"></a>前言：#</h1><p><font size ='4' >距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  </p>\n<h1 id=\"初探：\"><a href=\"#初探：\" class=\"headerlink\" title=\"初探：#\"></a>初探：#</h1><p>1.小程序的组成主要由以下四种类型文件：  </p>\n<p>  .js　　　JavaScrip文件<br>  .json　　项目配置文件，负责窗口颜色等等<br>  .wxss　　类似HTML文件<br>  .wxml　　类似CSS文件</p>\n<p>2.小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：</p>\n<p>   app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。<br>   app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。<br>   app.wxss　　不必须有这个文件，可以定义全局的css样式。<br>   app.wxml　　不必须有这个文件，并不是首页界面。  </p>\n<p>3.小程序的基本函数如下：  </p>\n<p>App函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">触发时机</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onLaunch</td>\n<td align=\"left\">生命周期函数–监听小程序初始化</td>\n<td align=\"left\">当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</td>\n</tr>\n<tr>\n<td align=\"left\">onShow</td>\n<td align=\"left\">生命周期函数–监听小程序显示</td>\n<td align=\"left\">当小程序启动，或从后台进入前台显示，会触发 onShow</td>\n</tr>\n<tr>\n<td align=\"left\">onHide</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听小程序隐藏    当小程序从前台进入后台，会触发 onHide</td>\n</tr>\n<tr>\n<td align=\"left\">onError</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">错误监听函数    当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息</td>\n</tr>\n<tr>\n<td align=\"left\">其他</td>\n<td align=\"left\"></td>\n<td align=\"left\">开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问</td>\n</tr>\n<tr>\n<td align=\"left\"><br/></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>Page函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。   </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">data</td>\n<td align=\"left\">Object</td>\n<td align=\"left\">页面的初始数据</td>\n</tr>\n<tr>\n<td align=\"left\">onLoad</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面加载</td>\n</tr>\n<tr>\n<td align=\"left\">onReady</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面初次渲染完成</td>\n</tr>\n<tr>\n<td align=\"left\">onShow</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面显示</td>\n</tr>\n<tr>\n<td align=\"left\">onHide</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面隐藏</td>\n</tr>\n<tr>\n<td align=\"left\">onUnload</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">生命周期函数–监听页面卸载</td>\n</tr>\n<tr>\n<td align=\"left\">onPullDownRefresh</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">页面相关事件处理函数–监听用户下拉动作</td>\n</tr>\n<tr>\n<td align=\"left\">onReachBottom</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">页面上拉触底事件的处理函数</td>\n</tr>\n<tr>\n<td align=\"left\">onShareAppMessage</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">用户点击右上角转发</td>\n</tr>\n<tr>\n<td align=\"left\">onPageScroll</td>\n<td align=\"left\">Function</td>\n<td align=\"left\">页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问</td>\n</tr>\n<tr>\n<td align=\"left\"><br/></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>4.更多小程序API请参考官方文档。<br>   <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">点击传送门</a>  </p>\n<h1 id=\"实践：\"><a href=\"#实践：\" class=\"headerlink\" title=\"实践：#\"></a>实践：#</h1><p>通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。</p>\n<p><a href=\"https://github.com/reallinxu/NumBomb.git\" target=\"_blank\" rel=\"noopener\">数字爆炸小程序代码github地址</a></p>\n<p>要点笔记：</p>\n<p>1.js文件中page中方法data为初始化数据，可以在wxml文件中通过来获取，也可在js定义的方法中通过setData进行修改。</p>\n<p>2.传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。<br>getNumJson: function (e){<br>　var numjson = e.currentTarget.dataset.id;<br>}</p>\n<p>3.多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。</p>\n<p>4.页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。<br>wx.redirectTo({<br>　　url: ‘../boom/boom’<br>})<br>当页面在tabbar时，用此方法不会跳转，应使用：<br>wx.switchTab({<br>　　url: ‘../index/index’<br>}) </p>\n<p>5.图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 </p>\n<p>6.隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden=’true’，通过使用class=’‘在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。</p>\n<p>7.普通方法中修改变量使用:<br>baseInput: function (e) {<br>   　　this.setData({<br> 　　　　baseNum: e.detail.value<br>   　　})<br>}<br>wx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。</p>\n"},{"title":" 网站同时支持http和https访问","id":"133","date":"2018-01-29T07:08:53.000Z","_content":"\n1.在腾讯云申请SSL证书https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\n\n2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中\n\n3.修改nginx配置文件如下：  \n\n\tvi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n\t#转发给wordpress网站\n\tserver {\n    \tlisten 80;\n    \tlisten 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    \tserver_name www.reallinxu.com;        \n    \taccess_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    \terror_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    \t#ssl on;    #此处注释\n    \tssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    \tssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    \tlocation / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    \t}\n\n    \terror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    \tlocation = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \t# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    \tlocation ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    \t}\n    \tlocation ~ /\\.ht {\n             deny all;\n    \t}\n\n    \trewrite /wp-admin$ $scheme://$host$uri/ permanent;\n \t}\n\n4.重启nginx即可。","source":"_posts/wordpress-https.md","raw":"---\ntitle: \" 网站同时支持http和https访问\"\nid: 133\ncategories:\n  - WordPress\ndate: 2018-01-29 15:08:53\ntags:\n---\n\n1.在腾讯云申请SSL证书https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\n\n2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中\n\n3.修改nginx配置文件如下：  \n\n\tvi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n\t#转发给wordpress网站\n\tserver {\n    \tlisten 80;\n    \tlisten 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    \tserver_name www.reallinxu.com;        \n    \taccess_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    \terror_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    \t#ssl on;    #此处注释\n    \tssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    \tssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    \tlocation / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    \t}\n\n    \terror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    \tlocation = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \t# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    \tlocation ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    \t}\n    \tlocation ~ /\\.ht {\n             deny all;\n    \t}\n\n    \trewrite /wp-admin$ $scheme://$host$uri/ permanent;\n \t}\n\n4.重启nginx即可。","slug":"wordpress-https","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7v90023v8gp4rcpc4rg","content":"<p>1.在腾讯云申请SSL证书<a href=\"https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\" target=\"_blank\" rel=\"noopener\">https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。</a></p>\n<p>2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中</p>\n<p>3.修改nginx配置文件如下：  </p>\n<pre><code>vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    listen 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    #ssl on;    #此处注释\n    ssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    ssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n         root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n    }\n    location ~ /\\.ht {\n         deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }</code></pre><p>4.重启nginx即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.在腾讯云申请SSL证书<a href=\"https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\" target=\"_blank\" rel=\"noopener\">https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。</a></p>\n<p>2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中</p>\n<p>3.修改nginx配置文件如下：  </p>\n<pre><code>vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    listen 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    #ssl on;    #此处注释\n    ssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    ssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n         root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n    }\n    location ~ /\\.ht {\n         deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }</code></pre><p>4.重启nginx即可。</p>\n"},{"title":"WordPress搭建","id":"62","date":"2017-12-22T06:17:01.000Z","_content":"\n具体参考\n\nhttp://www.bandwagonhost.net/401.html\n\nhttp://www.bandwagonhost.net/403.html","source":"_posts/wordpress.md","raw":"---\ntitle: \"WordPress搭建\"\nid: 62\ncategories:\n  - WordPress\ndate: 2017-12-22 14:17:01\ntags:\n---\n\n具体参考\n\nhttp://www.bandwagonhost.net/401.html\n\nhttp://www.bandwagonhost.net/403.html","slug":"wordpress","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7vb0026v8gp4tnx4b21","content":"<p>具体参考</p>\n<p><a href=\"http://www.bandwagonhost.net/401.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/401.html</a></p>\n<p><a href=\"http://www.bandwagonhost.net/403.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/403.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>具体参考</p>\n<p><a href=\"http://www.bandwagonhost.net/401.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/401.html</a></p>\n<p><a href=\"http://www.bandwagonhost.net/403.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/403.html</a></p>\n"},{"title":"idea插件--时序图Plantuml","id":"1000","date":"2020-01-06T02:00:00.000Z","_content":"\n# idea插件--时序图Plantuml\n\n## 基本语法\n![实例1](/imgs/idea/ex1.jpg)\n\n\t@startuml\n\tA -> B: do something\n\tB -> A: do something\n\t@enduml\n\n## 不同的角色\n![实例2](/imgs/idea/ex2.jpg)\n\n\t@startuml\n\tactor Foo1\n\tboundary Foo2\n\tcontrol Foo3\n\tentity Foo4\n\tdatabase Foo5\n\tcollections Foo6\n\tFoo1 -> Foo2 : To boundary\n\tFoo1 -> Foo3 : To control\n\tFoo1 -> Foo4 : To entity\n\tFoo1 -> Foo5 : To database\n\tFoo1 -> Foo6 : To collections\n\t\n\t@enduml\n\n## 不同的箭头\n![实例3](/imgs/idea/ex3.jpg) \n\n\t@startuml\n\tBob ->x Alice\n\tBob -> Alice\n\tBob ->> Alice\n\tBob -\\ Alice\n\tBob \\\\- Alice\n\tBob //-- Alice\n\t\n\tBob ->o Alice\n\tBob o\\\\-- Alice\n\t\n\tBob <-> Alice\n\tBob <->o Alice\n\tBob -[#red]> Alice : hello\n\tAlice -[#0000FF]->Bob : ok\n\t@enduml\n\n## 分页\n![实例4](/imgs/idea/ex4.jpg)\n\n\t@startuml\n\t\n\tAlice -> Bob : message 1\n\tAlice -> Bob : message 2\n\t\n\tnewpage\n\t\n\tAlice -> Bob : message 3\n\tAlice -> Bob : message 4\n\t\n\tnewpage A title for the\\nlast page\n\t\n\tAlice -> Bob : message 5\n\tAlice -> Bob : message 6\n\t@enduml\n\n\n## 分段\n![实例5](/imgs/idea/ex5.jpg)\n\n\t@startuml\n\t\n\t== Initialization ==\n\t\n\tAlice -> Bob: Authentication Request\n\tBob --> Alice: Authentication Response\n\t\n\t== Repetition ==\n\t\n\tAlice -> Bob: Another authentication Request\n\tAlice <-- Bob: another authentication Response\n\t\n\t@enduml\n\n## 生命线\n![实例6](/imgs/idea/ex6.jpg)\n\n\t@startuml\n\tparticipant User\n\t\n\tUser -> A: DoWork\n\tactivate A #FFBBBB\n\t\n\tA -> A: Internal call\n\tactivate A #DarkSalmon\n\t\n\tA -> B: << createRequest >>\n\tactivate B\n\t\n\tB --> A: RequestCreated\n\tdeactivate B\n\tdeactivate A\n\tA -> User: Done\n\tdeactivate A\n\t\n\t@enduml\n\n## 图例注脚等\n![实例7](/imgs/idea/ex7.jpg)\n\n\t@startuml\n\t\n\theader Page Header\n\tfooter Page %page% of %lastpage%\n\t\n\ttitle Example Title\n\t\n\tAlice -> Bob : message 1\n\tnote left: this is a first note\n\t\n\tAlice -> Bob : message 2\n\t\n\t@enduml\n\n## C4架构图\nhttps://www.infoq.cn/article/C4-architecture-model\n\n\n博客转自： https://www.jianshu.com/p/30f6a9c06083","source":"_posts/时序图.md","raw":"---\ntitle: \"idea插件--时序图Plantuml\"\ntags:\n  - idea插件\nid: 1000\ncategories:\n  - idea插件\ndate: 2020-1-6 10:00:00\n---\n\n# idea插件--时序图Plantuml\n\n## 基本语法\n![实例1](/imgs/idea/ex1.jpg)\n\n\t@startuml\n\tA -> B: do something\n\tB -> A: do something\n\t@enduml\n\n## 不同的角色\n![实例2](/imgs/idea/ex2.jpg)\n\n\t@startuml\n\tactor Foo1\n\tboundary Foo2\n\tcontrol Foo3\n\tentity Foo4\n\tdatabase Foo5\n\tcollections Foo6\n\tFoo1 -> Foo2 : To boundary\n\tFoo1 -> Foo3 : To control\n\tFoo1 -> Foo4 : To entity\n\tFoo1 -> Foo5 : To database\n\tFoo1 -> Foo6 : To collections\n\t\n\t@enduml\n\n## 不同的箭头\n![实例3](/imgs/idea/ex3.jpg) \n\n\t@startuml\n\tBob ->x Alice\n\tBob -> Alice\n\tBob ->> Alice\n\tBob -\\ Alice\n\tBob \\\\- Alice\n\tBob //-- Alice\n\t\n\tBob ->o Alice\n\tBob o\\\\-- Alice\n\t\n\tBob <-> Alice\n\tBob <->o Alice\n\tBob -[#red]> Alice : hello\n\tAlice -[#0000FF]->Bob : ok\n\t@enduml\n\n## 分页\n![实例4](/imgs/idea/ex4.jpg)\n\n\t@startuml\n\t\n\tAlice -> Bob : message 1\n\tAlice -> Bob : message 2\n\t\n\tnewpage\n\t\n\tAlice -> Bob : message 3\n\tAlice -> Bob : message 4\n\t\n\tnewpage A title for the\\nlast page\n\t\n\tAlice -> Bob : message 5\n\tAlice -> Bob : message 6\n\t@enduml\n\n\n## 分段\n![实例5](/imgs/idea/ex5.jpg)\n\n\t@startuml\n\t\n\t== Initialization ==\n\t\n\tAlice -> Bob: Authentication Request\n\tBob --> Alice: Authentication Response\n\t\n\t== Repetition ==\n\t\n\tAlice -> Bob: Another authentication Request\n\tAlice <-- Bob: another authentication Response\n\t\n\t@enduml\n\n## 生命线\n![实例6](/imgs/idea/ex6.jpg)\n\n\t@startuml\n\tparticipant User\n\t\n\tUser -> A: DoWork\n\tactivate A #FFBBBB\n\t\n\tA -> A: Internal call\n\tactivate A #DarkSalmon\n\t\n\tA -> B: << createRequest >>\n\tactivate B\n\t\n\tB --> A: RequestCreated\n\tdeactivate B\n\tdeactivate A\n\tA -> User: Done\n\tdeactivate A\n\t\n\t@enduml\n\n## 图例注脚等\n![实例7](/imgs/idea/ex7.jpg)\n\n\t@startuml\n\t\n\theader Page Header\n\tfooter Page %page% of %lastpage%\n\t\n\ttitle Example Title\n\t\n\tAlice -> Bob : message 1\n\tnote left: this is a first note\n\t\n\tAlice -> Bob : message 2\n\t\n\t@enduml\n\n## C4架构图\nhttps://www.infoq.cn/article/C4-architecture-model\n\n\n博客转自： https://www.jianshu.com/p/30f6a9c06083","slug":"时序图","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7vc0028v8gp1jus6jtq","content":"<h1 id=\"idea插件–时序图Plantuml\"><a href=\"#idea插件–时序图Plantuml\" class=\"headerlink\" title=\"idea插件–时序图Plantuml\"></a>idea插件–时序图Plantuml</h1><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p><img src=\"/imgs/idea/ex1.jpg\" alt=\"实例1\"></p>\n<pre><code>@startuml\nA -&gt; B: do something\nB -&gt; A: do something\n@enduml</code></pre><h2 id=\"不同的角色\"><a href=\"#不同的角色\" class=\"headerlink\" title=\"不同的角色\"></a>不同的角色</h2><p><img src=\"/imgs/idea/ex2.jpg\" alt=\"实例2\"></p>\n<pre><code>@startuml\nactor Foo1\nboundary Foo2\ncontrol Foo3\nentity Foo4\ndatabase Foo5\ncollections Foo6\nFoo1 -&gt; Foo2 : To boundary\nFoo1 -&gt; Foo3 : To control\nFoo1 -&gt; Foo4 : To entity\nFoo1 -&gt; Foo5 : To database\nFoo1 -&gt; Foo6 : To collections\n\n@enduml</code></pre><h2 id=\"不同的箭头\"><a href=\"#不同的箭头\" class=\"headerlink\" title=\"不同的箭头\"></a>不同的箭头</h2><p><img src=\"/imgs/idea/ex3.jpg\" alt=\"实例3\"> </p>\n<pre><code>@startuml\nBob -&gt;x Alice\nBob -&gt; Alice\nBob -&gt;&gt; Alice\nBob -\\ Alice\nBob \\\\- Alice\nBob //-- Alice\n\nBob -&gt;o Alice\nBob o\\\\-- Alice\n\nBob &lt;-&gt; Alice\nBob &lt;-&gt;o Alice\nBob -[#red]&gt; Alice : hello\nAlice -[#0000FF]-&gt;Bob : ok\n@enduml</code></pre><h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><p><img src=\"/imgs/idea/ex4.jpg\" alt=\"实例4\"></p>\n<pre><code>@startuml\n\nAlice -&gt; Bob : message 1\nAlice -&gt; Bob : message 2\n\nnewpage\n\nAlice -&gt; Bob : message 3\nAlice -&gt; Bob : message 4\n\nnewpage A title for the\\nlast page\n\nAlice -&gt; Bob : message 5\nAlice -&gt; Bob : message 6\n@enduml</code></pre><h2 id=\"分段\"><a href=\"#分段\" class=\"headerlink\" title=\"分段\"></a>分段</h2><p><img src=\"/imgs/idea/ex5.jpg\" alt=\"实例5\"></p>\n<pre><code>@startuml\n\n== Initialization ==\n\nAlice -&gt; Bob: Authentication Request\nBob --&gt; Alice: Authentication Response\n\n== Repetition ==\n\nAlice -&gt; Bob: Another authentication Request\nAlice &lt;-- Bob: another authentication Response\n\n@enduml</code></pre><h2 id=\"生命线\"><a href=\"#生命线\" class=\"headerlink\" title=\"生命线\"></a>生命线</h2><p><img src=\"/imgs/idea/ex6.jpg\" alt=\"实例6\"></p>\n<pre><code>@startuml\nparticipant User\n\nUser -&gt; A: DoWork\nactivate A #FFBBBB\n\nA -&gt; A: Internal call\nactivate A #DarkSalmon\n\nA -&gt; B: &lt;&lt; createRequest &gt;&gt;\nactivate B\n\nB --&gt; A: RequestCreated\ndeactivate B\ndeactivate A\nA -&gt; User: Done\ndeactivate A\n\n@enduml</code></pre><h2 id=\"图例注脚等\"><a href=\"#图例注脚等\" class=\"headerlink\" title=\"图例注脚等\"></a>图例注脚等</h2><p><img src=\"/imgs/idea/ex7.jpg\" alt=\"实例7\"></p>\n<pre><code>@startuml\n\nheader Page Header\nfooter Page %page% of %lastpage%\n\ntitle Example Title\n\nAlice -&gt; Bob : message 1\nnote left: this is a first note\n\nAlice -&gt; Bob : message 2\n\n@enduml</code></pre><h2 id=\"C4架构图\"><a href=\"#C4架构图\" class=\"headerlink\" title=\"C4架构图\"></a>C4架构图</h2><p><a href=\"https://www.infoq.cn/article/C4-architecture-model\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/C4-architecture-model</a></p>\n<p>博客转自： <a href=\"https://www.jianshu.com/p/30f6a9c06083\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/30f6a9c06083</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"idea插件–时序图Plantuml\"><a href=\"#idea插件–时序图Plantuml\" class=\"headerlink\" title=\"idea插件–时序图Plantuml\"></a>idea插件–时序图Plantuml</h1><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p><img src=\"/imgs/idea/ex1.jpg\" alt=\"实例1\"></p>\n<pre><code>@startuml\nA -&gt; B: do something\nB -&gt; A: do something\n@enduml</code></pre><h2 id=\"不同的角色\"><a href=\"#不同的角色\" class=\"headerlink\" title=\"不同的角色\"></a>不同的角色</h2><p><img src=\"/imgs/idea/ex2.jpg\" alt=\"实例2\"></p>\n<pre><code>@startuml\nactor Foo1\nboundary Foo2\ncontrol Foo3\nentity Foo4\ndatabase Foo5\ncollections Foo6\nFoo1 -&gt; Foo2 : To boundary\nFoo1 -&gt; Foo3 : To control\nFoo1 -&gt; Foo4 : To entity\nFoo1 -&gt; Foo5 : To database\nFoo1 -&gt; Foo6 : To collections\n\n@enduml</code></pre><h2 id=\"不同的箭头\"><a href=\"#不同的箭头\" class=\"headerlink\" title=\"不同的箭头\"></a>不同的箭头</h2><p><img src=\"/imgs/idea/ex3.jpg\" alt=\"实例3\"> </p>\n<pre><code>@startuml\nBob -&gt;x Alice\nBob -&gt; Alice\nBob -&gt;&gt; Alice\nBob -\\ Alice\nBob \\\\- Alice\nBob //-- Alice\n\nBob -&gt;o Alice\nBob o\\\\-- Alice\n\nBob &lt;-&gt; Alice\nBob &lt;-&gt;o Alice\nBob -[#red]&gt; Alice : hello\nAlice -[#0000FF]-&gt;Bob : ok\n@enduml</code></pre><h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><p><img src=\"/imgs/idea/ex4.jpg\" alt=\"实例4\"></p>\n<pre><code>@startuml\n\nAlice -&gt; Bob : message 1\nAlice -&gt; Bob : message 2\n\nnewpage\n\nAlice -&gt; Bob : message 3\nAlice -&gt; Bob : message 4\n\nnewpage A title for the\\nlast page\n\nAlice -&gt; Bob : message 5\nAlice -&gt; Bob : message 6\n@enduml</code></pre><h2 id=\"分段\"><a href=\"#分段\" class=\"headerlink\" title=\"分段\"></a>分段</h2><p><img src=\"/imgs/idea/ex5.jpg\" alt=\"实例5\"></p>\n<pre><code>@startuml\n\n== Initialization ==\n\nAlice -&gt; Bob: Authentication Request\nBob --&gt; Alice: Authentication Response\n\n== Repetition ==\n\nAlice -&gt; Bob: Another authentication Request\nAlice &lt;-- Bob: another authentication Response\n\n@enduml</code></pre><h2 id=\"生命线\"><a href=\"#生命线\" class=\"headerlink\" title=\"生命线\"></a>生命线</h2><p><img src=\"/imgs/idea/ex6.jpg\" alt=\"实例6\"></p>\n<pre><code>@startuml\nparticipant User\n\nUser -&gt; A: DoWork\nactivate A #FFBBBB\n\nA -&gt; A: Internal call\nactivate A #DarkSalmon\n\nA -&gt; B: &lt;&lt; createRequest &gt;&gt;\nactivate B\n\nB --&gt; A: RequestCreated\ndeactivate B\ndeactivate A\nA -&gt; User: Done\ndeactivate A\n\n@enduml</code></pre><h2 id=\"图例注脚等\"><a href=\"#图例注脚等\" class=\"headerlink\" title=\"图例注脚等\"></a>图例注脚等</h2><p><img src=\"/imgs/idea/ex7.jpg\" alt=\"实例7\"></p>\n<pre><code>@startuml\n\nheader Page Header\nfooter Page %page% of %lastpage%\n\ntitle Example Title\n\nAlice -&gt; Bob : message 1\nnote left: this is a first note\n\nAlice -&gt; Bob : message 2\n\n@enduml</code></pre><h2 id=\"C4架构图\"><a href=\"#C4架构图\" class=\"headerlink\" title=\"C4架构图\"></a>C4架构图</h2><p><a href=\"https://www.infoq.cn/article/C4-architecture-model\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/C4-architecture-model</a></p>\n<p>博客转自： <a href=\"https://www.jianshu.com/p/30f6a9c06083\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/30f6a9c06083</a></p>\n"},{"title":"设计模式","id":"1420","date":"2020-04-06T13:00:00.000Z","_content":"\n## 面向对象六大原则\n\n### 指导思想\n\n+ 可维护性(Maintainability)\n\n  修改功能，需要改动地方越少，可维护性越好\n\n+ 可复用性(Reusability)\n\n  代码可以被重复使用，总结类库\n\n+ 可扩展性(Extensibility/Scalability)\n\n  添加功能无需修改原来代码\n\n+ 灵活性(Flexibility/Mobility/Adaptability)\n\n  代码接口可以灵活调用\n\n### 原则\n\n+ 单一职责原则\n\n  一个类别太大，别太累，负责单一职责，高内聚地耦合\n\n+ 开闭原则\n\n  对扩展开放，对修改关闭，尽量不修改原来代码进行扩展，抽象多态是开闭原则的关键\n\n+ 里氏替换\n\n  所有使用父类的地方，必须能够透明的使用子类对象（子类可以完全替代父类）\n\n+ 依赖倒置原则\n\n  面向接口（抽象）编程，而不是依赖具体\n\n+ 接口抽离原则\n\n  每一个接口承担独立的角色，避免子类实现不需要的方法，提供接口暴露只需最小接口（只暴露用到的接口）\n\n+ 迪米特法则\n\n  对于一个对象，不要和联系不大的对象耦合，尽量只用自己的东西，低耦合\n\n## 设计模式\n\n### 1.单例模式(Singleton)\n\n应用场景：只需要有一个实例存在\n\n创建方法：（前提：将构造方法定义为private，然后提供获取实例的方法）\n\n1. 饿汉式，定义个static的实例直接初始化。推荐使用。\n\n   ```java\n   private static final SingletonObj INSTANCE = new SingletonObj();\n   ```\n\n   线程安全，jvm保证，类加载时候就会实例化。\n\n2. 静态语句块初始化，和第一种一样\n\n   ```java\n   private static final SingletonObj INSTANCE;\n   static {\n       INSTANCE = new SingletonObj();\n   }\n   ```\n\n3. 懒汉式，用的时候才初始化\n\n   ```java\n   private static final SingletonObj INSTANCE;\n   public static SingletonObj getINSTANCE {\n       //并发时第一次可能new多个实例\n       if(INSTANCE == null){\n           INSTANCE = new SingletonObj();\n       }\n       return INSTANCE;\n   }\n   ```\n\n4. 针对3的并发问题，通过加synchronized加方法上控制并发\n\n   ```java\n   private static final SingletonObj INSTANCE;\n   //方法上加锁导致并发效率降低\n   public static synchronized SingletonObj getINSTANCE {\n       if(INSTANCE == null){\n           INSTANCE = new SingletonObj();\n       }\n       return INSTANCE;\n   }\n   ```\n\n5. 针对第4种效率问题，创建对象时加锁，双判断，很多人觉得是最完美写法。\n\n   ```java\n   //此处要加volatile保持可见性\n   private static final volatile SingletonObj INSTANCE;\n   public static synchronized SingletonObj getINSTANCE {\n       if(INSTANCE == null){\n           synchronized(XXX.class){\n               //此处如果不加判断，也会导致可能产生多个实例\n               if(INSTANCE == null){\n   \t\t\t\tINSTANCE = new SingletonObj();\n               }\n           }\n       }\n       return INSTANCE;\n   }\n   ```\n\n6. 静态内部类的方式，JVM保证线程安全，完美写法之一。\n\n   ```java\n   private static class SingletonObjHolder {\n       private final static SingletonObj INSTANCE = new SingletonObj();\n   }\n   public static SingletonObj getINSTANCE {\n       //调用时候静态内部类才会加载\n       return SingletonObjHolder.INSTANCE;\n   }\n   ```\n\n7. 通过枚举类，最完美写法（缺点是用枚举有点奇怪），线程安全，还可以防止反序列化（反射创建，枚举类没有构造方法）。\n\n   ```java\n   public enum SingletonObj{\n   \tINSTANCE; \n     \tpublic void method(){}\n   }\n   ```\n\n### 2.策略模式(Strategy)\n\n在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。在有多种算法相似的情况下，解决使用 if...else 所带来的复杂和难以维护。\n\n应用场景：比如分享功能，目前有微信和QQ，后续可能还会增加微博等等，此时只要定义不同的策略即可。\n\n```java\n//java的Comparetor就是策略模式，此处也用比较方法举例\n//创建一个比较器接口\npublic interface CustomerComparetor<T>{\n    int compareTo(T o1,T o2);\n}\n//自定义定义比较器实现比较器接口并重写方法\n//统一排序方法调用时传入对应的比较器\npublic class Utils<T>{\n    public void sort(T[] arr,CustomerComparetor<T> comparetor){\n        //遍历通过comparetor.compareTo方法进行排序\n    }\n}\n```\n\n### 3.工厂模式(Factory)\n\n定义：任何可以产生对象的方法或类，都可以称之为工厂，单例也是一种工厂\n\n1. 简单工厂，扩展性不好\n\n   ```java\n   public class SimpleFactory{\n       public Car createCar(){\n           return new Car();\n       }\n       public Plane createPlane(){\n           return Plane();\n       }\n   }\n   ```\n\n2. 工厂方法模式，分别创建工厂，单独分开，方便单一工厂扩展\n\n   ```java\n   public class CarFactory{\n       public Car create(){\n           return new Car();\n       }\n   }\n   public class PlaneFactory{\n       public Plane create(){\n           return new Car();\n       }\n   }\n   ```\n\n3. 抽象工厂，可以生产一系列的对象，对于一族的产品方便扩展，不方便单一扩展\n\n   ```java\n   //此处也可以用接口，可以根据语义选择使用，比如可以实现多个就用接口，只能属于一个类就抽象类\n   //抽象工厂\n   public abstract class AbstractFactory{\n       abstract AbstractCar createCar();\n       abstract AbstractPlane createPlane();\n   }\n   //抽象类\n   public abstract class AbstractCar{\n   }\n   //抽象类\n   public abstract class AbstractPlane{\n   }\n   //具体工厂\n   public class Factory{\n       AbstractCar createCar(){\n           return new RedCar();\n       }\n       AbstractPlane createPlane(){\n           return new BluePlane();\n       }\n   }\n   //具体类\n   public class RedCar extends AbstractCar{\n   }\n   //具体类\n   public class AbstractPlane extends AbstractCar {\n   }\n   //比如还可以建立一个工厂创建白色的Car和黄色的plane\n   ```\n\n### 4.门面模式(Facade)\n\n原本客户端是直接通过调用各个子系统的,通过门面模式,创建一个外观类,使得客户端直接调用外观类,来间接去操作相关子系统。\n\n### 5.调停者(Mediator)\n\n当各个系统互相各种调度，这时候可以抽出一个专门的系统，各个系统只跟这个系统调用。其实外部就是门面模式，内部就是调停者，应用场景消息中间件mq。\n\n### 6. 责任链(chain of responsibility)\n\n为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。filter就是用的责任链模式。\n\n```java\n//这里使用filter来模拟案例\npublic interface filter{\n    //返回boolean用来控制是否继续往下执行\n    boolean doFilter(Msg msg);\n}\n//定义消息对象\npublic class Msg{\n    private String msg;\n    //...get set\n}\n//定义两个Filter\npublic class Filter1 implements Filter{\n    public boolean doFilter(Msg msg){\n        msg.setMsg(msg.getMsg+\" Filter1 \");\n    }\n}\npublic class Filter2 implements Filter{\n    public boolean doFilter(Msg msg){\n        msg.setMsg(msg.getMsg+\" Filter2 \");\n    }\n}\n//定义责任链\npublic ChainFilter implements Filter{\n    List<Filter> list = new ArrayList<>();\n    public chainFilter addFilter(Filter filter){\n        list.add(filter);\n        return this;\n    }\n    public boolean doFilter(Msg msg){\n        for(Filter filter : list){\n            if(!filter.doFilter(msg)) return false;\n        }\n        return true;\n    }\n}\n//测试demo\npublic static void main(String[] args()){\n    ChainFilter chain = new ChainFilter();\n    //将filter加入到责任链\n    chain.add(new Filter1()).add(new Filter2());\n    //也可以将一个责任链作为一个整体filter加入\n    ChainFilter chain2 = new ChainFilter();\n    chain.add(new Filter1()).add(new Filter2()).add(chain);\n    chain2.doFilter(new Msg());\n}\n```\n\nspring中filterChain对request顺序和对response顺序是相反的，实现很巧妙，简化代码类似如下：\n\n```java\n//实现filter后需要重写此方法，传入三个参数\npublic class TextFilter implements Filter {\n    @Override\n    public void doFilter(Request request, Response response, FilterChain filterChain) {\n        //对request进行操作，通过递归，会一层层的先对request进行操作\n        //...\n        filterChain.doFilter(request, response, filterChain);\n        //对response进行操作，递归执行完request操作后会逆向对response进行操作\n        //...\n    }\n}\n```\n\n### 7.装饰器(Decorator)\n\n允许向一个现有的对象添加新的功能，同时又不改变其结构。一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。此时，将具体功能职责划分，同时继承装饰者模式。\n\n使用场景：将具体功能职责划分，同时继承装饰者模式。\n\n```java\n//创建一个接口\npublic interface Shape{\n    void draw();\n}\n//创建实体类\npublic class Circle implements Shape {\n   public void draw() {\n      System.out.println(\"Shape: Circle\");\n   }\n}\n//创建抽象装饰类\npublic abstract class ShapeDecorator implements Shape {\n   protected Shape decoratedShape;\n   public ShapeDecorator(Shape decoratedShape){\n      this.decoratedShape = decoratedShape;\n   }\n   public void draw(){\n      decoratedShape.draw();\n   }  \n}\n//创建装饰类\npublic class RedShapeDecorator extends ShapeDecorator {\n   public RedShapeDecorator(Shape decoratedShape) {\n      super(decoratedShape);     \n   }\n   @Override\n   public void draw() {\n      decoratedShape.draw();         \n      setRedBorder(decoratedShape);\n   }\n   private void setRedBorder(Shape decoratedShape){\n      System.out.println(\"Border Color: Red\");\n   }\n}\n//小程序demo\npublic class DecoratorPatternDemo {\n   public static void main(String[] args) {\n       //将对象传入，通过装饰器进行装饰\n      ShapeDecorator redCircle = new RedShapeDecorator(new Circle());\n      redCircle.draw();\n   }\n}\n```\n\n### 8. 观察者模式(Observer)\n\n当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。\n\nObserver,Listener,Hook,Callback 都是观察者模式。一般用作事件监听，消息队列。\n\n观察者模式与责任链模式很类似，责任链模式是将请求传递下去，观察者模式是对观察者进行广播。\n\n### 9.组合模式(Composite)\n\n组合模式依据树形结构来组合对象，用来表示部分以及整体层次。\n\n使用场景：树形菜单，文件、文件夹的管理\n\n```java\nabstract class Node {\n    abstract public void method();\n}\n//叶子节点\nclass LeafNode entends Node {\n    String content;\n    public LeafNode(String content){this.content = content}\n    public void method(){System.out.println(content)}\n}\n//分支节点\nclass BranchNode entends Node {\n    //当前子节点,可能是分支节点也可能是叶子节点\n    List<Node> nodes = new ArrayList<>();\n    String content;\n    public BranchNode(String content){\n        this.content = content;\n    }\n    public void method(){\n        System.out.println(content);\n    }\n    public void addNode(Node node){\n        nodes.add(node);\n    }\n}\n//构建树\npublic static void main(String[] args){\n    //根节点\n    BranchNode root = new BranchNode(\"root\");\n    //创建分支节点并添加到根节点\n    BranchNode branch1 = new BranchNode(\"branch1\");\n    BranchNode branch2= new BranchNode(\"branch2\");\n    root.addNode(branch1);\n    root.addNode(branch2);\n    //创建叶子节点加入到分支branch1\n    LeafNode leaf1 = new LeafNode(\"leaf1\");\n    LeafNode leaf2 = new LeafNode(\"leaf2\");\n    branch1.addNode(leaf1);\n    branch1.addNode(leaf2);\n    \n    //遍历树\n    tree(root,0);\n}\n//递归遍历,depth为深度\npublic static void tree(Node b,int depth){\n    for(int i=0;i<depth;i++){\n        System.out.print(\"---\");\n    }\n    b.method();\n    //如果是分支则遍历节点进行递归\n    if(b instanceof BranchNode){\n        for(Node node : ((BranchNode) b).nodes){\n            tree(node,depth+1);\n        }\n    }\n}\n```\n\n### 10.享元模式(flyWeight)\n\n主要用于减少创建对象的数量，以减少内存占用和提高性能。池化思想，将对象放到池里，需要时从池里拿。java的String就是享元模式。应用场景一般是线程池，连接池。\n\n### 11. 代理模式(Proxy)\n\n+ 静态代理： 直接创建一个代理类与被代理类实现同一个接口，在代理类中对同样方法进行操作\n\n+ 动态代理： 自动实现代理类，继承Proxy类，与被代理类实现同一接口\n\n  + jdk : 通过反射实现，继承Proxy类，与被代理类实现同一接口\n\n    ```java\n    //通过newProxyInstance生成代理类，指定classLoader，代理类实现的接口列表和对应的执行handler\n    Proxy proxy = (Proxy) Proxy.newProxyInstance(classLoader, interfaces, handler);\n    ```\n\n  + cglib：需要添加引入jar，通过继承被代理类实现，不需要实现接口，所以类是final的无法使用(ASM可以，因为直接修改字节码文件)\n\n    ```java\n    //创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数\n    Enhancer enhancer = new Enhancer();\n    //设置目标类的字节码文件\n    enhancer.setSuperclass(Dog.class);\n    //设置回调函数，相当于jdk动态代理的handler\n    enhancer.setCallback(new MyMethodInterceptor());\n    //这里的creat方法就是正式创建代理类\n    Proxy proxy = (Dog)enhancer.create();\n    ```\n\n  + Instrument：在JDK5引入的，在class被加载时可以直接修改二进制文件\n\n### 12.迭代器模式(Iterator)\n\n用于容器的遍历\n\n```java\n//定义一个迭代器接口，要求每个容器都实现这个接口，实现通用遍历\n//对于泛型的E T随便定义，只是E通常代表element，T代表type\npublic interface Iterator<E> {\n    //是否有下一个\n    boolean hasNext();\n    //获取下一个\n    E next();\n}\n```\n\n### 13.访问者模式(Visitor)\n\n在结构不变的情况下动态改变对于内部元素的动作，通过这种方式，元素的执行算法可以随着访问者改变而改变。代码耦合度很高。使用场景：1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作\"污染\"这些对象的类，也不希望在增加新操作时修改这些类。java的ASM是通过visitor实现的。\n\n```java\n//定义一个表示元素的接口\npublic interface ComputerPart{\n    void accept(ComputerPartVistor vistor);\n}\n//创建元素实体类\npublic class Keyboard implements ComputerPart{\n    public void accept(ComputerPartVisitor vistor){\n        vistor.visit(this);\n    }\n}\npublic class Monitor implements ComputerPart{\n    public void accept(ComputerPartVisitor vistor){\n        vistor.visit(this);\n    }\n}\n//创建一个访问者接口\npublic interface ComputerPartVistor{\n    public void visit(Keyboard keyboard);\n    public void visit(Monitor monitor);\n}\n//创建实体访问者\npublic class ComputerPartDisplayVistor implements ComputerPartVistor{\n    public void visit(Keyboard keyboard){\n        System.out.println(\"Displaying Keyboard.\");\n    }\n    public void visit(Monitor monitor){\n        System.out.println(\"Displaying monitor.\");\n    }\n}\n//测试Demo，相当于执行的方法调用了传入对象的相关方法\npublic class VisitorPatternDemo {\n   public static void main(String[] args) {\n      Monitor monitor = new Monitor();\n      monitor.accept(new ComputerPartDisplayVisitor());\n   }\n}\n```\n\n### 14.构建器模式(Builder)\n\n分离复杂对象的构建和表示\n\n```java\n//当一个对象很大的时候可以分别构建\npublic class Person{\n    private String name;\n    private String age;\n    private String sex;\n    //..省略\n}\npublic class PersonBuild {\n    Person person = new Person();\n    public Person buildName(String name){\n        person.name = name;\n        //链式编程\n        return this;\n    }\n    public Person buildAge(String age){\n        person.age = age;\n        return this;\n    }\n    public Person buildSex(String sex){\n        person.sex = sex;\n        return this;\n    }\n    public Person build(){\n        return person;\n    }\n}\npublic static void main(String[] args){\n    PersonBuild build = new PersonBuild();\n    //可以灵活地构建对象的部分\n  \tperson person = build.buildName(\"zhangsan\").buildAge(\"20\").buildSex(\"男\").build();\n}\n```\n\n### 15.适配器模式(Adapter)\n\n作为两个不兼容的接口之间的桥梁。可以联想电源适配器，转接头\n\n将一个类的接口转换成另外一个希望的接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n\n```java\npublic class MediaAdapter implements MediaPlayer {\n   //播放器接口，有两个实现vlc播放器和mp4播放器\n   AdvancedMediaPlayer advancedMusicPlayer;\n    //根据类型构建不同的播放器\n   public MediaAdapter(String audioType){\n      if(audioType.equalsIgnoreCase(\"vlc\") ){\n         advancedMusicPlayer = new VlcPlayer();       \n      } else if (audioType.equalsIgnoreCase(\"mp4\")){\n         advancedMusicPlayer = new Mp4Player();\n      }  \n   }\n   //根据类型调用不同播放器的方法\n   @Override\n   public void play(String audioType, String fileName) {\n      if(audioType.equalsIgnoreCase(\"vlc\")){\n         advancedMusicPlayer.playVlc(fileName);\n      }else if(audioType.equalsIgnoreCase(\"mp4\")){\n         advancedMusicPlayer.playMp4(fileName);\n      }\n   }\n}\n```\n\n### 16.桥接模式(Bridge)\n\n将抽象部分和实现部分分离，使他们可以独立的变化。\n\n```java\n//创建桥接接口\npublic interface DrawAPI{\n    public void drawCircle();\n}\n//创建桥接实现类\npublic class RedCircle implements DrawAPI{\n    public void drawCircle(){\n        System.out.println(\"Red circle\");\n    }\n}\npublic class GreenCircle implements DrawAPI{\n    public void drawCircle(){\n        System.out.println(\"Green circle\");\n    }\n}\n//使用接口创建抽象类Shape\npublic abstract class Shape{\n    //抽象类中注入接口的实现类，可以直接调用对应实现类的方法\n    DrawAPI drawAPI;\n    Shape(DrawAPI drawAPI){\n        this.drawAPI = drawAPI;\n    }\n    public abstract void draw();\n}\n//创建实现类\npublic class Circle extends Shape {\n    public Circle(DrawAPI drawAPI){\n        super(drawAPI)\n    }\n    public void draw(){\n        drawAPI.drawCircle();\n    }\n}\n```\n\n### 17.命令模式(Command)\n\n封装命令\n\n```java\npublic abstract class Command {\n    //执行方法\n    public abstract void exec();\n    //回退方法\n    public abstract void undo();\n}\n//增加方法\npublic class AddCommand {\n    public void exec(){\n        System.out.println(\"加1\");\n    }\n\tpublic void undo(){\n       System.out.println(\"减1\"); \n    }\n}\n//可以结合组合模式实现宏命令(一系列串起来的命令)\n//可以结合责任链模式做多次的undo\n//可以结合记忆模式实现事务回滚\n```\n\n### 18.原型模式(Prototype)\n\njdk自带，实现cloneable接口，一般重写clone方法，jdk自带的clone方法克隆对象的引用类型还是指向的同一个地址(浅拷贝)，重写clone方法使引用也克隆叫做深拷贝，属性也可以实现clone方法执行clone。\n\nString类型不需要深拷贝，修改String是指向常量池中新的对象。但是如果用StringBuffer创建的就需要深拷贝。\n\n### 19.备忘录模式(Memento)\n\n备忘录模式提供的基本功能是：保存对象状态信息(快照)、撤销、重做和历史记录。 \n备忘录模式一般会提供两种接口：宽接口和窄接口。通过宽接口可以获取整个对象状态，会暴露备忘录对象的内部信息。通过窄接口，只能访问有限的，开发者限制了的信息，可以有效的防止信息泄露。\n\n```java\n//一般需要存盘，要实现序列化\npublic class Memento implements Serializable {  \n    \n    private int money;\n    private int level;\n \n    //窄接口，访问部分信息\n    public int getMenoy(){\n        return menoy;\n    }\n    //窄接口，访问部分信息\n    public int getLevel(){\n        return level;\n    }\n    \n    //宽接口，本包之内皆可访问\n    Memento(int menoy,int level){\n        //记录金钱和等级，可通过get获取值\n\t\tthis.menoy = menoy;\n        this.level = level;\n    }\n}\n```\n\n### 20.模板方法(TemplateMethod)\n\n模板方法就是钩子函数，回调函数\n\n```java\npublic class Main{\n    public static void main(String[] args){\n        F f = new C();\n        f.m();\n    }\n}\nabstract class F {\n    public void m(){\n        op1();\n        op2();\n    }\n    abstract void op1();\n    abstract void op2();\n}\nclass C extends F {\n    void op1(){\n        System.out.println(\"1\");\n    }\n    void op2(){\n        System.out.println(\"2\");\n    }\n}\n```\n\n### 21.状态模式(State)\n\n一个类的动作根据状态不动有不同的类型反应\n\n```java\npublic abstract class MMState {\n\tabstract void smile();\n    abstract void cry();\n}\npublic class HappyState extends MMState {\n    void smile(){\n        System.out.println(\"happy smile\");\n    }\n     void cry(){\n        System.out.println(\"happy cry\");\n    }\n}\npublic class SadState extends MMState {\n    void smile(){\n        System.out.println(\"sad smile\");\n    }\n     void cry(){\n        System.out.println(\"sad cry\");\n    }\n}\npublic class MM{\n    String name;\n    //根据不同的状态调用不同实现\n    MMState state;\n    \n    public void smile(){\n        state.smile();\n    }\n}\n```\n\n### 22.解释器(Intepreter)\n\n动态脚本解析，比如写一个正则表达式解析器，python解析器，解析一门语言。\n\n","source":"_posts/设计模式.md","raw":"---\ntitle: \"设计模式\"\ntags:\n  - java\nid: 1420\ncategories:\n  - java\ndate: 2020-4-6 21:00:00\n---\n\n## 面向对象六大原则\n\n### 指导思想\n\n+ 可维护性(Maintainability)\n\n  修改功能，需要改动地方越少，可维护性越好\n\n+ 可复用性(Reusability)\n\n  代码可以被重复使用，总结类库\n\n+ 可扩展性(Extensibility/Scalability)\n\n  添加功能无需修改原来代码\n\n+ 灵活性(Flexibility/Mobility/Adaptability)\n\n  代码接口可以灵活调用\n\n### 原则\n\n+ 单一职责原则\n\n  一个类别太大，别太累，负责单一职责，高内聚地耦合\n\n+ 开闭原则\n\n  对扩展开放，对修改关闭，尽量不修改原来代码进行扩展，抽象多态是开闭原则的关键\n\n+ 里氏替换\n\n  所有使用父类的地方，必须能够透明的使用子类对象（子类可以完全替代父类）\n\n+ 依赖倒置原则\n\n  面向接口（抽象）编程，而不是依赖具体\n\n+ 接口抽离原则\n\n  每一个接口承担独立的角色，避免子类实现不需要的方法，提供接口暴露只需最小接口（只暴露用到的接口）\n\n+ 迪米特法则\n\n  对于一个对象，不要和联系不大的对象耦合，尽量只用自己的东西，低耦合\n\n## 设计模式\n\n### 1.单例模式(Singleton)\n\n应用场景：只需要有一个实例存在\n\n创建方法：（前提：将构造方法定义为private，然后提供获取实例的方法）\n\n1. 饿汉式，定义个static的实例直接初始化。推荐使用。\n\n   ```java\n   private static final SingletonObj INSTANCE = new SingletonObj();\n   ```\n\n   线程安全，jvm保证，类加载时候就会实例化。\n\n2. 静态语句块初始化，和第一种一样\n\n   ```java\n   private static final SingletonObj INSTANCE;\n   static {\n       INSTANCE = new SingletonObj();\n   }\n   ```\n\n3. 懒汉式，用的时候才初始化\n\n   ```java\n   private static final SingletonObj INSTANCE;\n   public static SingletonObj getINSTANCE {\n       //并发时第一次可能new多个实例\n       if(INSTANCE == null){\n           INSTANCE = new SingletonObj();\n       }\n       return INSTANCE;\n   }\n   ```\n\n4. 针对3的并发问题，通过加synchronized加方法上控制并发\n\n   ```java\n   private static final SingletonObj INSTANCE;\n   //方法上加锁导致并发效率降低\n   public static synchronized SingletonObj getINSTANCE {\n       if(INSTANCE == null){\n           INSTANCE = new SingletonObj();\n       }\n       return INSTANCE;\n   }\n   ```\n\n5. 针对第4种效率问题，创建对象时加锁，双判断，很多人觉得是最完美写法。\n\n   ```java\n   //此处要加volatile保持可见性\n   private static final volatile SingletonObj INSTANCE;\n   public static synchronized SingletonObj getINSTANCE {\n       if(INSTANCE == null){\n           synchronized(XXX.class){\n               //此处如果不加判断，也会导致可能产生多个实例\n               if(INSTANCE == null){\n   \t\t\t\tINSTANCE = new SingletonObj();\n               }\n           }\n       }\n       return INSTANCE;\n   }\n   ```\n\n6. 静态内部类的方式，JVM保证线程安全，完美写法之一。\n\n   ```java\n   private static class SingletonObjHolder {\n       private final static SingletonObj INSTANCE = new SingletonObj();\n   }\n   public static SingletonObj getINSTANCE {\n       //调用时候静态内部类才会加载\n       return SingletonObjHolder.INSTANCE;\n   }\n   ```\n\n7. 通过枚举类，最完美写法（缺点是用枚举有点奇怪），线程安全，还可以防止反序列化（反射创建，枚举类没有构造方法）。\n\n   ```java\n   public enum SingletonObj{\n   \tINSTANCE; \n     \tpublic void method(){}\n   }\n   ```\n\n### 2.策略模式(Strategy)\n\n在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。在有多种算法相似的情况下，解决使用 if...else 所带来的复杂和难以维护。\n\n应用场景：比如分享功能，目前有微信和QQ，后续可能还会增加微博等等，此时只要定义不同的策略即可。\n\n```java\n//java的Comparetor就是策略模式，此处也用比较方法举例\n//创建一个比较器接口\npublic interface CustomerComparetor<T>{\n    int compareTo(T o1,T o2);\n}\n//自定义定义比较器实现比较器接口并重写方法\n//统一排序方法调用时传入对应的比较器\npublic class Utils<T>{\n    public void sort(T[] arr,CustomerComparetor<T> comparetor){\n        //遍历通过comparetor.compareTo方法进行排序\n    }\n}\n```\n\n### 3.工厂模式(Factory)\n\n定义：任何可以产生对象的方法或类，都可以称之为工厂，单例也是一种工厂\n\n1. 简单工厂，扩展性不好\n\n   ```java\n   public class SimpleFactory{\n       public Car createCar(){\n           return new Car();\n       }\n       public Plane createPlane(){\n           return Plane();\n       }\n   }\n   ```\n\n2. 工厂方法模式，分别创建工厂，单独分开，方便单一工厂扩展\n\n   ```java\n   public class CarFactory{\n       public Car create(){\n           return new Car();\n       }\n   }\n   public class PlaneFactory{\n       public Plane create(){\n           return new Car();\n       }\n   }\n   ```\n\n3. 抽象工厂，可以生产一系列的对象，对于一族的产品方便扩展，不方便单一扩展\n\n   ```java\n   //此处也可以用接口，可以根据语义选择使用，比如可以实现多个就用接口，只能属于一个类就抽象类\n   //抽象工厂\n   public abstract class AbstractFactory{\n       abstract AbstractCar createCar();\n       abstract AbstractPlane createPlane();\n   }\n   //抽象类\n   public abstract class AbstractCar{\n   }\n   //抽象类\n   public abstract class AbstractPlane{\n   }\n   //具体工厂\n   public class Factory{\n       AbstractCar createCar(){\n           return new RedCar();\n       }\n       AbstractPlane createPlane(){\n           return new BluePlane();\n       }\n   }\n   //具体类\n   public class RedCar extends AbstractCar{\n   }\n   //具体类\n   public class AbstractPlane extends AbstractCar {\n   }\n   //比如还可以建立一个工厂创建白色的Car和黄色的plane\n   ```\n\n### 4.门面模式(Facade)\n\n原本客户端是直接通过调用各个子系统的,通过门面模式,创建一个外观类,使得客户端直接调用外观类,来间接去操作相关子系统。\n\n### 5.调停者(Mediator)\n\n当各个系统互相各种调度，这时候可以抽出一个专门的系统，各个系统只跟这个系统调用。其实外部就是门面模式，内部就是调停者，应用场景消息中间件mq。\n\n### 6. 责任链(chain of responsibility)\n\n为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。filter就是用的责任链模式。\n\n```java\n//这里使用filter来模拟案例\npublic interface filter{\n    //返回boolean用来控制是否继续往下执行\n    boolean doFilter(Msg msg);\n}\n//定义消息对象\npublic class Msg{\n    private String msg;\n    //...get set\n}\n//定义两个Filter\npublic class Filter1 implements Filter{\n    public boolean doFilter(Msg msg){\n        msg.setMsg(msg.getMsg+\" Filter1 \");\n    }\n}\npublic class Filter2 implements Filter{\n    public boolean doFilter(Msg msg){\n        msg.setMsg(msg.getMsg+\" Filter2 \");\n    }\n}\n//定义责任链\npublic ChainFilter implements Filter{\n    List<Filter> list = new ArrayList<>();\n    public chainFilter addFilter(Filter filter){\n        list.add(filter);\n        return this;\n    }\n    public boolean doFilter(Msg msg){\n        for(Filter filter : list){\n            if(!filter.doFilter(msg)) return false;\n        }\n        return true;\n    }\n}\n//测试demo\npublic static void main(String[] args()){\n    ChainFilter chain = new ChainFilter();\n    //将filter加入到责任链\n    chain.add(new Filter1()).add(new Filter2());\n    //也可以将一个责任链作为一个整体filter加入\n    ChainFilter chain2 = new ChainFilter();\n    chain.add(new Filter1()).add(new Filter2()).add(chain);\n    chain2.doFilter(new Msg());\n}\n```\n\nspring中filterChain对request顺序和对response顺序是相反的，实现很巧妙，简化代码类似如下：\n\n```java\n//实现filter后需要重写此方法，传入三个参数\npublic class TextFilter implements Filter {\n    @Override\n    public void doFilter(Request request, Response response, FilterChain filterChain) {\n        //对request进行操作，通过递归，会一层层的先对request进行操作\n        //...\n        filterChain.doFilter(request, response, filterChain);\n        //对response进行操作，递归执行完request操作后会逆向对response进行操作\n        //...\n    }\n}\n```\n\n### 7.装饰器(Decorator)\n\n允许向一个现有的对象添加新的功能，同时又不改变其结构。一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。此时，将具体功能职责划分，同时继承装饰者模式。\n\n使用场景：将具体功能职责划分，同时继承装饰者模式。\n\n```java\n//创建一个接口\npublic interface Shape{\n    void draw();\n}\n//创建实体类\npublic class Circle implements Shape {\n   public void draw() {\n      System.out.println(\"Shape: Circle\");\n   }\n}\n//创建抽象装饰类\npublic abstract class ShapeDecorator implements Shape {\n   protected Shape decoratedShape;\n   public ShapeDecorator(Shape decoratedShape){\n      this.decoratedShape = decoratedShape;\n   }\n   public void draw(){\n      decoratedShape.draw();\n   }  \n}\n//创建装饰类\npublic class RedShapeDecorator extends ShapeDecorator {\n   public RedShapeDecorator(Shape decoratedShape) {\n      super(decoratedShape);     \n   }\n   @Override\n   public void draw() {\n      decoratedShape.draw();         \n      setRedBorder(decoratedShape);\n   }\n   private void setRedBorder(Shape decoratedShape){\n      System.out.println(\"Border Color: Red\");\n   }\n}\n//小程序demo\npublic class DecoratorPatternDemo {\n   public static void main(String[] args) {\n       //将对象传入，通过装饰器进行装饰\n      ShapeDecorator redCircle = new RedShapeDecorator(new Circle());\n      redCircle.draw();\n   }\n}\n```\n\n### 8. 观察者模式(Observer)\n\n当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。\n\nObserver,Listener,Hook,Callback 都是观察者模式。一般用作事件监听，消息队列。\n\n观察者模式与责任链模式很类似，责任链模式是将请求传递下去，观察者模式是对观察者进行广播。\n\n### 9.组合模式(Composite)\n\n组合模式依据树形结构来组合对象，用来表示部分以及整体层次。\n\n使用场景：树形菜单，文件、文件夹的管理\n\n```java\nabstract class Node {\n    abstract public void method();\n}\n//叶子节点\nclass LeafNode entends Node {\n    String content;\n    public LeafNode(String content){this.content = content}\n    public void method(){System.out.println(content)}\n}\n//分支节点\nclass BranchNode entends Node {\n    //当前子节点,可能是分支节点也可能是叶子节点\n    List<Node> nodes = new ArrayList<>();\n    String content;\n    public BranchNode(String content){\n        this.content = content;\n    }\n    public void method(){\n        System.out.println(content);\n    }\n    public void addNode(Node node){\n        nodes.add(node);\n    }\n}\n//构建树\npublic static void main(String[] args){\n    //根节点\n    BranchNode root = new BranchNode(\"root\");\n    //创建分支节点并添加到根节点\n    BranchNode branch1 = new BranchNode(\"branch1\");\n    BranchNode branch2= new BranchNode(\"branch2\");\n    root.addNode(branch1);\n    root.addNode(branch2);\n    //创建叶子节点加入到分支branch1\n    LeafNode leaf1 = new LeafNode(\"leaf1\");\n    LeafNode leaf2 = new LeafNode(\"leaf2\");\n    branch1.addNode(leaf1);\n    branch1.addNode(leaf2);\n    \n    //遍历树\n    tree(root,0);\n}\n//递归遍历,depth为深度\npublic static void tree(Node b,int depth){\n    for(int i=0;i<depth;i++){\n        System.out.print(\"---\");\n    }\n    b.method();\n    //如果是分支则遍历节点进行递归\n    if(b instanceof BranchNode){\n        for(Node node : ((BranchNode) b).nodes){\n            tree(node,depth+1);\n        }\n    }\n}\n```\n\n### 10.享元模式(flyWeight)\n\n主要用于减少创建对象的数量，以减少内存占用和提高性能。池化思想，将对象放到池里，需要时从池里拿。java的String就是享元模式。应用场景一般是线程池，连接池。\n\n### 11. 代理模式(Proxy)\n\n+ 静态代理： 直接创建一个代理类与被代理类实现同一个接口，在代理类中对同样方法进行操作\n\n+ 动态代理： 自动实现代理类，继承Proxy类，与被代理类实现同一接口\n\n  + jdk : 通过反射实现，继承Proxy类，与被代理类实现同一接口\n\n    ```java\n    //通过newProxyInstance生成代理类，指定classLoader，代理类实现的接口列表和对应的执行handler\n    Proxy proxy = (Proxy) Proxy.newProxyInstance(classLoader, interfaces, handler);\n    ```\n\n  + cglib：需要添加引入jar，通过继承被代理类实现，不需要实现接口，所以类是final的无法使用(ASM可以，因为直接修改字节码文件)\n\n    ```java\n    //创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数\n    Enhancer enhancer = new Enhancer();\n    //设置目标类的字节码文件\n    enhancer.setSuperclass(Dog.class);\n    //设置回调函数，相当于jdk动态代理的handler\n    enhancer.setCallback(new MyMethodInterceptor());\n    //这里的creat方法就是正式创建代理类\n    Proxy proxy = (Dog)enhancer.create();\n    ```\n\n  + Instrument：在JDK5引入的，在class被加载时可以直接修改二进制文件\n\n### 12.迭代器模式(Iterator)\n\n用于容器的遍历\n\n```java\n//定义一个迭代器接口，要求每个容器都实现这个接口，实现通用遍历\n//对于泛型的E T随便定义，只是E通常代表element，T代表type\npublic interface Iterator<E> {\n    //是否有下一个\n    boolean hasNext();\n    //获取下一个\n    E next();\n}\n```\n\n### 13.访问者模式(Visitor)\n\n在结构不变的情况下动态改变对于内部元素的动作，通过这种方式，元素的执行算法可以随着访问者改变而改变。代码耦合度很高。使用场景：1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作\"污染\"这些对象的类，也不希望在增加新操作时修改这些类。java的ASM是通过visitor实现的。\n\n```java\n//定义一个表示元素的接口\npublic interface ComputerPart{\n    void accept(ComputerPartVistor vistor);\n}\n//创建元素实体类\npublic class Keyboard implements ComputerPart{\n    public void accept(ComputerPartVisitor vistor){\n        vistor.visit(this);\n    }\n}\npublic class Monitor implements ComputerPart{\n    public void accept(ComputerPartVisitor vistor){\n        vistor.visit(this);\n    }\n}\n//创建一个访问者接口\npublic interface ComputerPartVistor{\n    public void visit(Keyboard keyboard);\n    public void visit(Monitor monitor);\n}\n//创建实体访问者\npublic class ComputerPartDisplayVistor implements ComputerPartVistor{\n    public void visit(Keyboard keyboard){\n        System.out.println(\"Displaying Keyboard.\");\n    }\n    public void visit(Monitor monitor){\n        System.out.println(\"Displaying monitor.\");\n    }\n}\n//测试Demo，相当于执行的方法调用了传入对象的相关方法\npublic class VisitorPatternDemo {\n   public static void main(String[] args) {\n      Monitor monitor = new Monitor();\n      monitor.accept(new ComputerPartDisplayVisitor());\n   }\n}\n```\n\n### 14.构建器模式(Builder)\n\n分离复杂对象的构建和表示\n\n```java\n//当一个对象很大的时候可以分别构建\npublic class Person{\n    private String name;\n    private String age;\n    private String sex;\n    //..省略\n}\npublic class PersonBuild {\n    Person person = new Person();\n    public Person buildName(String name){\n        person.name = name;\n        //链式编程\n        return this;\n    }\n    public Person buildAge(String age){\n        person.age = age;\n        return this;\n    }\n    public Person buildSex(String sex){\n        person.sex = sex;\n        return this;\n    }\n    public Person build(){\n        return person;\n    }\n}\npublic static void main(String[] args){\n    PersonBuild build = new PersonBuild();\n    //可以灵活地构建对象的部分\n  \tperson person = build.buildName(\"zhangsan\").buildAge(\"20\").buildSex(\"男\").build();\n}\n```\n\n### 15.适配器模式(Adapter)\n\n作为两个不兼容的接口之间的桥梁。可以联想电源适配器，转接头\n\n将一个类的接口转换成另外一个希望的接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n\n```java\npublic class MediaAdapter implements MediaPlayer {\n   //播放器接口，有两个实现vlc播放器和mp4播放器\n   AdvancedMediaPlayer advancedMusicPlayer;\n    //根据类型构建不同的播放器\n   public MediaAdapter(String audioType){\n      if(audioType.equalsIgnoreCase(\"vlc\") ){\n         advancedMusicPlayer = new VlcPlayer();       \n      } else if (audioType.equalsIgnoreCase(\"mp4\")){\n         advancedMusicPlayer = new Mp4Player();\n      }  \n   }\n   //根据类型调用不同播放器的方法\n   @Override\n   public void play(String audioType, String fileName) {\n      if(audioType.equalsIgnoreCase(\"vlc\")){\n         advancedMusicPlayer.playVlc(fileName);\n      }else if(audioType.equalsIgnoreCase(\"mp4\")){\n         advancedMusicPlayer.playMp4(fileName);\n      }\n   }\n}\n```\n\n### 16.桥接模式(Bridge)\n\n将抽象部分和实现部分分离，使他们可以独立的变化。\n\n```java\n//创建桥接接口\npublic interface DrawAPI{\n    public void drawCircle();\n}\n//创建桥接实现类\npublic class RedCircle implements DrawAPI{\n    public void drawCircle(){\n        System.out.println(\"Red circle\");\n    }\n}\npublic class GreenCircle implements DrawAPI{\n    public void drawCircle(){\n        System.out.println(\"Green circle\");\n    }\n}\n//使用接口创建抽象类Shape\npublic abstract class Shape{\n    //抽象类中注入接口的实现类，可以直接调用对应实现类的方法\n    DrawAPI drawAPI;\n    Shape(DrawAPI drawAPI){\n        this.drawAPI = drawAPI;\n    }\n    public abstract void draw();\n}\n//创建实现类\npublic class Circle extends Shape {\n    public Circle(DrawAPI drawAPI){\n        super(drawAPI)\n    }\n    public void draw(){\n        drawAPI.drawCircle();\n    }\n}\n```\n\n### 17.命令模式(Command)\n\n封装命令\n\n```java\npublic abstract class Command {\n    //执行方法\n    public abstract void exec();\n    //回退方法\n    public abstract void undo();\n}\n//增加方法\npublic class AddCommand {\n    public void exec(){\n        System.out.println(\"加1\");\n    }\n\tpublic void undo(){\n       System.out.println(\"减1\"); \n    }\n}\n//可以结合组合模式实现宏命令(一系列串起来的命令)\n//可以结合责任链模式做多次的undo\n//可以结合记忆模式实现事务回滚\n```\n\n### 18.原型模式(Prototype)\n\njdk自带，实现cloneable接口，一般重写clone方法，jdk自带的clone方法克隆对象的引用类型还是指向的同一个地址(浅拷贝)，重写clone方法使引用也克隆叫做深拷贝，属性也可以实现clone方法执行clone。\n\nString类型不需要深拷贝，修改String是指向常量池中新的对象。但是如果用StringBuffer创建的就需要深拷贝。\n\n### 19.备忘录模式(Memento)\n\n备忘录模式提供的基本功能是：保存对象状态信息(快照)、撤销、重做和历史记录。 \n备忘录模式一般会提供两种接口：宽接口和窄接口。通过宽接口可以获取整个对象状态，会暴露备忘录对象的内部信息。通过窄接口，只能访问有限的，开发者限制了的信息，可以有效的防止信息泄露。\n\n```java\n//一般需要存盘，要实现序列化\npublic class Memento implements Serializable {  \n    \n    private int money;\n    private int level;\n \n    //窄接口，访问部分信息\n    public int getMenoy(){\n        return menoy;\n    }\n    //窄接口，访问部分信息\n    public int getLevel(){\n        return level;\n    }\n    \n    //宽接口，本包之内皆可访问\n    Memento(int menoy,int level){\n        //记录金钱和等级，可通过get获取值\n\t\tthis.menoy = menoy;\n        this.level = level;\n    }\n}\n```\n\n### 20.模板方法(TemplateMethod)\n\n模板方法就是钩子函数，回调函数\n\n```java\npublic class Main{\n    public static void main(String[] args){\n        F f = new C();\n        f.m();\n    }\n}\nabstract class F {\n    public void m(){\n        op1();\n        op2();\n    }\n    abstract void op1();\n    abstract void op2();\n}\nclass C extends F {\n    void op1(){\n        System.out.println(\"1\");\n    }\n    void op2(){\n        System.out.println(\"2\");\n    }\n}\n```\n\n### 21.状态模式(State)\n\n一个类的动作根据状态不动有不同的类型反应\n\n```java\npublic abstract class MMState {\n\tabstract void smile();\n    abstract void cry();\n}\npublic class HappyState extends MMState {\n    void smile(){\n        System.out.println(\"happy smile\");\n    }\n     void cry(){\n        System.out.println(\"happy cry\");\n    }\n}\npublic class SadState extends MMState {\n    void smile(){\n        System.out.println(\"sad smile\");\n    }\n     void cry(){\n        System.out.println(\"sad cry\");\n    }\n}\npublic class MM{\n    String name;\n    //根据不同的状态调用不同实现\n    MMState state;\n    \n    public void smile(){\n        state.smile();\n    }\n}\n```\n\n### 22.解释器(Intepreter)\n\n动态脚本解析，比如写一个正则表达式解析器，python解析器，解析一门语言。\n\n","slug":"设计模式","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7vg002bv8gpgqfa0p5o","content":"<h2 id=\"面向对象六大原则\"><a href=\"#面向对象六大原则\" class=\"headerlink\" title=\"面向对象六大原则\"></a>面向对象六大原则</h2><h3 id=\"指导思想\"><a href=\"#指导思想\" class=\"headerlink\" title=\"指导思想\"></a>指导思想</h3><ul>\n<li><p>可维护性(Maintainability)</p>\n<p>修改功能，需要改动地方越少，可维护性越好</p>\n</li>\n<li><p>可复用性(Reusability)</p>\n<p>代码可以被重复使用，总结类库</p>\n</li>\n<li><p>可扩展性(Extensibility/Scalability)</p>\n<p>添加功能无需修改原来代码</p>\n</li>\n<li><p>灵活性(Flexibility/Mobility/Adaptability)</p>\n<p>代码接口可以灵活调用</p>\n</li>\n</ul>\n<h3 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h3><ul>\n<li><p>单一职责原则</p>\n<p>一个类别太大，别太累，负责单一职责，高内聚地耦合</p>\n</li>\n<li><p>开闭原则</p>\n<p>对扩展开放，对修改关闭，尽量不修改原来代码进行扩展，抽象多态是开闭原则的关键</p>\n</li>\n<li><p>里氏替换</p>\n<p>所有使用父类的地方，必须能够透明的使用子类对象（子类可以完全替代父类）</p>\n</li>\n<li><p>依赖倒置原则</p>\n<p>面向接口（抽象）编程，而不是依赖具体</p>\n</li>\n<li><p>接口抽离原则</p>\n<p>每一个接口承担独立的角色，避免子类实现不需要的方法，提供接口暴露只需最小接口（只暴露用到的接口）</p>\n</li>\n<li><p>迪米特法则</p>\n<p>对于一个对象，不要和联系不大的对象耦合，尽量只用自己的东西，低耦合</p>\n</li>\n</ul>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><h3 id=\"1-单例模式-Singleton\"><a href=\"#1-单例模式-Singleton\" class=\"headerlink\" title=\"1.单例模式(Singleton)\"></a>1.单例模式(Singleton)</h3><p>应用场景：只需要有一个实例存在</p>\n<p>创建方法：（前提：将构造方法定义为private，然后提供获取实例的方法）</p>\n<ol>\n<li><p>饿汉式，定义个static的实例直接初始化。推荐使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonObj INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br></pre></td></tr></table></figure>\n\n<p>线程安全，jvm保证，类加载时候就会实例化。</p>\n</li>\n<li><p>静态语句块初始化，和第一种一样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonObj INSTANCE;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>懒汉式，用的时候才初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonObj INSTANCE;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonObj getINSTANCE &#123;</span><br><span class=\"line\">    <span class=\"comment\">//并发时第一次可能new多个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对3的并发问题，通过加synchronized加方法上控制并发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonObj INSTANCE;</span><br><span class=\"line\"><span class=\"comment\">//方法上加锁导致并发效率降低</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> SingletonObj getINSTANCE &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对第4种效率问题，创建对象时加锁，双判断，很多人觉得是最完美写法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此处要加volatile保持可见性</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">volatile</span> SingletonObj INSTANCE;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> SingletonObj getINSTANCE &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(XXX<span class=\"class\">.<span class=\"keyword\">class</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//此处如果不加判断，也会导致可能产生多个实例</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\tINSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>静态内部类的方式，JVM保证线程安全，完美写法之一。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonObjHolder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> SingletonObj INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonObj getINSTANCE &#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用时候静态内部类才会加载</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SingletonObjHolder.INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过枚举类，最完美写法（缺点是用枚举有点奇怪），线程安全，还可以防止反序列化（反射创建，枚举类没有构造方法）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> SingletonObj&#123;</span><br><span class=\"line\">\tINSTANCE; </span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"2-策略模式-Strategy\"><a href=\"#2-策略模式-Strategy\" class=\"headerlink\" title=\"2.策略模式(Strategy)\"></a>2.策略模式(Strategy)</h3><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。在有多种算法相似的情况下，解决使用 if…else 所带来的复杂和难以维护。</p>\n<p>应用场景：比如分享功能，目前有微信和QQ，后续可能还会增加微博等等，此时只要定义不同的策略即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java的Comparetor就是策略模式，此处也用比较方法举例</span></span><br><span class=\"line\"><span class=\"comment\">//创建一个比较器接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomerComparetor</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o1,T o2)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//自定义定义比较器实现比较器接口并重写方法</span></span><br><span class=\"line\"><span class=\"comment\">//统一排序方法调用时传入对应的比较器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Utils</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr,CustomerComparetor&lt;T&gt; comparetor)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历通过comparetor.compareTo方法进行排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-工厂模式-Factory\"><a href=\"#3-工厂模式-Factory\" class=\"headerlink\" title=\"3.工厂模式(Factory)\"></a>3.工厂模式(Factory)</h3><p>定义：任何可以产生对象的方法或类，都可以称之为工厂，单例也是一种工厂</p>\n<ol>\n<li><p>简单工厂，扩展性不好</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">createCar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Plane <span class=\"title\">createPlane</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plane();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>工厂方法模式，分别创建工厂，单独分开，方便单一工厂扩展</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">create</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlaneFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Plane <span class=\"title\">create</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>抽象工厂，可以生产一系列的对象，对于一族的产品方便扩展，不方便单一扩展</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此处也可以用接口，可以根据语义选择使用，比如可以实现多个就用接口，只能属于一个类就抽象类</span></span><br><span class=\"line\"><span class=\"comment\">//抽象工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> AbstractCar <span class=\"title\">createCar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> AbstractPlane <span class=\"title\">createPlane</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractPlane</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">AbstractCar <span class=\"title\">createCar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RedCar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">AbstractPlane <span class=\"title\">createPlane</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BluePlane();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractPlane</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCar</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//比如还可以建立一个工厂创建白色的Car和黄色的plane</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"4-门面模式-Facade\"><a href=\"#4-门面模式-Facade\" class=\"headerlink\" title=\"4.门面模式(Facade)\"></a>4.门面模式(Facade)</h3><p>原本客户端是直接通过调用各个子系统的,通过门面模式,创建一个外观类,使得客户端直接调用外观类,来间接去操作相关子系统。</p>\n<h3 id=\"5-调停者-Mediator\"><a href=\"#5-调停者-Mediator\" class=\"headerlink\" title=\"5.调停者(Mediator)\"></a>5.调停者(Mediator)</h3><p>当各个系统互相各种调度，这时候可以抽出一个专门的系统，各个系统只跟这个系统调用。其实外部就是门面模式，内部就是调停者，应用场景消息中间件mq。</p>\n<h3 id=\"6-责任链-chain-of-responsibility\"><a href=\"#6-责任链-chain-of-responsibility\" class=\"headerlink\" title=\"6. 责任链(chain of responsibility)\"></a>6. 责任链(chain of responsibility)</h3><p>为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。filter就是用的责任链模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里使用filter来模拟案例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">filter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//返回boolean用来控制是否继续往下执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(Msg msg)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义消息对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Msg</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"comment\">//...get set</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义两个Filter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Filter1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(Msg msg)</span></span>&#123;</span><br><span class=\"line\">        msg.setMsg(msg.getMsg+<span class=\"string\">\" Filter1 \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Filter2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(Msg msg)</span></span>&#123;</span><br><span class=\"line\">        msg.setMsg(msg.getMsg+<span class=\"string\">\" Filter2 \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义责任链</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ChainFilter implements Filter&#123;</span><br><span class=\"line\">    List&lt;Filter&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> chainFilter <span class=\"title\">addFilter</span><span class=\"params\">(Filter filter)</span></span>&#123;</span><br><span class=\"line\">        list.add(filter);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(Msg msg)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Filter filter : list)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!filter.doFilter(msg)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试demo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args()</span>)</span>&#123;</span><br><span class=\"line\">    ChainFilter chain = <span class=\"keyword\">new</span> ChainFilter();</span><br><span class=\"line\">    <span class=\"comment\">//将filter加入到责任链</span></span><br><span class=\"line\">    chain.add(<span class=\"keyword\">new</span> Filter1()).add(<span class=\"keyword\">new</span> Filter2());</span><br><span class=\"line\">    <span class=\"comment\">//也可以将一个责任链作为一个整体filter加入</span></span><br><span class=\"line\">    ChainFilter chain2 = <span class=\"keyword\">new</span> ChainFilter();</span><br><span class=\"line\">    chain.add(<span class=\"keyword\">new</span> Filter1()).add(<span class=\"keyword\">new</span> Filter2()).add(chain);</span><br><span class=\"line\">    chain2.doFilter(<span class=\"keyword\">new</span> Msg());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>spring中filterChain对request顺序和对response顺序是相反的，实现很巧妙，简化代码类似如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现filter后需要重写此方法，传入三个参数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain filterChain)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对request进行操作，通过递归，会一层层的先对request进行操作</span></span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        filterChain.doFilter(request, response, filterChain);</span><br><span class=\"line\">        <span class=\"comment\">//对response进行操作，递归执行完request操作后会逆向对response进行操作</span></span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-装饰器-Decorator\"><a href=\"#7-装饰器-Decorator\" class=\"headerlink\" title=\"7.装饰器(Decorator)\"></a>7.装饰器(Decorator)</h3><p>允许向一个现有的对象添加新的功能，同时又不改变其结构。一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。此时，将具体功能职责划分，同时继承装饰者模式。</p>\n<p>使用场景：将具体功能职责划分，同时继承装饰者模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Shape: Circle\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建抽象装饰类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> Shape decoratedShape;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShapeDecorator</span><span class=\"params\">(Shape decoratedShape)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.decoratedShape = decoratedShape;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      decoratedShape.draw();</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建装饰类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedShapeDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShapeDecorator</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RedShapeDecorator</span><span class=\"params\">(Shape decoratedShape)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(decoratedShape);     </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      decoratedShape.draw();         </span><br><span class=\"line\">      setRedBorder(decoratedShape);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setRedBorder</span><span class=\"params\">(Shape decoratedShape)</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Border Color: Red\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//小程序demo</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//将对象传入，通过装饰器进行装饰</span></span><br><span class=\"line\">      ShapeDecorator redCircle = <span class=\"keyword\">new</span> RedShapeDecorator(<span class=\"keyword\">new</span> Circle());</span><br><span class=\"line\">      redCircle.draw();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-观察者模式-Observer\"><a href=\"#8-观察者模式-Observer\" class=\"headerlink\" title=\"8. 观察者模式(Observer)\"></a>8. 观察者模式(Observer)</h3><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p>\n<p>Observer,Listener,Hook,Callback 都是观察者模式。一般用作事件监听，消息队列。</p>\n<p>观察者模式与责任链模式很类似，责任链模式是将请求传递下去，观察者模式是对观察者进行广播。</p>\n<h3 id=\"9-组合模式-Composite\"><a href=\"#9-组合模式-Composite\" class=\"headerlink\" title=\"9.组合模式(Composite)\"></a>9.组合模式(Composite)</h3><p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。</p>\n<p>使用场景：树形菜单，文件、文件夹的管理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//叶子节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeafNode</span> <span class=\"title\">entends</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    String content;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LeafNode</span><span class=\"params\">(String content)</span></span>&#123;<span class=\"keyword\">this</span>.content = content&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;System.out.println(content)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//分支节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BranchNode</span> <span class=\"title\">entends</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当前子节点,可能是分支节点也可能是叶子节点</span></span><br><span class=\"line\">    List&lt;Node&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    String content;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BranchNode</span><span class=\"params\">(String content)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addNode</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        nodes.add(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//构建树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//根节点</span></span><br><span class=\"line\">    BranchNode root = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建分支节点并添加到根节点</span></span><br><span class=\"line\">    BranchNode branch1 = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"branch1\"</span>);</span><br><span class=\"line\">    BranchNode branch2= <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"branch2\"</span>);</span><br><span class=\"line\">    root.addNode(branch1);</span><br><span class=\"line\">    root.addNode(branch2);</span><br><span class=\"line\">    <span class=\"comment\">//创建叶子节点加入到分支branch1</span></span><br><span class=\"line\">    LeafNode leaf1 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"leaf1\"</span>);</span><br><span class=\"line\">    LeafNode leaf2 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"leaf2\"</span>);</span><br><span class=\"line\">    branch1.addNode(leaf1);</span><br><span class=\"line\">    branch1.addNode(leaf2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//遍历树</span></span><br><span class=\"line\">    tree(root,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//递归遍历,depth为深度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">tree</span><span class=\"params\">(Node b,<span class=\"keyword\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;depth;i++)&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"---\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.method();</span><br><span class=\"line\">    <span class=\"comment\">//如果是分支则遍历节点进行递归</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b <span class=\"keyword\">instanceof</span> BranchNode)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Node node : ((BranchNode) b).nodes)&#123;</span><br><span class=\"line\">            tree(node,depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-享元模式-flyWeight\"><a href=\"#10-享元模式-flyWeight\" class=\"headerlink\" title=\"10.享元模式(flyWeight)\"></a>10.享元模式(flyWeight)</h3><p>主要用于减少创建对象的数量，以减少内存占用和提高性能。池化思想，将对象放到池里，需要时从池里拿。java的String就是享元模式。应用场景一般是线程池，连接池。</p>\n<h3 id=\"11-代理模式-Proxy\"><a href=\"#11-代理模式-Proxy\" class=\"headerlink\" title=\"11. 代理模式(Proxy)\"></a>11. 代理模式(Proxy)</h3><ul>\n<li><p>静态代理： 直接创建一个代理类与被代理类实现同一个接口，在代理类中对同样方法进行操作</p>\n</li>\n<li><p>动态代理： 自动实现代理类，继承Proxy类，与被代理类实现同一接口</p>\n<ul>\n<li><p>jdk : 通过反射实现，继承Proxy类，与被代理类实现同一接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过newProxyInstance生成代理类，指定classLoader，代理类实现的接口列表和对应的执行handler</span></span><br><span class=\"line\">Proxy proxy = (Proxy) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cglib：需要添加引入jar，通过继承被代理类实现，不需要实现接口，所以类是final的无法使用(ASM可以，因为直接修改字节码文件)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数</span></span><br><span class=\"line\">Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\"><span class=\"comment\">//设置目标类的字节码文件</span></span><br><span class=\"line\">enhancer.setSuperclass(Dog<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置回调函数，相当于jdk动态代理的handler</span></span><br><span class=\"line\">enhancer.setCallback(<span class=\"keyword\">new</span> MyMethodInterceptor());</span><br><span class=\"line\"><span class=\"comment\">//这里的creat方法就是正式创建代理类</span></span><br><span class=\"line\">Proxy proxy = (Dog)enhancer.create();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Instrument：在JDK5引入的，在class被加载时可以直接修改二进制文件</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-迭代器模式-Iterator\"><a href=\"#12-迭代器模式-Iterator\" class=\"headerlink\" title=\"12.迭代器模式(Iterator)\"></a>12.迭代器模式(Iterator)</h3><p>用于容器的遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个迭代器接口，要求每个容器都实现这个接口，实现通用遍历</span></span><br><span class=\"line\"><span class=\"comment\">//对于泛型的E T随便定义，只是E通常代表element，T代表type</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//是否有下一个</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//获取下一个</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-访问者模式-Visitor\"><a href=\"#13-访问者模式-Visitor\" class=\"headerlink\" title=\"13.访问者模式(Visitor)\"></a>13.访问者模式(Visitor)</h3><p>在结构不变的情况下动态改变对于内部元素的动作，通过这种方式，元素的执行算法可以随着访问者改变而改变。代码耦合度很高。使用场景：1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。java的ASM是通过visitor实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个表示元素的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ComputerPart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVistor vistor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建元素实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Keyboard</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVisitor vistor)</span></span>&#123;</span><br><span class=\"line\">        vistor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Monitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVisitor vistor)</span></span>&#123;</span><br><span class=\"line\">        vistor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建一个访问者接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ComputerPartVistor</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Keyboard keyboard)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Monitor monitor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建实体访问者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComputerPartDisplayVistor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPartVistor</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Keyboard keyboard)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Displaying Keyboard.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Monitor monitor)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Displaying monitor.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试Demo，相当于执行的方法调用了传入对象的相关方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VisitorPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Monitor monitor = <span class=\"keyword\">new</span> Monitor();</span><br><span class=\"line\">      monitor.accept(<span class=\"keyword\">new</span> ComputerPartDisplayVisitor());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-构建器模式-Builder\"><a href=\"#14-构建器模式-Builder\" class=\"headerlink\" title=\"14.构建器模式(Builder)\"></a>14.构建器模式(Builder)</h3><p>分离复杂对象的构建和表示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当一个对象很大的时候可以分别构建</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">    <span class=\"comment\">//..省略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonBuild</span> </span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">buildName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        person.name = name;</span><br><span class=\"line\">        <span class=\"comment\">//链式编程</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">buildAge</span><span class=\"params\">(String age)</span></span>&#123;</span><br><span class=\"line\">        person.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">buildSex</span><span class=\"params\">(String sex)</span></span>&#123;</span><br><span class=\"line\">        person.sex = sex;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    PersonBuild build = <span class=\"keyword\">new</span> PersonBuild();</span><br><span class=\"line\">    <span class=\"comment\">//可以灵活地构建对象的部分</span></span><br><span class=\"line\">  \tperson person = build.buildName(<span class=\"string\">\"zhangsan\"</span>).buildAge(<span class=\"string\">\"20\"</span>).buildSex(<span class=\"string\">\"男\"</span>).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-适配器模式-Adapter\"><a href=\"#15-适配器模式-Adapter\" class=\"headerlink\" title=\"15.适配器模式(Adapter)\"></a>15.适配器模式(Adapter)</h3><p>作为两个不兼容的接口之间的桥梁。可以联想电源适配器，转接头</p>\n<p>将一个类的接口转换成另外一个希望的接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">MediaPlayer</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//播放器接口，有两个实现vlc播放器和mp4播放器</span></span><br><span class=\"line\">   AdvancedMediaPlayer advancedMusicPlayer;</span><br><span class=\"line\">    <span class=\"comment\">//根据类型构建不同的播放器</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MediaAdapter</span><span class=\"params\">(String audioType)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(audioType.equalsIgnoreCase(<span class=\"string\">\"vlc\"</span>) )&#123;</span><br><span class=\"line\">         advancedMusicPlayer = <span class=\"keyword\">new</span> VlcPlayer();       </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (audioType.equalsIgnoreCase(<span class=\"string\">\"mp4\"</span>))&#123;</span><br><span class=\"line\">         advancedMusicPlayer = <span class=\"keyword\">new</span> Mp4Player();</span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//根据类型调用不同播放器的方法</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">(String audioType, String fileName)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(audioType.equalsIgnoreCase(<span class=\"string\">\"vlc\"</span>))&#123;</span><br><span class=\"line\">         advancedMusicPlayer.playVlc(fileName);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(audioType.equalsIgnoreCase(<span class=\"string\">\"mp4\"</span>))&#123;</span><br><span class=\"line\">         advancedMusicPlayer.playMp4(fileName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-桥接模式-Bridge\"><a href=\"#16-桥接模式-Bridge\" class=\"headerlink\" title=\"16.桥接模式(Bridge)\"></a>16.桥接模式(Bridge)</h3><p>将抽象部分和实现部分分离，使他们可以独立的变化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建桥接接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DrawAPI</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建桥接实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Red circle\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Green circle\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用接口创建抽象类Shape</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//抽象类中注入接口的实现类，可以直接调用对应实现类的方法</span></span><br><span class=\"line\">    DrawAPI drawAPI;</span><br><span class=\"line\">    Shape(DrawAPI drawAPI)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.drawAPI = drawAPI;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(drawAPI)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        drawAPI.drawCircle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-命令模式-Command\"><a href=\"#17-命令模式-Command\" class=\"headerlink\" title=\"17.命令模式(Command)\"></a>17.命令模式(Command)</h3><p>封装命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//回退方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//增加方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddCommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"加1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"减1\"</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以结合组合模式实现宏命令(一系列串起来的命令)</span></span><br><span class=\"line\"><span class=\"comment\">//可以结合责任链模式做多次的undo</span></span><br><span class=\"line\"><span class=\"comment\">//可以结合记忆模式实现事务回滚</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-原型模式-Prototype\"><a href=\"#18-原型模式-Prototype\" class=\"headerlink\" title=\"18.原型模式(Prototype)\"></a>18.原型模式(Prototype)</h3><p>jdk自带，实现cloneable接口，一般重写clone方法，jdk自带的clone方法克隆对象的引用类型还是指向的同一个地址(浅拷贝)，重写clone方法使引用也克隆叫做深拷贝，属性也可以实现clone方法执行clone。</p>\n<p>String类型不需要深拷贝，修改String是指向常量池中新的对象。但是如果用StringBuffer创建的就需要深拷贝。</p>\n<h3 id=\"19-备忘录模式-Memento\"><a href=\"#19-备忘录模式-Memento\" class=\"headerlink\" title=\"19.备忘录模式(Memento)\"></a>19.备忘录模式(Memento)</h3><p>备忘录模式提供的基本功能是：保存对象状态信息(快照)、撤销、重做和历史记录。<br>备忘录模式一般会提供两种接口：宽接口和窄接口。通过宽接口可以获取整个对象状态，会暴露备忘录对象的内部信息。通过窄接口，只能访问有限的，开发者限制了的信息，可以有效的防止信息泄露。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一般需要存盘，要实现序列化</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memento</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> money;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> level;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//窄接口，访问部分信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMenoy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> menoy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//窄接口，访问部分信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLevel</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//宽接口，本包之内皆可访问</span></span><br><span class=\"line\">    Memento(<span class=\"keyword\">int</span> menoy,<span class=\"keyword\">int</span> level)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//记录金钱和等级，可通过get获取值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.menoy = menoy;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-模板方法-TemplateMethod\"><a href=\"#20-模板方法-TemplateMethod\" class=\"headerlink\" title=\"20.模板方法(TemplateMethod)\"></a>20.模板方法(TemplateMethod)</h3><p>模板方法就是钩子函数，回调函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        F f = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">        f.m();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">F</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        op1();</span><br><span class=\"line\">        op2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">op1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">op2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">F</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-状态模式-State\"><a href=\"#21-状态模式-State\" class=\"headerlink\" title=\"21.状态模式(State)\"></a>21.状态模式(State)</h3><p>一个类的动作根据状态不动有不同的类型反应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MMState</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HappyState</span> <span class=\"keyword\">extends</span> <span class=\"title\">MMState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy smile\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy cry\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SadState</span> <span class=\"keyword\">extends</span> <span class=\"title\">MMState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"sad smile\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"sad cry\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MM</span></span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"comment\">//根据不同的状态调用不同实现</span></span><br><span class=\"line\">    MMState state;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        state.smile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22-解释器-Intepreter\"><a href=\"#22-解释器-Intepreter\" class=\"headerlink\" title=\"22.解释器(Intepreter)\"></a>22.解释器(Intepreter)</h3><p>动态脚本解析，比如写一个正则表达式解析器，python解析器，解析一门语言。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"面向对象六大原则\"><a href=\"#面向对象六大原则\" class=\"headerlink\" title=\"面向对象六大原则\"></a>面向对象六大原则</h2><h3 id=\"指导思想\"><a href=\"#指导思想\" class=\"headerlink\" title=\"指导思想\"></a>指导思想</h3><ul>\n<li><p>可维护性(Maintainability)</p>\n<p>修改功能，需要改动地方越少，可维护性越好</p>\n</li>\n<li><p>可复用性(Reusability)</p>\n<p>代码可以被重复使用，总结类库</p>\n</li>\n<li><p>可扩展性(Extensibility/Scalability)</p>\n<p>添加功能无需修改原来代码</p>\n</li>\n<li><p>灵活性(Flexibility/Mobility/Adaptability)</p>\n<p>代码接口可以灵活调用</p>\n</li>\n</ul>\n<h3 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h3><ul>\n<li><p>单一职责原则</p>\n<p>一个类别太大，别太累，负责单一职责，高内聚地耦合</p>\n</li>\n<li><p>开闭原则</p>\n<p>对扩展开放，对修改关闭，尽量不修改原来代码进行扩展，抽象多态是开闭原则的关键</p>\n</li>\n<li><p>里氏替换</p>\n<p>所有使用父类的地方，必须能够透明的使用子类对象（子类可以完全替代父类）</p>\n</li>\n<li><p>依赖倒置原则</p>\n<p>面向接口（抽象）编程，而不是依赖具体</p>\n</li>\n<li><p>接口抽离原则</p>\n<p>每一个接口承担独立的角色，避免子类实现不需要的方法，提供接口暴露只需最小接口（只暴露用到的接口）</p>\n</li>\n<li><p>迪米特法则</p>\n<p>对于一个对象，不要和联系不大的对象耦合，尽量只用自己的东西，低耦合</p>\n</li>\n</ul>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><h3 id=\"1-单例模式-Singleton\"><a href=\"#1-单例模式-Singleton\" class=\"headerlink\" title=\"1.单例模式(Singleton)\"></a>1.单例模式(Singleton)</h3><p>应用场景：只需要有一个实例存在</p>\n<p>创建方法：（前提：将构造方法定义为private，然后提供获取实例的方法）</p>\n<ol>\n<li><p>饿汉式，定义个static的实例直接初始化。推荐使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonObj INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br></pre></td></tr></table></figure>\n\n<p>线程安全，jvm保证，类加载时候就会实例化。</p>\n</li>\n<li><p>静态语句块初始化，和第一种一样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonObj INSTANCE;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>懒汉式，用的时候才初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonObj INSTANCE;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonObj getINSTANCE &#123;</span><br><span class=\"line\">    <span class=\"comment\">//并发时第一次可能new多个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对3的并发问题，通过加synchronized加方法上控制并发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonObj INSTANCE;</span><br><span class=\"line\"><span class=\"comment\">//方法上加锁导致并发效率降低</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> SingletonObj getINSTANCE &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对第4种效率问题，创建对象时加锁，双判断，很多人觉得是最完美写法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此处要加volatile保持可见性</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">volatile</span> SingletonObj INSTANCE;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> SingletonObj getINSTANCE &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(XXX<span class=\"class\">.<span class=\"keyword\">class</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//此处如果不加判断，也会导致可能产生多个实例</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\tINSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>静态内部类的方式，JVM保证线程安全，完美写法之一。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonObjHolder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> SingletonObj INSTANCE = <span class=\"keyword\">new</span> SingletonObj();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonObj getINSTANCE &#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用时候静态内部类才会加载</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SingletonObjHolder.INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过枚举类，最完美写法（缺点是用枚举有点奇怪），线程安全，还可以防止反序列化（反射创建，枚举类没有构造方法）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> SingletonObj&#123;</span><br><span class=\"line\">\tINSTANCE; </span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"2-策略模式-Strategy\"><a href=\"#2-策略模式-Strategy\" class=\"headerlink\" title=\"2.策略模式(Strategy)\"></a>2.策略模式(Strategy)</h3><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。在有多种算法相似的情况下，解决使用 if…else 所带来的复杂和难以维护。</p>\n<p>应用场景：比如分享功能，目前有微信和QQ，后续可能还会增加微博等等，此时只要定义不同的策略即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java的Comparetor就是策略模式，此处也用比较方法举例</span></span><br><span class=\"line\"><span class=\"comment\">//创建一个比较器接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomerComparetor</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(T o1,T o2)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//自定义定义比较器实现比较器接口并重写方法</span></span><br><span class=\"line\"><span class=\"comment\">//统一排序方法调用时传入对应的比较器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Utils</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr,CustomerComparetor&lt;T&gt; comparetor)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历通过comparetor.compareTo方法进行排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-工厂模式-Factory\"><a href=\"#3-工厂模式-Factory\" class=\"headerlink\" title=\"3.工厂模式(Factory)\"></a>3.工厂模式(Factory)</h3><p>定义：任何可以产生对象的方法或类，都可以称之为工厂，单例也是一种工厂</p>\n<ol>\n<li><p>简单工厂，扩展性不好</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">createCar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Plane <span class=\"title\">createPlane</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plane();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>工厂方法模式，分别创建工厂，单独分开，方便单一工厂扩展</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">create</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlaneFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Plane <span class=\"title\">create</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>抽象工厂，可以生产一系列的对象，对于一族的产品方便扩展，不方便单一扩展</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此处也可以用接口，可以根据语义选择使用，比如可以实现多个就用接口，只能属于一个类就抽象类</span></span><br><span class=\"line\"><span class=\"comment\">//抽象工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> AbstractCar <span class=\"title\">createCar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> AbstractPlane <span class=\"title\">createPlane</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractPlane</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">AbstractCar <span class=\"title\">createCar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RedCar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">AbstractPlane <span class=\"title\">createPlane</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BluePlane();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCar</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractPlane</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCar</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//比如还可以建立一个工厂创建白色的Car和黄色的plane</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"4-门面模式-Facade\"><a href=\"#4-门面模式-Facade\" class=\"headerlink\" title=\"4.门面模式(Facade)\"></a>4.门面模式(Facade)</h3><p>原本客户端是直接通过调用各个子系统的,通过门面模式,创建一个外观类,使得客户端直接调用外观类,来间接去操作相关子系统。</p>\n<h3 id=\"5-调停者-Mediator\"><a href=\"#5-调停者-Mediator\" class=\"headerlink\" title=\"5.调停者(Mediator)\"></a>5.调停者(Mediator)</h3><p>当各个系统互相各种调度，这时候可以抽出一个专门的系统，各个系统只跟这个系统调用。其实外部就是门面模式，内部就是调停者，应用场景消息中间件mq。</p>\n<h3 id=\"6-责任链-chain-of-responsibility\"><a href=\"#6-责任链-chain-of-responsibility\" class=\"headerlink\" title=\"6. 责任链(chain of responsibility)\"></a>6. 责任链(chain of responsibility)</h3><p>为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。filter就是用的责任链模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里使用filter来模拟案例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">filter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//返回boolean用来控制是否继续往下执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(Msg msg)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义消息对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Msg</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"comment\">//...get set</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义两个Filter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Filter1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(Msg msg)</span></span>&#123;</span><br><span class=\"line\">        msg.setMsg(msg.getMsg+<span class=\"string\">\" Filter1 \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Filter2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(Msg msg)</span></span>&#123;</span><br><span class=\"line\">        msg.setMsg(msg.getMsg+<span class=\"string\">\" Filter2 \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义责任链</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ChainFilter implements Filter&#123;</span><br><span class=\"line\">    List&lt;Filter&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> chainFilter <span class=\"title\">addFilter</span><span class=\"params\">(Filter filter)</span></span>&#123;</span><br><span class=\"line\">        list.add(filter);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">doFilter</span><span class=\"params\">(Msg msg)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Filter filter : list)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!filter.doFilter(msg)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试demo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args()</span>)</span>&#123;</span><br><span class=\"line\">    ChainFilter chain = <span class=\"keyword\">new</span> ChainFilter();</span><br><span class=\"line\">    <span class=\"comment\">//将filter加入到责任链</span></span><br><span class=\"line\">    chain.add(<span class=\"keyword\">new</span> Filter1()).add(<span class=\"keyword\">new</span> Filter2());</span><br><span class=\"line\">    <span class=\"comment\">//也可以将一个责任链作为一个整体filter加入</span></span><br><span class=\"line\">    ChainFilter chain2 = <span class=\"keyword\">new</span> ChainFilter();</span><br><span class=\"line\">    chain.add(<span class=\"keyword\">new</span> Filter1()).add(<span class=\"keyword\">new</span> Filter2()).add(chain);</span><br><span class=\"line\">    chain2.doFilter(<span class=\"keyword\">new</span> Msg());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>spring中filterChain对request顺序和对response顺序是相反的，实现很巧妙，简化代码类似如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现filter后需要重写此方法，传入三个参数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain filterChain)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对request进行操作，通过递归，会一层层的先对request进行操作</span></span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        filterChain.doFilter(request, response, filterChain);</span><br><span class=\"line\">        <span class=\"comment\">//对response进行操作，递归执行完request操作后会逆向对response进行操作</span></span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-装饰器-Decorator\"><a href=\"#7-装饰器-Decorator\" class=\"headerlink\" title=\"7.装饰器(Decorator)\"></a>7.装饰器(Decorator)</h3><p>允许向一个现有的对象添加新的功能，同时又不改变其结构。一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。此时，将具体功能职责划分，同时继承装饰者模式。</p>\n<p>使用场景：将具体功能职责划分，同时继承装饰者模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Shape: Circle\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建抽象装饰类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> Shape decoratedShape;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShapeDecorator</span><span class=\"params\">(Shape decoratedShape)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.decoratedShape = decoratedShape;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      decoratedShape.draw();</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建装饰类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedShapeDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShapeDecorator</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RedShapeDecorator</span><span class=\"params\">(Shape decoratedShape)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(decoratedShape);     </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      decoratedShape.draw();         </span><br><span class=\"line\">      setRedBorder(decoratedShape);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setRedBorder</span><span class=\"params\">(Shape decoratedShape)</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Border Color: Red\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//小程序demo</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//将对象传入，通过装饰器进行装饰</span></span><br><span class=\"line\">      ShapeDecorator redCircle = <span class=\"keyword\">new</span> RedShapeDecorator(<span class=\"keyword\">new</span> Circle());</span><br><span class=\"line\">      redCircle.draw();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-观察者模式-Observer\"><a href=\"#8-观察者模式-Observer\" class=\"headerlink\" title=\"8. 观察者模式(Observer)\"></a>8. 观察者模式(Observer)</h3><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p>\n<p>Observer,Listener,Hook,Callback 都是观察者模式。一般用作事件监听，消息队列。</p>\n<p>观察者模式与责任链模式很类似，责任链模式是将请求传递下去，观察者模式是对观察者进行广播。</p>\n<h3 id=\"9-组合模式-Composite\"><a href=\"#9-组合模式-Composite\" class=\"headerlink\" title=\"9.组合模式(Composite)\"></a>9.组合模式(Composite)</h3><p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。</p>\n<p>使用场景：树形菜单，文件、文件夹的管理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//叶子节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeafNode</span> <span class=\"title\">entends</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    String content;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LeafNode</span><span class=\"params\">(String content)</span></span>&#123;<span class=\"keyword\">this</span>.content = content&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;System.out.println(content)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//分支节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BranchNode</span> <span class=\"title\">entends</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当前子节点,可能是分支节点也可能是叶子节点</span></span><br><span class=\"line\">    List&lt;Node&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    String content;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BranchNode</span><span class=\"params\">(String content)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addNode</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        nodes.add(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//构建树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//根节点</span></span><br><span class=\"line\">    BranchNode root = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建分支节点并添加到根节点</span></span><br><span class=\"line\">    BranchNode branch1 = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"branch1\"</span>);</span><br><span class=\"line\">    BranchNode branch2= <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"branch2\"</span>);</span><br><span class=\"line\">    root.addNode(branch1);</span><br><span class=\"line\">    root.addNode(branch2);</span><br><span class=\"line\">    <span class=\"comment\">//创建叶子节点加入到分支branch1</span></span><br><span class=\"line\">    LeafNode leaf1 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"leaf1\"</span>);</span><br><span class=\"line\">    LeafNode leaf2 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"leaf2\"</span>);</span><br><span class=\"line\">    branch1.addNode(leaf1);</span><br><span class=\"line\">    branch1.addNode(leaf2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//遍历树</span></span><br><span class=\"line\">    tree(root,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//递归遍历,depth为深度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">tree</span><span class=\"params\">(Node b,<span class=\"keyword\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;depth;i++)&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"---\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.method();</span><br><span class=\"line\">    <span class=\"comment\">//如果是分支则遍历节点进行递归</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b <span class=\"keyword\">instanceof</span> BranchNode)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Node node : ((BranchNode) b).nodes)&#123;</span><br><span class=\"line\">            tree(node,depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-享元模式-flyWeight\"><a href=\"#10-享元模式-flyWeight\" class=\"headerlink\" title=\"10.享元模式(flyWeight)\"></a>10.享元模式(flyWeight)</h3><p>主要用于减少创建对象的数量，以减少内存占用和提高性能。池化思想，将对象放到池里，需要时从池里拿。java的String就是享元模式。应用场景一般是线程池，连接池。</p>\n<h3 id=\"11-代理模式-Proxy\"><a href=\"#11-代理模式-Proxy\" class=\"headerlink\" title=\"11. 代理模式(Proxy)\"></a>11. 代理模式(Proxy)</h3><ul>\n<li><p>静态代理： 直接创建一个代理类与被代理类实现同一个接口，在代理类中对同样方法进行操作</p>\n</li>\n<li><p>动态代理： 自动实现代理类，继承Proxy类，与被代理类实现同一接口</p>\n<ul>\n<li><p>jdk : 通过反射实现，继承Proxy类，与被代理类实现同一接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过newProxyInstance生成代理类，指定classLoader，代理类实现的接口列表和对应的执行handler</span></span><br><span class=\"line\">Proxy proxy = (Proxy) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cglib：需要添加引入jar，通过继承被代理类实现，不需要实现接口，所以类是final的无法使用(ASM可以，因为直接修改字节码文件)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数</span></span><br><span class=\"line\">Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\"><span class=\"comment\">//设置目标类的字节码文件</span></span><br><span class=\"line\">enhancer.setSuperclass(Dog<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置回调函数，相当于jdk动态代理的handler</span></span><br><span class=\"line\">enhancer.setCallback(<span class=\"keyword\">new</span> MyMethodInterceptor());</span><br><span class=\"line\"><span class=\"comment\">//这里的creat方法就是正式创建代理类</span></span><br><span class=\"line\">Proxy proxy = (Dog)enhancer.create();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Instrument：在JDK5引入的，在class被加载时可以直接修改二进制文件</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-迭代器模式-Iterator\"><a href=\"#12-迭代器模式-Iterator\" class=\"headerlink\" title=\"12.迭代器模式(Iterator)\"></a>12.迭代器模式(Iterator)</h3><p>用于容器的遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个迭代器接口，要求每个容器都实现这个接口，实现通用遍历</span></span><br><span class=\"line\"><span class=\"comment\">//对于泛型的E T随便定义，只是E通常代表element，T代表type</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//是否有下一个</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//获取下一个</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-访问者模式-Visitor\"><a href=\"#13-访问者模式-Visitor\" class=\"headerlink\" title=\"13.访问者模式(Visitor)\"></a>13.访问者模式(Visitor)</h3><p>在结构不变的情况下动态改变对于内部元素的动作，通过这种方式，元素的执行算法可以随着访问者改变而改变。代码耦合度很高。使用场景：1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。java的ASM是通过visitor实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个表示元素的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ComputerPart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVistor vistor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建元素实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Keyboard</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVisitor vistor)</span></span>&#123;</span><br><span class=\"line\">        vistor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Monitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPart</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVisitor vistor)</span></span>&#123;</span><br><span class=\"line\">        vistor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建一个访问者接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ComputerPartVistor</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Keyboard keyboard)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Monitor monitor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建实体访问者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComputerPartDisplayVistor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPartVistor</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Keyboard keyboard)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Displaying Keyboard.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Monitor monitor)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Displaying monitor.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试Demo，相当于执行的方法调用了传入对象的相关方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VisitorPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Monitor monitor = <span class=\"keyword\">new</span> Monitor();</span><br><span class=\"line\">      monitor.accept(<span class=\"keyword\">new</span> ComputerPartDisplayVisitor());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-构建器模式-Builder\"><a href=\"#14-构建器模式-Builder\" class=\"headerlink\" title=\"14.构建器模式(Builder)\"></a>14.构建器模式(Builder)</h3><p>分离复杂对象的构建和表示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当一个对象很大的时候可以分别构建</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">    <span class=\"comment\">//..省略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonBuild</span> </span>&#123;</span><br><span class=\"line\">    Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">buildName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        person.name = name;</span><br><span class=\"line\">        <span class=\"comment\">//链式编程</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">buildAge</span><span class=\"params\">(String age)</span></span>&#123;</span><br><span class=\"line\">        person.age = age;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">buildSex</span><span class=\"params\">(String sex)</span></span>&#123;</span><br><span class=\"line\">        person.sex = sex;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    PersonBuild build = <span class=\"keyword\">new</span> PersonBuild();</span><br><span class=\"line\">    <span class=\"comment\">//可以灵活地构建对象的部分</span></span><br><span class=\"line\">  \tperson person = build.buildName(<span class=\"string\">\"zhangsan\"</span>).buildAge(<span class=\"string\">\"20\"</span>).buildSex(<span class=\"string\">\"男\"</span>).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-适配器模式-Adapter\"><a href=\"#15-适配器模式-Adapter\" class=\"headerlink\" title=\"15.适配器模式(Adapter)\"></a>15.适配器模式(Adapter)</h3><p>作为两个不兼容的接口之间的桥梁。可以联想电源适配器，转接头</p>\n<p>将一个类的接口转换成另外一个希望的接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">MediaPlayer</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//播放器接口，有两个实现vlc播放器和mp4播放器</span></span><br><span class=\"line\">   AdvancedMediaPlayer advancedMusicPlayer;</span><br><span class=\"line\">    <span class=\"comment\">//根据类型构建不同的播放器</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MediaAdapter</span><span class=\"params\">(String audioType)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(audioType.equalsIgnoreCase(<span class=\"string\">\"vlc\"</span>) )&#123;</span><br><span class=\"line\">         advancedMusicPlayer = <span class=\"keyword\">new</span> VlcPlayer();       </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (audioType.equalsIgnoreCase(<span class=\"string\">\"mp4\"</span>))&#123;</span><br><span class=\"line\">         advancedMusicPlayer = <span class=\"keyword\">new</span> Mp4Player();</span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//根据类型调用不同播放器的方法</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">(String audioType, String fileName)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(audioType.equalsIgnoreCase(<span class=\"string\">\"vlc\"</span>))&#123;</span><br><span class=\"line\">         advancedMusicPlayer.playVlc(fileName);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(audioType.equalsIgnoreCase(<span class=\"string\">\"mp4\"</span>))&#123;</span><br><span class=\"line\">         advancedMusicPlayer.playMp4(fileName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-桥接模式-Bridge\"><a href=\"#16-桥接模式-Bridge\" class=\"headerlink\" title=\"16.桥接模式(Bridge)\"></a>16.桥接模式(Bridge)</h3><p>将抽象部分和实现部分分离，使他们可以独立的变化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建桥接接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DrawAPI</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建桥接实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Red circle\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Green circle\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用接口创建抽象类Shape</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//抽象类中注入接口的实现类，可以直接调用对应实现类的方法</span></span><br><span class=\"line\">    DrawAPI drawAPI;</span><br><span class=\"line\">    Shape(DrawAPI drawAPI)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.drawAPI = drawAPI;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(drawAPI)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        drawAPI.drawCircle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-命令模式-Command\"><a href=\"#17-命令模式-Command\" class=\"headerlink\" title=\"17.命令模式(Command)\"></a>17.命令模式(Command)</h3><p>封装命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//回退方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//增加方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddCommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"加1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"减1\"</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以结合组合模式实现宏命令(一系列串起来的命令)</span></span><br><span class=\"line\"><span class=\"comment\">//可以结合责任链模式做多次的undo</span></span><br><span class=\"line\"><span class=\"comment\">//可以结合记忆模式实现事务回滚</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-原型模式-Prototype\"><a href=\"#18-原型模式-Prototype\" class=\"headerlink\" title=\"18.原型模式(Prototype)\"></a>18.原型模式(Prototype)</h3><p>jdk自带，实现cloneable接口，一般重写clone方法，jdk自带的clone方法克隆对象的引用类型还是指向的同一个地址(浅拷贝)，重写clone方法使引用也克隆叫做深拷贝，属性也可以实现clone方法执行clone。</p>\n<p>String类型不需要深拷贝，修改String是指向常量池中新的对象。但是如果用StringBuffer创建的就需要深拷贝。</p>\n<h3 id=\"19-备忘录模式-Memento\"><a href=\"#19-备忘录模式-Memento\" class=\"headerlink\" title=\"19.备忘录模式(Memento)\"></a>19.备忘录模式(Memento)</h3><p>备忘录模式提供的基本功能是：保存对象状态信息(快照)、撤销、重做和历史记录。<br>备忘录模式一般会提供两种接口：宽接口和窄接口。通过宽接口可以获取整个对象状态，会暴露备忘录对象的内部信息。通过窄接口，只能访问有限的，开发者限制了的信息，可以有效的防止信息泄露。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一般需要存盘，要实现序列化</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memento</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> money;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> level;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//窄接口，访问部分信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMenoy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> menoy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//窄接口，访问部分信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLevel</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//宽接口，本包之内皆可访问</span></span><br><span class=\"line\">    Memento(<span class=\"keyword\">int</span> menoy,<span class=\"keyword\">int</span> level)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//记录金钱和等级，可通过get获取值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.menoy = menoy;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-模板方法-TemplateMethod\"><a href=\"#20-模板方法-TemplateMethod\" class=\"headerlink\" title=\"20.模板方法(TemplateMethod)\"></a>20.模板方法(TemplateMethod)</h3><p>模板方法就是钩子函数，回调函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        F f = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">        f.m();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">F</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        op1();</span><br><span class=\"line\">        op2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">op1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">op2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">F</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-状态模式-State\"><a href=\"#21-状态模式-State\" class=\"headerlink\" title=\"21.状态模式(State)\"></a>21.状态模式(State)</h3><p>一个类的动作根据状态不动有不同的类型反应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MMState</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HappyState</span> <span class=\"keyword\">extends</span> <span class=\"title\">MMState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy smile\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy cry\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SadState</span> <span class=\"keyword\">extends</span> <span class=\"title\">MMState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"sad smile\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"sad cry\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MM</span></span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"comment\">//根据不同的状态调用不同实现</span></span><br><span class=\"line\">    MMState state;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        state.smile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22-解释器-Intepreter\"><a href=\"#22-解释器-Intepreter\" class=\"headerlink\" title=\"22.解释器(Intepreter)\"></a>22.解释器(Intepreter)</h3><p>动态脚本解析，比如写一个正则表达式解析器，python解析器，解析一门语言。</p>\n"},{"title":"分布式锁实现方式","id":"1098","date":"2020-04-23T12:17:01.000Z","_content":"## 分布式锁实现方式\n\n### 1.基于数据库\n\n创建一个专门的锁表，通过操作数据来实现。基于数据库的锁性能相对较差，一般都是首先排除的方案，必要才用。\n\n1. 基于唯一索引实现\n\n   以方法名为唯一索引，每次使用时插入，结束时删除，当无法插入时表示有人占有锁。这种方案的问题是服务挂掉可能数据一直存在，导致锁一直没有删除释放，需要定时清理。\n\n2. 基于悲观锁实现\n\n   通过悲观锁查询一条记录锁定，当其他线程查询时必须block等待，等待超时则失败(InnoDb默认等待时间50s，innodb_lock_wait_timeout设置事务锁超时时间)。悲观锁可以严格保证数据访问的安全。但是缺点也明显，即每次请求都会额外产生加锁的开销且未获取到锁的请求将会阻塞等待锁的获取，在高并发环境下，容易造成大量请求阻塞，影响系统可用性。另外，悲观锁使用不当还可能产生死锁的情况。\n\n3. 基于乐观锁实现\n\n   设置version字段，控制版本，每次使用前查询，使用后根据version值更新version+1，如果更新影响行数为0说明资源已经被修改了。乐观锁适合并发量不高的情况，并发量高会大量更新，增加数据库压力。\n\n### 2. 基于缓存\n\n1. 基于redis\n\n   加锁实际上就是在redis中，给Key键设置一个值，为避免死锁，并给定一个过期时间。\n\n   ```\n   SET lock_key random_value NX PX 5000\n   值得注意的是：\n    `random_value` 是客户端生成的唯一的字符串\n    `NX` 代表只在键不存在时，才对键进行设置操作\n    `PX 5000` 设置键的过期时间为5000毫秒\n   ```\n\n   这样，如果上面的命令执行成功，则证明客户端获取到了锁。删除key即释放锁。主要缺点是锁不具有重入性，主从集群时，主还未同步就挂掉，此时从会变为主，此时仍可以获取锁。\n\n2. 基于redisson\n\n   内部是hash结构，通过keyName来判断锁存不存在，不存在设置值和过期时间加锁成功，如果已存在判断是否为当前线程，不是当前线程失败，是当前线程则计数加1(可重入实现)。加锁和解锁都是通过lua脚本代码来实现的。\n\n   ```java\n   //redisson github地址：https://github.com/redisson/redisson\n   public static void main(String[] args) {\n       Config config = new Config();\n       config.useSingleServer().setAddress(\"redis://127.0.0.1:6379\");\n       config.useSingleServer().setPassword(\"redis1234\");\n       final RedissonClient client = Redisson.create(config);  \n       RLock lock = client.getLock(\"lock1\");\n       try{\n           lock.lock();\n       }finally{\n           lock.unlock();\n       }\n   }\n   ```\n\n### 3. 基于zookeeper\n\n创建临时有序节点，每个线程均能创建节点成功，但是其序号不同，只有序号最小的可以拥有锁，其它线程只需要监听比自己序号小的节点状态即可。可以通过curator框架来实现。\n\n基本思路如下:\n\n1. 在你指定的节点下创建一个锁目录lock\n\n2. 线程X进来获取锁在lock目录下，并创建临时有序节点\n\n3. 线程X获取lock目录下所有子节点，并获取比自己小的兄弟节点，如果不存在比自己小的节点，说明当前线程序号最小，顺利获取锁\n\n4. 此时线程Y进来创建临时节点并获取兄弟节点 ，判断自己是否为最小序号节点，发现不是，于是设置监听（watch）比自己小的节点（这里是为了发生上面说的羊群效应）\n\n5. 线程X执行完逻辑，删除自己的节点，线程Y监听到节点有变化，进一步判断自己是已经是最小节点，顺利获取锁","source":"_posts/分布式锁.md","raw":"---\ntitle: \"分布式锁实现方式\"\nid: 1098\ncategories:\n  - 分布式\ndate: 2020-04-23 20:17:01\ntags: 分布式\n---\n## 分布式锁实现方式\n\n### 1.基于数据库\n\n创建一个专门的锁表，通过操作数据来实现。基于数据库的锁性能相对较差，一般都是首先排除的方案，必要才用。\n\n1. 基于唯一索引实现\n\n   以方法名为唯一索引，每次使用时插入，结束时删除，当无法插入时表示有人占有锁。这种方案的问题是服务挂掉可能数据一直存在，导致锁一直没有删除释放，需要定时清理。\n\n2. 基于悲观锁实现\n\n   通过悲观锁查询一条记录锁定，当其他线程查询时必须block等待，等待超时则失败(InnoDb默认等待时间50s，innodb_lock_wait_timeout设置事务锁超时时间)。悲观锁可以严格保证数据访问的安全。但是缺点也明显，即每次请求都会额外产生加锁的开销且未获取到锁的请求将会阻塞等待锁的获取，在高并发环境下，容易造成大量请求阻塞，影响系统可用性。另外，悲观锁使用不当还可能产生死锁的情况。\n\n3. 基于乐观锁实现\n\n   设置version字段，控制版本，每次使用前查询，使用后根据version值更新version+1，如果更新影响行数为0说明资源已经被修改了。乐观锁适合并发量不高的情况，并发量高会大量更新，增加数据库压力。\n\n### 2. 基于缓存\n\n1. 基于redis\n\n   加锁实际上就是在redis中，给Key键设置一个值，为避免死锁，并给定一个过期时间。\n\n   ```\n   SET lock_key random_value NX PX 5000\n   值得注意的是：\n    `random_value` 是客户端生成的唯一的字符串\n    `NX` 代表只在键不存在时，才对键进行设置操作\n    `PX 5000` 设置键的过期时间为5000毫秒\n   ```\n\n   这样，如果上面的命令执行成功，则证明客户端获取到了锁。删除key即释放锁。主要缺点是锁不具有重入性，主从集群时，主还未同步就挂掉，此时从会变为主，此时仍可以获取锁。\n\n2. 基于redisson\n\n   内部是hash结构，通过keyName来判断锁存不存在，不存在设置值和过期时间加锁成功，如果已存在判断是否为当前线程，不是当前线程失败，是当前线程则计数加1(可重入实现)。加锁和解锁都是通过lua脚本代码来实现的。\n\n   ```java\n   //redisson github地址：https://github.com/redisson/redisson\n   public static void main(String[] args) {\n       Config config = new Config();\n       config.useSingleServer().setAddress(\"redis://127.0.0.1:6379\");\n       config.useSingleServer().setPassword(\"redis1234\");\n       final RedissonClient client = Redisson.create(config);  \n       RLock lock = client.getLock(\"lock1\");\n       try{\n           lock.lock();\n       }finally{\n           lock.unlock();\n       }\n   }\n   ```\n\n### 3. 基于zookeeper\n\n创建临时有序节点，每个线程均能创建节点成功，但是其序号不同，只有序号最小的可以拥有锁，其它线程只需要监听比自己序号小的节点状态即可。可以通过curator框架来实现。\n\n基本思路如下:\n\n1. 在你指定的节点下创建一个锁目录lock\n\n2. 线程X进来获取锁在lock目录下，并创建临时有序节点\n\n3. 线程X获取lock目录下所有子节点，并获取比自己小的兄弟节点，如果不存在比自己小的节点，说明当前线程序号最小，顺利获取锁\n\n4. 此时线程Y进来创建临时节点并获取兄弟节点 ，判断自己是否为最小序号节点，发现不是，于是设置监听（watch）比自己小的节点（这里是为了发生上面说的羊群效应）\n\n5. 线程X执行完逻辑，删除自己的节点，线程Y监听到节点有变化，进一步判断自己是已经是最小节点，顺利获取锁","slug":"分布式锁","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7vi002dv8gp9f4m2l4q","content":"<h2 id=\"分布式锁实现方式\"><a href=\"#分布式锁实现方式\" class=\"headerlink\" title=\"分布式锁实现方式\"></a>分布式锁实现方式</h2><h3 id=\"1-基于数据库\"><a href=\"#1-基于数据库\" class=\"headerlink\" title=\"1.基于数据库\"></a>1.基于数据库</h3><p>创建一个专门的锁表，通过操作数据来实现。基于数据库的锁性能相对较差，一般都是首先排除的方案，必要才用。</p>\n<ol>\n<li><p>基于唯一索引实现</p>\n<p>以方法名为唯一索引，每次使用时插入，结束时删除，当无法插入时表示有人占有锁。这种方案的问题是服务挂掉可能数据一直存在，导致锁一直没有删除释放，需要定时清理。</p>\n</li>\n<li><p>基于悲观锁实现</p>\n<p>通过悲观锁查询一条记录锁定，当其他线程查询时必须block等待，等待超时则失败(InnoDb默认等待时间50s，innodb_lock_wait_timeout设置事务锁超时时间)。悲观锁可以严格保证数据访问的安全。但是缺点也明显，即每次请求都会额外产生加锁的开销且未获取到锁的请求将会阻塞等待锁的获取，在高并发环境下，容易造成大量请求阻塞，影响系统可用性。另外，悲观锁使用不当还可能产生死锁的情况。</p>\n</li>\n<li><p>基于乐观锁实现</p>\n<p>设置version字段，控制版本，每次使用前查询，使用后根据version值更新version+1，如果更新影响行数为0说明资源已经被修改了。乐观锁适合并发量不高的情况，并发量高会大量更新，增加数据库压力。</p>\n</li>\n</ol>\n<h3 id=\"2-基于缓存\"><a href=\"#2-基于缓存\" class=\"headerlink\" title=\"2. 基于缓存\"></a>2. 基于缓存</h3><ol>\n<li><p>基于redis</p>\n<p>加锁实际上就是在redis中，给Key键设置一个值，为避免死锁，并给定一个过期时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET lock_key random_value NX PX 5000</span><br><span class=\"line\">值得注意的是：</span><br><span class=\"line\"> &#96;random_value&#96; 是客户端生成的唯一的字符串</span><br><span class=\"line\"> &#96;NX&#96; 代表只在键不存在时，才对键进行设置操作</span><br><span class=\"line\"> &#96;PX 5000&#96; 设置键的过期时间为5000毫秒</span><br></pre></td></tr></table></figure>\n\n<p>这样，如果上面的命令执行成功，则证明客户端获取到了锁。删除key即释放锁。主要缺点是锁不具有重入性，主从集群时，主还未同步就挂掉，此时从会变为主，此时仍可以获取锁。</p>\n</li>\n<li><p>基于redisson</p>\n<p>内部是hash结构，通过keyName来判断锁存不存在，不存在设置值和过期时间加锁成功，如果已存在判断是否为当前线程，不是当前线程失败，是当前线程则计数加1(可重入实现)。加锁和解锁都是通过lua脚本代码来实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//redisson github地址：https://github.com/redisson/redisson</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">    config.useSingleServer().setAddress(<span class=\"string\">\"redis://127.0.0.1:6379\"</span>);</span><br><span class=\"line\">    config.useSingleServer().setPassword(<span class=\"string\">\"redis1234\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> RedissonClient client = Redisson.create(config);  </span><br><span class=\"line\">    RLock lock = client.getLock(<span class=\"string\">\"lock1\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"3-基于zookeeper\"><a href=\"#3-基于zookeeper\" class=\"headerlink\" title=\"3. 基于zookeeper\"></a>3. 基于zookeeper</h3><p>创建临时有序节点，每个线程均能创建节点成功，但是其序号不同，只有序号最小的可以拥有锁，其它线程只需要监听比自己序号小的节点状态即可。可以通过curator框架来实现。</p>\n<p>基本思路如下:</p>\n<ol>\n<li><p>在你指定的节点下创建一个锁目录lock</p>\n</li>\n<li><p>线程X进来获取锁在lock目录下，并创建临时有序节点</p>\n</li>\n<li><p>线程X获取lock目录下所有子节点，并获取比自己小的兄弟节点，如果不存在比自己小的节点，说明当前线程序号最小，顺利获取锁</p>\n</li>\n<li><p>此时线程Y进来创建临时节点并获取兄弟节点 ，判断自己是否为最小序号节点，发现不是，于是设置监听（watch）比自己小的节点（这里是为了发生上面说的羊群效应）</p>\n</li>\n<li><p>线程X执行完逻辑，删除自己的节点，线程Y监听到节点有变化，进一步判断自己是已经是最小节点，顺利获取锁</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分布式锁实现方式\"><a href=\"#分布式锁实现方式\" class=\"headerlink\" title=\"分布式锁实现方式\"></a>分布式锁实现方式</h2><h3 id=\"1-基于数据库\"><a href=\"#1-基于数据库\" class=\"headerlink\" title=\"1.基于数据库\"></a>1.基于数据库</h3><p>创建一个专门的锁表，通过操作数据来实现。基于数据库的锁性能相对较差，一般都是首先排除的方案，必要才用。</p>\n<ol>\n<li><p>基于唯一索引实现</p>\n<p>以方法名为唯一索引，每次使用时插入，结束时删除，当无法插入时表示有人占有锁。这种方案的问题是服务挂掉可能数据一直存在，导致锁一直没有删除释放，需要定时清理。</p>\n</li>\n<li><p>基于悲观锁实现</p>\n<p>通过悲观锁查询一条记录锁定，当其他线程查询时必须block等待，等待超时则失败(InnoDb默认等待时间50s，innodb_lock_wait_timeout设置事务锁超时时间)。悲观锁可以严格保证数据访问的安全。但是缺点也明显，即每次请求都会额外产生加锁的开销且未获取到锁的请求将会阻塞等待锁的获取，在高并发环境下，容易造成大量请求阻塞，影响系统可用性。另外，悲观锁使用不当还可能产生死锁的情况。</p>\n</li>\n<li><p>基于乐观锁实现</p>\n<p>设置version字段，控制版本，每次使用前查询，使用后根据version值更新version+1，如果更新影响行数为0说明资源已经被修改了。乐观锁适合并发量不高的情况，并发量高会大量更新，增加数据库压力。</p>\n</li>\n</ol>\n<h3 id=\"2-基于缓存\"><a href=\"#2-基于缓存\" class=\"headerlink\" title=\"2. 基于缓存\"></a>2. 基于缓存</h3><ol>\n<li><p>基于redis</p>\n<p>加锁实际上就是在redis中，给Key键设置一个值，为避免死锁，并给定一个过期时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET lock_key random_value NX PX 5000</span><br><span class=\"line\">值得注意的是：</span><br><span class=\"line\"> &#96;random_value&#96; 是客户端生成的唯一的字符串</span><br><span class=\"line\"> &#96;NX&#96; 代表只在键不存在时，才对键进行设置操作</span><br><span class=\"line\"> &#96;PX 5000&#96; 设置键的过期时间为5000毫秒</span><br></pre></td></tr></table></figure>\n\n<p>这样，如果上面的命令执行成功，则证明客户端获取到了锁。删除key即释放锁。主要缺点是锁不具有重入性，主从集群时，主还未同步就挂掉，此时从会变为主，此时仍可以获取锁。</p>\n</li>\n<li><p>基于redisson</p>\n<p>内部是hash结构，通过keyName来判断锁存不存在，不存在设置值和过期时间加锁成功，如果已存在判断是否为当前线程，不是当前线程失败，是当前线程则计数加1(可重入实现)。加锁和解锁都是通过lua脚本代码来实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//redisson github地址：https://github.com/redisson/redisson</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">    config.useSingleServer().setAddress(<span class=\"string\">\"redis://127.0.0.1:6379\"</span>);</span><br><span class=\"line\">    config.useSingleServer().setPassword(<span class=\"string\">\"redis1234\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> RedissonClient client = Redisson.create(config);  </span><br><span class=\"line\">    RLock lock = client.getLock(<span class=\"string\">\"lock1\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"3-基于zookeeper\"><a href=\"#3-基于zookeeper\" class=\"headerlink\" title=\"3. 基于zookeeper\"></a>3. 基于zookeeper</h3><p>创建临时有序节点，每个线程均能创建节点成功，但是其序号不同，只有序号最小的可以拥有锁，其它线程只需要监听比自己序号小的节点状态即可。可以通过curator框架来实现。</p>\n<p>基本思路如下:</p>\n<ol>\n<li><p>在你指定的节点下创建一个锁目录lock</p>\n</li>\n<li><p>线程X进来获取锁在lock目录下，并创建临时有序节点</p>\n</li>\n<li><p>线程X获取lock目录下所有子节点，并获取比自己小的兄弟节点，如果不存在比自己小的节点，说明当前线程序号最小，顺利获取锁</p>\n</li>\n<li><p>此时线程Y进来创建临时节点并获取兄弟节点 ，判断自己是否为最小序号节点，发现不是，于是设置监听（watch）比自己小的节点（这里是为了发生上面说的羊群效应）</p>\n</li>\n<li><p>线程X执行完逻辑，删除自己的节点，线程Y监听到节点有变化，进一步判断自己是已经是最小节点，顺利获取锁</p>\n</li>\n</ol>\n"},{"title":"腾讯专有云解决方案--部分功能介绍","id":"111","date":"2018-09-10T06:17:01.000Z","_content":"# CMQ #\n## 简介 ##  \n\n腾讯云消息队列（Cloud Message Queue，CMQ）是一种分布式消息队列服务，它能够提供可靠的基于消息的异步通信机制，能够将分布式部署的不同应用（或同一应用的不同组件）之间的收发消息，存储在可靠有效的 CMQ 队列中，防止消息丢失。CMQ 支持多进程同时读写，收发互不干扰，无需各应用或组件始终处于运行状态。  \n\n## 对比RabbitMQ的优势 ##  \n\n+ CMQ-QPS优秀：在保证高可靠前提下，同等物理设备，CMQ 吞吐量优于RabbitMQ的四倍以上。单集群QPS超过10万。\n+ RabbitMQ不支持消息回溯：rabbitMQ不支持消息回溯，CMQ支持按照时间来回溯消息，例如从一天之前的某时某分某秒开始重新消费消息。典型业务场景如consumer做订单分析，但是由于程序逻辑或者依赖的系统发生故障等原因，导致今天消费的消息全部无效，需要重新从昨天零点开始消费，那么以时间为起点的消息重放功能对于业务非常有帮助。\n+ 一致性算法对比：CMQ 和 RabbitMQ 都能够使用多台机器进行热备份，提高可用性。CMQ 基于 Raft 算法实现，简单易维护。RabbitMQ 使用自创的GM算法（Guaranteed Multicast），学习难度较高。\n+ RabbitMQ运维难度大：RabbitMQ的开发语言用的是erlang，较小众、学习成本高。  \n\n## 两种模型 ##\n+ 消息队列模型(Queue) \npoint to point，消息生产者生产消息发送到queue中，消息消费者从queue中取出并且消费消息。\n+ 消息主题模型(Topic) \n发布订阅，消息生产者生产消息发布到Topic，Topic投递到各个订阅者(CMQ支持标签筛选)。 CMQ支持通过 URL、Queue 订阅，目前只允许Topic发送给同一个账户下的Queue。\n\n## 消息生命周期 ##\n![Message lifecycle](/imgs/msglive.jpg)\n1. Component 1 将 Message A 发送到一个队列，该消息在CMQ服务器间提供多份冗余, Message A 是 Active状态。\n\n2. 当 Component 2 准备好处理消息时，就从队列检索消息，然后 Message A 返回，此时 Message A 是 Inactive 状态，仍然停留在队列中，但其他业务不可获取。 \n\n3. Component 2 可从队列删除 Message A，此时 Message A 为 Deleted 状态，消息的最长存活时间由创建队列时指定的 MessageRetentionPeriod 属性值决定，超过此时间后消息状态变成 Expired 并将被回收。 如果Component 2 未进行删除，在取出消息隐藏时长(VisibilityTimeout) 后该消息会被再次接受并处理。  \n\nCMQ可以支持消息回溯，在消息未被彻底回收，都可以回溯到之前的一个时间点，以消息生产的时间为排序标准。\n![Message Rewind](/imgs/MsgRewind.jpg)\n\n## CMQ Demo ##\n官网案例: https://cloud.tencent.com/document/product/406/6127\nGithub: \n\n# DCDB #\n## 简介 ##\nDCDB是部署在腾讯云公有云上的一种支持自动水平拆分的share nothing架构的分布式数据库。分布式数据库即业务获取是完整的逻辑库表，后端却将库表均匀的拆分到多个物理分片节点。目前，DCDB默认部署主备架构且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，适用于TB或PB级的海量数据库场景。\n\n## 优点 ##\n+ 超高性能：单分片最大性能可达超 24 万 QPS，整个实例性能随着分片数量增加线性扩展。强同步性能与异步同步相当，能让您在数据不丢失的情况下，也拥有较高的性能。\n+ 专业可靠：提供完善的数据备份、容灾、一键升级等方案。完善的监控和报警体系，大部分故障都通过自动化程序或腾讯值班同事处理恢复。分布式数据库领域领先功能，如分布式多表 JOIN，小表广播，分布式事务，SQL 透传等。\n+ 简单易用：除少量语法与原生 MySQL/PostgreSQL 不同以外，使用起来就像使用单机数据库，分片过程对业务透明且无需干预。兼容 MySQL 协议（支持 Percona、MariaDB 等内核）。支持 WEB 控制台，读写分离能力、专有运维管理指令等。\n\n## DCDB简单原理 ##\n1. 水平拆分\n   水平切分是按照某种规则，将一个表的数据分散到多个物理独立的数据库服务器中，这些“独立”的数据库“分片”；多个分片组成一个逻辑完整的数据库实例。\n![split horizon](/imgs/DBCB-1.png)\n> shardkey，建表默认需要设置shardkey，对于shardkey的选择有两点：\n> 1. 主键以及所有唯一索引的一部分\n> 2. 建议选择业务特点和数据库中每张表里实体关系，找到一个与大多数表都相关的实体字段作为shardkey。  \n\n2. 数据聚合（合并）\n![Data aggregation](/imgs/DBCB-2.png)\n> 各个set(物理分片)数据会在proxy层进行缓存，然后进行聚合。\n> 在执行 SELECT 语句时，建议您带上 shardkey 字段，否则会导致数据需要全表扫描然后网关才对执行结果进行聚合。全表扫描响应较慢，对性能影响很大。  \n\n3. 读写分离\n   读写分离 基本的原理是让主节点 (master) 处理事务性增、改、删操作（INSERT、UPDATE、DELETE），让从节点 (slave) 处理查询操作（SELECT）。\n![Separation of reading and writing](/imgs/DBCB-3.png)\n\n\n# TSF #\n## 简介 ##\nTencent Distributed Service Framework，腾讯分布式服务框架。是一个围绕着应用和微服务的 PaaS平台。TSF 提供了 RESTful 调用方式和自研的高性能 RPC 框架，能够构建高可用、高性能的分布式系统。在TSF 控制台上，可以一站式完成应用生命周期的管理，包括创建、部署、启动、停止，也支持扩容、缩容操作。监控服务器资源的磁盘IO、内存、CPU、网络等指标，以监控图标形式展示，精准掌控服务器健康状况。支持设置自定义告警阈值，当指标触发告警条件时，会向您发送及时的告警信息，预防突发情况。\n> PaaS是Platform-as-a-Service的缩写，意思是平台即服务。 把服务器平台作为一种服务提供的商业模式。)\n\n## 产品优势 ##\n![TSF advantage](/imgs/TSF.JPG)\n\n## TSF分布式事务 ##\nTSF提供基于TCC(try-confirm-cancel)的事务方案。\n\nTCC 模式的事务执行流程：\n1. 依次调用从业务系统的 Try 接口\n2. 若 Try 阶段成功，则依次调用从业务系统的 Confirm 接口\n3. 若在 Try 阶段出现失败，则调用从业务系统的 Cancel 接口，对 Try 接口的操作进行恢复\n4. 若在 Confirm 阶段出现失败，则重试，设置重试次数。若重试仍然失败，则需要事后处理\n5. 若调用 Cancel 接口失败，也进行重试操作。\n![TCC](/imgs/TCC.jpg)\n> 如果Try A成功，Try B失败，则会Cancle A。\n> 如果confirm失败，一般是一直重试，重试时间间隔会越来越长。\n\n## TSF Demo ##\n官网案例: https://cloud.tencent.com/document/product/649/16619","source":"_posts/金融云.md","raw":"---\ntitle: \"腾讯专有云解决方案--部分功能介绍\"\nid: 111\ncategories:\n  - Tencent financial cloud\ndate: 2018-09-10 14:17:01\ntags: financial cloud\n---\n# CMQ #\n## 简介 ##  \n\n腾讯云消息队列（Cloud Message Queue，CMQ）是一种分布式消息队列服务，它能够提供可靠的基于消息的异步通信机制，能够将分布式部署的不同应用（或同一应用的不同组件）之间的收发消息，存储在可靠有效的 CMQ 队列中，防止消息丢失。CMQ 支持多进程同时读写，收发互不干扰，无需各应用或组件始终处于运行状态。  \n\n## 对比RabbitMQ的优势 ##  \n\n+ CMQ-QPS优秀：在保证高可靠前提下，同等物理设备，CMQ 吞吐量优于RabbitMQ的四倍以上。单集群QPS超过10万。\n+ RabbitMQ不支持消息回溯：rabbitMQ不支持消息回溯，CMQ支持按照时间来回溯消息，例如从一天之前的某时某分某秒开始重新消费消息。典型业务场景如consumer做订单分析，但是由于程序逻辑或者依赖的系统发生故障等原因，导致今天消费的消息全部无效，需要重新从昨天零点开始消费，那么以时间为起点的消息重放功能对于业务非常有帮助。\n+ 一致性算法对比：CMQ 和 RabbitMQ 都能够使用多台机器进行热备份，提高可用性。CMQ 基于 Raft 算法实现，简单易维护。RabbitMQ 使用自创的GM算法（Guaranteed Multicast），学习难度较高。\n+ RabbitMQ运维难度大：RabbitMQ的开发语言用的是erlang，较小众、学习成本高。  \n\n## 两种模型 ##\n+ 消息队列模型(Queue) \npoint to point，消息生产者生产消息发送到queue中，消息消费者从queue中取出并且消费消息。\n+ 消息主题模型(Topic) \n发布订阅，消息生产者生产消息发布到Topic，Topic投递到各个订阅者(CMQ支持标签筛选)。 CMQ支持通过 URL、Queue 订阅，目前只允许Topic发送给同一个账户下的Queue。\n\n## 消息生命周期 ##\n![Message lifecycle](/imgs/msglive.jpg)\n1. Component 1 将 Message A 发送到一个队列，该消息在CMQ服务器间提供多份冗余, Message A 是 Active状态。\n\n2. 当 Component 2 准备好处理消息时，就从队列检索消息，然后 Message A 返回，此时 Message A 是 Inactive 状态，仍然停留在队列中，但其他业务不可获取。 \n\n3. Component 2 可从队列删除 Message A，此时 Message A 为 Deleted 状态，消息的最长存活时间由创建队列时指定的 MessageRetentionPeriod 属性值决定，超过此时间后消息状态变成 Expired 并将被回收。 如果Component 2 未进行删除，在取出消息隐藏时长(VisibilityTimeout) 后该消息会被再次接受并处理。  \n\nCMQ可以支持消息回溯，在消息未被彻底回收，都可以回溯到之前的一个时间点，以消息生产的时间为排序标准。\n![Message Rewind](/imgs/MsgRewind.jpg)\n\n## CMQ Demo ##\n官网案例: https://cloud.tencent.com/document/product/406/6127\nGithub: \n\n# DCDB #\n## 简介 ##\nDCDB是部署在腾讯云公有云上的一种支持自动水平拆分的share nothing架构的分布式数据库。分布式数据库即业务获取是完整的逻辑库表，后端却将库表均匀的拆分到多个物理分片节点。目前，DCDB默认部署主备架构且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，适用于TB或PB级的海量数据库场景。\n\n## 优点 ##\n+ 超高性能：单分片最大性能可达超 24 万 QPS，整个实例性能随着分片数量增加线性扩展。强同步性能与异步同步相当，能让您在数据不丢失的情况下，也拥有较高的性能。\n+ 专业可靠：提供完善的数据备份、容灾、一键升级等方案。完善的监控和报警体系，大部分故障都通过自动化程序或腾讯值班同事处理恢复。分布式数据库领域领先功能，如分布式多表 JOIN，小表广播，分布式事务，SQL 透传等。\n+ 简单易用：除少量语法与原生 MySQL/PostgreSQL 不同以外，使用起来就像使用单机数据库，分片过程对业务透明且无需干预。兼容 MySQL 协议（支持 Percona、MariaDB 等内核）。支持 WEB 控制台，读写分离能力、专有运维管理指令等。\n\n## DCDB简单原理 ##\n1. 水平拆分\n   水平切分是按照某种规则，将一个表的数据分散到多个物理独立的数据库服务器中，这些“独立”的数据库“分片”；多个分片组成一个逻辑完整的数据库实例。\n![split horizon](/imgs/DBCB-1.png)\n> shardkey，建表默认需要设置shardkey，对于shardkey的选择有两点：\n> 1. 主键以及所有唯一索引的一部分\n> 2. 建议选择业务特点和数据库中每张表里实体关系，找到一个与大多数表都相关的实体字段作为shardkey。  \n\n2. 数据聚合（合并）\n![Data aggregation](/imgs/DBCB-2.png)\n> 各个set(物理分片)数据会在proxy层进行缓存，然后进行聚合。\n> 在执行 SELECT 语句时，建议您带上 shardkey 字段，否则会导致数据需要全表扫描然后网关才对执行结果进行聚合。全表扫描响应较慢，对性能影响很大。  \n\n3. 读写分离\n   读写分离 基本的原理是让主节点 (master) 处理事务性增、改、删操作（INSERT、UPDATE、DELETE），让从节点 (slave) 处理查询操作（SELECT）。\n![Separation of reading and writing](/imgs/DBCB-3.png)\n\n\n# TSF #\n## 简介 ##\nTencent Distributed Service Framework，腾讯分布式服务框架。是一个围绕着应用和微服务的 PaaS平台。TSF 提供了 RESTful 调用方式和自研的高性能 RPC 框架，能够构建高可用、高性能的分布式系统。在TSF 控制台上，可以一站式完成应用生命周期的管理，包括创建、部署、启动、停止，也支持扩容、缩容操作。监控服务器资源的磁盘IO、内存、CPU、网络等指标，以监控图标形式展示，精准掌控服务器健康状况。支持设置自定义告警阈值，当指标触发告警条件时，会向您发送及时的告警信息，预防突发情况。\n> PaaS是Platform-as-a-Service的缩写，意思是平台即服务。 把服务器平台作为一种服务提供的商业模式。)\n\n## 产品优势 ##\n![TSF advantage](/imgs/TSF.JPG)\n\n## TSF分布式事务 ##\nTSF提供基于TCC(try-confirm-cancel)的事务方案。\n\nTCC 模式的事务执行流程：\n1. 依次调用从业务系统的 Try 接口\n2. 若 Try 阶段成功，则依次调用从业务系统的 Confirm 接口\n3. 若在 Try 阶段出现失败，则调用从业务系统的 Cancel 接口，对 Try 接口的操作进行恢复\n4. 若在 Confirm 阶段出现失败，则重试，设置重试次数。若重试仍然失败，则需要事后处理\n5. 若调用 Cancel 接口失败，也进行重试操作。\n![TCC](/imgs/TCC.jpg)\n> 如果Try A成功，Try B失败，则会Cancle A。\n> 如果confirm失败，一般是一直重试，重试时间间隔会越来越长。\n\n## TSF Demo ##\n官网案例: https://cloud.tencent.com/document/product/649/16619","slug":"金融云","published":1,"updated":"2020-04-27T09:49:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9tmg7vk002iv8gp6md6ft8r","content":"<h1 id=\"CMQ\"><a href=\"#CMQ\" class=\"headerlink\" title=\"CMQ\"></a>CMQ</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>腾讯云消息队列（Cloud Message Queue，CMQ）是一种分布式消息队列服务，它能够提供可靠的基于消息的异步通信机制，能够将分布式部署的不同应用（或同一应用的不同组件）之间的收发消息，存储在可靠有效的 CMQ 队列中，防止消息丢失。CMQ 支持多进程同时读写，收发互不干扰，无需各应用或组件始终处于运行状态。  </p>\n<h2 id=\"对比RabbitMQ的优势\"><a href=\"#对比RabbitMQ的优势\" class=\"headerlink\" title=\"对比RabbitMQ的优势\"></a>对比RabbitMQ的优势</h2><ul>\n<li>CMQ-QPS优秀：在保证高可靠前提下，同等物理设备，CMQ 吞吐量优于RabbitMQ的四倍以上。单集群QPS超过10万。</li>\n<li>RabbitMQ不支持消息回溯：rabbitMQ不支持消息回溯，CMQ支持按照时间来回溯消息，例如从一天之前的某时某分某秒开始重新消费消息。典型业务场景如consumer做订单分析，但是由于程序逻辑或者依赖的系统发生故障等原因，导致今天消费的消息全部无效，需要重新从昨天零点开始消费，那么以时间为起点的消息重放功能对于业务非常有帮助。</li>\n<li>一致性算法对比：CMQ 和 RabbitMQ 都能够使用多台机器进行热备份，提高可用性。CMQ 基于 Raft 算法实现，简单易维护。RabbitMQ 使用自创的GM算法（Guaranteed Multicast），学习难度较高。</li>\n<li>RabbitMQ运维难度大：RabbitMQ的开发语言用的是erlang，较小众、学习成本高。  </li>\n</ul>\n<h2 id=\"两种模型\"><a href=\"#两种模型\" class=\"headerlink\" title=\"两种模型\"></a>两种模型</h2><ul>\n<li>消息队列模型(Queue)<br>point to point，消息生产者生产消息发送到queue中，消息消费者从queue中取出并且消费消息。</li>\n<li>消息主题模型(Topic)<br>发布订阅，消息生产者生产消息发布到Topic，Topic投递到各个订阅者(CMQ支持标签筛选)。 CMQ支持通过 URL、Queue 订阅，目前只允许Topic发送给同一个账户下的Queue。</li>\n</ul>\n<h2 id=\"消息生命周期\"><a href=\"#消息生命周期\" class=\"headerlink\" title=\"消息生命周期\"></a>消息生命周期</h2><p><img src=\"/imgs/msglive.jpg\" alt=\"Message lifecycle\"></p>\n<ol>\n<li><p>Component 1 将 Message A 发送到一个队列，该消息在CMQ服务器间提供多份冗余, Message A 是 Active状态。</p>\n</li>\n<li><p>当 Component 2 准备好处理消息时，就从队列检索消息，然后 Message A 返回，此时 Message A 是 Inactive 状态，仍然停留在队列中，但其他业务不可获取。 </p>\n</li>\n<li><p>Component 2 可从队列删除 Message A，此时 Message A 为 Deleted 状态，消息的最长存活时间由创建队列时指定的 MessageRetentionPeriod 属性值决定，超过此时间后消息状态变成 Expired 并将被回收。 如果Component 2 未进行删除，在取出消息隐藏时长(VisibilityTimeout) 后该消息会被再次接受并处理。  </p>\n</li>\n</ol>\n<p>CMQ可以支持消息回溯，在消息未被彻底回收，都可以回溯到之前的一个时间点，以消息生产的时间为排序标准。<br><img src=\"/imgs/MsgRewind.jpg\" alt=\"Message Rewind\"></p>\n<h2 id=\"CMQ-Demo\"><a href=\"#CMQ-Demo\" class=\"headerlink\" title=\"CMQ Demo\"></a>CMQ Demo</h2><p>官网案例: <a href=\"https://cloud.tencent.com/document/product/406/6127\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/document/product/406/6127</a><br>Github: </p>\n<h1 id=\"DCDB\"><a href=\"#DCDB\" class=\"headerlink\" title=\"DCDB\"></a>DCDB</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>DCDB是部署在腾讯云公有云上的一种支持自动水平拆分的share nothing架构的分布式数据库。分布式数据库即业务获取是完整的逻辑库表，后端却将库表均匀的拆分到多个物理分片节点。目前，DCDB默认部署主备架构且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，适用于TB或PB级的海量数据库场景。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>超高性能：单分片最大性能可达超 24 万 QPS，整个实例性能随着分片数量增加线性扩展。强同步性能与异步同步相当，能让您在数据不丢失的情况下，也拥有较高的性能。</li>\n<li>专业可靠：提供完善的数据备份、容灾、一键升级等方案。完善的监控和报警体系，大部分故障都通过自动化程序或腾讯值班同事处理恢复。分布式数据库领域领先功能，如分布式多表 JOIN，小表广播，分布式事务，SQL 透传等。</li>\n<li>简单易用：除少量语法与原生 MySQL/PostgreSQL 不同以外，使用起来就像使用单机数据库，分片过程对业务透明且无需干预。兼容 MySQL 协议（支持 Percona、MariaDB 等内核）。支持 WEB 控制台，读写分离能力、专有运维管理指令等。</li>\n</ul>\n<h2 id=\"DCDB简单原理\"><a href=\"#DCDB简单原理\" class=\"headerlink\" title=\"DCDB简单原理\"></a>DCDB简单原理</h2><ol>\n<li><p>水平拆分<br>水平切分是按照某种规则，将一个表的数据分散到多个物理独立的数据库服务器中，这些“独立”的数据库“分片”；多个分片组成一个逻辑完整的数据库实例。<br><img src=\"/imgs/DBCB-1.png\" alt=\"split horizon\"></p>\n<blockquote>\n<p>shardkey，建表默认需要设置shardkey，对于shardkey的选择有两点：</p>\n<ol>\n<li>主键以及所有唯一索引的一部分</li>\n<li>建议选择业务特点和数据库中每张表里实体关系，找到一个与大多数表都相关的实体字段作为shardkey。  </li>\n</ol>\n</blockquote>\n</li>\n<li><p>数据聚合（合并）<br><img src=\"/imgs/DBCB-2.png\" alt=\"Data aggregation\"></p>\n<blockquote>\n<p>各个set(物理分片)数据会在proxy层进行缓存，然后进行聚合。<br>在执行 SELECT 语句时，建议您带上 shardkey 字段，否则会导致数据需要全表扫描然后网关才对执行结果进行聚合。全表扫描响应较慢，对性能影响很大。  </p>\n</blockquote>\n</li>\n<li><p>读写分离<br>读写分离 基本的原理是让主节点 (master) 处理事务性增、改、删操作（INSERT、UPDATE、DELETE），让从节点 (slave) 处理查询操作（SELECT）。<br><img src=\"/imgs/DBCB-3.png\" alt=\"Separation of reading and writing\"></p>\n</li>\n</ol>\n<h1 id=\"TSF\"><a href=\"#TSF\" class=\"headerlink\" title=\"TSF\"></a>TSF</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Tencent Distributed Service Framework，腾讯分布式服务框架。是一个围绕着应用和微服务的 PaaS平台。TSF 提供了 RESTful 调用方式和自研的高性能 RPC 框架，能够构建高可用、高性能的分布式系统。在TSF 控制台上，可以一站式完成应用生命周期的管理，包括创建、部署、启动、停止，也支持扩容、缩容操作。监控服务器资源的磁盘IO、内存、CPU、网络等指标，以监控图标形式展示，精准掌控服务器健康状况。支持设置自定义告警阈值，当指标触发告警条件时，会向您发送及时的告警信息，预防突发情况。</p>\n<blockquote>\n<p>PaaS是Platform-as-a-Service的缩写，意思是平台即服务。 把服务器平台作为一种服务提供的商业模式。)</p>\n</blockquote>\n<h2 id=\"产品优势\"><a href=\"#产品优势\" class=\"headerlink\" title=\"产品优势\"></a>产品优势</h2><p><img src=\"/imgs/TSF.JPG\" alt=\"TSF advantage\"></p>\n<h2 id=\"TSF分布式事务\"><a href=\"#TSF分布式事务\" class=\"headerlink\" title=\"TSF分布式事务\"></a>TSF分布式事务</h2><p>TSF提供基于TCC(try-confirm-cancel)的事务方案。</p>\n<p>TCC 模式的事务执行流程：</p>\n<ol>\n<li>依次调用从业务系统的 Try 接口</li>\n<li>若 Try 阶段成功，则依次调用从业务系统的 Confirm 接口</li>\n<li>若在 Try 阶段出现失败，则调用从业务系统的 Cancel 接口，对 Try 接口的操作进行恢复</li>\n<li>若在 Confirm 阶段出现失败，则重试，设置重试次数。若重试仍然失败，则需要事后处理</li>\n<li>若调用 Cancel 接口失败，也进行重试操作。<br><img src=\"/imgs/TCC.jpg\" alt=\"TCC\"><blockquote>\n<p>如果Try A成功，Try B失败，则会Cancle A。<br>如果confirm失败，一般是一直重试，重试时间间隔会越来越长。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"TSF-Demo\"><a href=\"#TSF-Demo\" class=\"headerlink\" title=\"TSF Demo\"></a>TSF Demo</h2><p>官网案例: <a href=\"https://cloud.tencent.com/document/product/649/16619\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/document/product/649/16619</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CMQ\"><a href=\"#CMQ\" class=\"headerlink\" title=\"CMQ\"></a>CMQ</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>腾讯云消息队列（Cloud Message Queue，CMQ）是一种分布式消息队列服务，它能够提供可靠的基于消息的异步通信机制，能够将分布式部署的不同应用（或同一应用的不同组件）之间的收发消息，存储在可靠有效的 CMQ 队列中，防止消息丢失。CMQ 支持多进程同时读写，收发互不干扰，无需各应用或组件始终处于运行状态。  </p>\n<h2 id=\"对比RabbitMQ的优势\"><a href=\"#对比RabbitMQ的优势\" class=\"headerlink\" title=\"对比RabbitMQ的优势\"></a>对比RabbitMQ的优势</h2><ul>\n<li>CMQ-QPS优秀：在保证高可靠前提下，同等物理设备，CMQ 吞吐量优于RabbitMQ的四倍以上。单集群QPS超过10万。</li>\n<li>RabbitMQ不支持消息回溯：rabbitMQ不支持消息回溯，CMQ支持按照时间来回溯消息，例如从一天之前的某时某分某秒开始重新消费消息。典型业务场景如consumer做订单分析，但是由于程序逻辑或者依赖的系统发生故障等原因，导致今天消费的消息全部无效，需要重新从昨天零点开始消费，那么以时间为起点的消息重放功能对于业务非常有帮助。</li>\n<li>一致性算法对比：CMQ 和 RabbitMQ 都能够使用多台机器进行热备份，提高可用性。CMQ 基于 Raft 算法实现，简单易维护。RabbitMQ 使用自创的GM算法（Guaranteed Multicast），学习难度较高。</li>\n<li>RabbitMQ运维难度大：RabbitMQ的开发语言用的是erlang，较小众、学习成本高。  </li>\n</ul>\n<h2 id=\"两种模型\"><a href=\"#两种模型\" class=\"headerlink\" title=\"两种模型\"></a>两种模型</h2><ul>\n<li>消息队列模型(Queue)<br>point to point，消息生产者生产消息发送到queue中，消息消费者从queue中取出并且消费消息。</li>\n<li>消息主题模型(Topic)<br>发布订阅，消息生产者生产消息发布到Topic，Topic投递到各个订阅者(CMQ支持标签筛选)。 CMQ支持通过 URL、Queue 订阅，目前只允许Topic发送给同一个账户下的Queue。</li>\n</ul>\n<h2 id=\"消息生命周期\"><a href=\"#消息生命周期\" class=\"headerlink\" title=\"消息生命周期\"></a>消息生命周期</h2><p><img src=\"/imgs/msglive.jpg\" alt=\"Message lifecycle\"></p>\n<ol>\n<li><p>Component 1 将 Message A 发送到一个队列，该消息在CMQ服务器间提供多份冗余, Message A 是 Active状态。</p>\n</li>\n<li><p>当 Component 2 准备好处理消息时，就从队列检索消息，然后 Message A 返回，此时 Message A 是 Inactive 状态，仍然停留在队列中，但其他业务不可获取。 </p>\n</li>\n<li><p>Component 2 可从队列删除 Message A，此时 Message A 为 Deleted 状态，消息的最长存活时间由创建队列时指定的 MessageRetentionPeriod 属性值决定，超过此时间后消息状态变成 Expired 并将被回收。 如果Component 2 未进行删除，在取出消息隐藏时长(VisibilityTimeout) 后该消息会被再次接受并处理。  </p>\n</li>\n</ol>\n<p>CMQ可以支持消息回溯，在消息未被彻底回收，都可以回溯到之前的一个时间点，以消息生产的时间为排序标准。<br><img src=\"/imgs/MsgRewind.jpg\" alt=\"Message Rewind\"></p>\n<h2 id=\"CMQ-Demo\"><a href=\"#CMQ-Demo\" class=\"headerlink\" title=\"CMQ Demo\"></a>CMQ Demo</h2><p>官网案例: <a href=\"https://cloud.tencent.com/document/product/406/6127\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/document/product/406/6127</a><br>Github: </p>\n<h1 id=\"DCDB\"><a href=\"#DCDB\" class=\"headerlink\" title=\"DCDB\"></a>DCDB</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>DCDB是部署在腾讯云公有云上的一种支持自动水平拆分的share nothing架构的分布式数据库。分布式数据库即业务获取是完整的逻辑库表，后端却将库表均匀的拆分到多个物理分片节点。目前，DCDB默认部署主备架构且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，适用于TB或PB级的海量数据库场景。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>超高性能：单分片最大性能可达超 24 万 QPS，整个实例性能随着分片数量增加线性扩展。强同步性能与异步同步相当，能让您在数据不丢失的情况下，也拥有较高的性能。</li>\n<li>专业可靠：提供完善的数据备份、容灾、一键升级等方案。完善的监控和报警体系，大部分故障都通过自动化程序或腾讯值班同事处理恢复。分布式数据库领域领先功能，如分布式多表 JOIN，小表广播，分布式事务，SQL 透传等。</li>\n<li>简单易用：除少量语法与原生 MySQL/PostgreSQL 不同以外，使用起来就像使用单机数据库，分片过程对业务透明且无需干预。兼容 MySQL 协议（支持 Percona、MariaDB 等内核）。支持 WEB 控制台，读写分离能力、专有运维管理指令等。</li>\n</ul>\n<h2 id=\"DCDB简单原理\"><a href=\"#DCDB简单原理\" class=\"headerlink\" title=\"DCDB简单原理\"></a>DCDB简单原理</h2><ol>\n<li><p>水平拆分<br>水平切分是按照某种规则，将一个表的数据分散到多个物理独立的数据库服务器中，这些“独立”的数据库“分片”；多个分片组成一个逻辑完整的数据库实例。<br><img src=\"/imgs/DBCB-1.png\" alt=\"split horizon\"></p>\n<blockquote>\n<p>shardkey，建表默认需要设置shardkey，对于shardkey的选择有两点：</p>\n<ol>\n<li>主键以及所有唯一索引的一部分</li>\n<li>建议选择业务特点和数据库中每张表里实体关系，找到一个与大多数表都相关的实体字段作为shardkey。  </li>\n</ol>\n</blockquote>\n</li>\n<li><p>数据聚合（合并）<br><img src=\"/imgs/DBCB-2.png\" alt=\"Data aggregation\"></p>\n<blockquote>\n<p>各个set(物理分片)数据会在proxy层进行缓存，然后进行聚合。<br>在执行 SELECT 语句时，建议您带上 shardkey 字段，否则会导致数据需要全表扫描然后网关才对执行结果进行聚合。全表扫描响应较慢，对性能影响很大。  </p>\n</blockquote>\n</li>\n<li><p>读写分离<br>读写分离 基本的原理是让主节点 (master) 处理事务性增、改、删操作（INSERT、UPDATE、DELETE），让从节点 (slave) 处理查询操作（SELECT）。<br><img src=\"/imgs/DBCB-3.png\" alt=\"Separation of reading and writing\"></p>\n</li>\n</ol>\n<h1 id=\"TSF\"><a href=\"#TSF\" class=\"headerlink\" title=\"TSF\"></a>TSF</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Tencent Distributed Service Framework，腾讯分布式服务框架。是一个围绕着应用和微服务的 PaaS平台。TSF 提供了 RESTful 调用方式和自研的高性能 RPC 框架，能够构建高可用、高性能的分布式系统。在TSF 控制台上，可以一站式完成应用生命周期的管理，包括创建、部署、启动、停止，也支持扩容、缩容操作。监控服务器资源的磁盘IO、内存、CPU、网络等指标，以监控图标形式展示，精准掌控服务器健康状况。支持设置自定义告警阈值，当指标触发告警条件时，会向您发送及时的告警信息，预防突发情况。</p>\n<blockquote>\n<p>PaaS是Platform-as-a-Service的缩写，意思是平台即服务。 把服务器平台作为一种服务提供的商业模式。)</p>\n</blockquote>\n<h2 id=\"产品优势\"><a href=\"#产品优势\" class=\"headerlink\" title=\"产品优势\"></a>产品优势</h2><p><img src=\"/imgs/TSF.JPG\" alt=\"TSF advantage\"></p>\n<h2 id=\"TSF分布式事务\"><a href=\"#TSF分布式事务\" class=\"headerlink\" title=\"TSF分布式事务\"></a>TSF分布式事务</h2><p>TSF提供基于TCC(try-confirm-cancel)的事务方案。</p>\n<p>TCC 模式的事务执行流程：</p>\n<ol>\n<li>依次调用从业务系统的 Try 接口</li>\n<li>若 Try 阶段成功，则依次调用从业务系统的 Confirm 接口</li>\n<li>若在 Try 阶段出现失败，则调用从业务系统的 Cancel 接口，对 Try 接口的操作进行恢复</li>\n<li>若在 Confirm 阶段出现失败，则重试，设置重试次数。若重试仍然失败，则需要事后处理</li>\n<li>若调用 Cancel 接口失败，也进行重试操作。<br><img src=\"/imgs/TCC.jpg\" alt=\"TCC\"><blockquote>\n<p>如果Try A成功，Try B失败，则会Cancle A。<br>如果confirm失败，一般是一直重试，重试时间间隔会越来越长。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"TSF-Demo\"><a href=\"#TSF-Demo\" class=\"headerlink\" title=\"TSF Demo\"></a>TSF Demo</h2><p>官网案例: <a href=\"https://cloud.tencent.com/document/product/649/16619\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/document/product/649/16619</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9tmg7tc0001v8gp8bbf4def","category_id":"ck9tmg7tm0004v8gp7q74en8b","_id":"ck9tmg7u4000iv8gpf94wel9a"},{"post_id":"ck9tmg7tv000bv8gp31wnbehs","category_id":"ck9tmg7tm0004v8gp7q74en8b","_id":"ck9tmg7u6000lv8gpeb7v9pyx"},{"post_id":"ck9tmg7tg0003v8gpaq9hcqre","category_id":"ck9tmg7tm0004v8gp7q74en8b","_id":"ck9tmg7u8000pv8gp73yf6g9m"},{"post_id":"ck9tmg7tq0007v8gph4cphgyw","category_id":"ck9tmg7tm0004v8gp7q74en8b","_id":"ck9tmg7ue000uv8gpg11lhnlo"},{"post_id":"ck9tmg7tt0009v8gp4yk557ji","category_id":"ck9tmg7u7000ov8gpclrcf2ju","_id":"ck9tmg7uk0010v8gpd1fjfmof"},{"post_id":"ck9tmg7ty000fv8gpgaqp1j97","category_id":"ck9tmg7uf000vv8gp6kxd9uck","_id":"ck9tmg7uq0016v8gpdxkmbhk8"},{"post_id":"ck9tmg7u3000gv8gpgx2gcp29","category_id":"ck9tmg7uk0011v8gpbrcxc35r","_id":"ck9tmg7ut001dv8gph3ux9q69"},{"post_id":"ck9tmg7u5000kv8gpc0s3g1fi","category_id":"ck9tmg7uk0011v8gpbrcxc35r","_id":"ck9tmg7ux001iv8gpesj6c3qx"},{"post_id":"ck9tmg7u7000nv8gpglfqers3","category_id":"ck9tmg7ut001cv8gp0nk37r7s","_id":"ck9tmg7v3001pv8gp4fvv99ir"},{"post_id":"ck9tmg7u9000rv8gp71zj77mi","category_id":"ck9tmg7uz001kv8gp4r9f0rx6","_id":"ck9tmg7v6001vv8gpg0bdachg"},{"post_id":"ck9tmg7ue000tv8gphava5ssg","category_id":"ck9tmg7v3001qv8gp0pby6tr8","_id":"ck9tmg7v90021v8gpdaoah2bd"},{"post_id":"ck9tmg7uh000xv8gpdtg97efs","category_id":"ck9tmg7v6001wv8gpc6ui1ji8","_id":"ck9tmg7vc0027v8gpcst903ef"},{"post_id":"ck9tmg7uj000zv8gp723l0sos","category_id":"ck9tmg7v90022v8gp4q7qdzrs","_id":"ck9tmg7vj002ev8gp4mww4nrx"},{"post_id":"ck9tmg7ul0013v8gpd9m60jfm","category_id":"ck9tmg7vf0029v8gphjlzah16","_id":"ck9tmg7vl002lv8gphkvwftor"},{"post_id":"ck9tmg7up0015v8gp6p8j6t4i","category_id":"ck9tmg7vf0029v8gphjlzah16","_id":"ck9tmg7vl002ov8gp0iqm1e9l"},{"post_id":"ck9tmg7ur0019v8gpdggpbe9i","category_id":"ck9tmg7vl002kv8gp4uku8tlp","_id":"ck9tmg7vm002sv8gpgsec4orh"},{"post_id":"ck9tmg7us001bv8gp6lv369oz","category_id":"ck9tmg7vl002pv8gpgk1bfepc","_id":"ck9tmg7vn002wv8gp80ykfstw"},{"post_id":"ck9tmg7uu001ev8gp7fm8b90g","category_id":"ck9tmg7vm002tv8gpedtle6r2","_id":"ck9tmg7vp0031v8gpal8u1hty"},{"post_id":"ck9tmg7uv001hv8gp40jv6exi","category_id":"ck9tmg7vl002kv8gp4uku8tlp","_id":"ck9tmg7vp0034v8gp1v92gdiq"},{"post_id":"ck9tmg7uy001jv8gp5f44fcwl","category_id":"ck9tmg7vo0030v8gp2eb6dv86","_id":"ck9tmg7vq0039v8gp75e49c0p"},{"post_id":"ck9tmg7v0001mv8gp9f6hg98o","category_id":"ck9tmg7vo0030v8gp2eb6dv86","_id":"ck9tmg7vr003cv8gp36m1fzvo"},{"post_id":"ck9tmg7v2001ov8gp4zy4azoj","category_id":"ck9tmg7vq0038v8gp5fhfa2do","_id":"ck9tmg7vr003fv8gpdnf0fufm"},{"post_id":"ck9tmg7v3001sv8gpca480aea","category_id":"ck9tmg7vr003dv8gp0zez31c7","_id":"ck9tmg7vs003hv8gp85hxa8qj"},{"post_id":"ck9tmg7v5001uv8gpa4c3g8rj","category_id":"ck9tmg7vr003gv8gpdfly17d4","_id":"ck9tmg7vt003kv8gp3yenbsee"},{"post_id":"ck9tmg7v7001yv8gp9p9w1fh0","category_id":"ck9tmg7vr003gv8gpdfly17d4","_id":"ck9tmg7vt003lv8gp655aa7w9"},{"post_id":"ck9tmg7v80020v8gpg3k0bksk","category_id":"ck9tmg7vs003jv8gpfoelbamr","_id":"ck9tmg7vv003ov8gp5mqhh5g6"},{"post_id":"ck9tmg7v90023v8gp4rcpc4rg","category_id":"ck9tmg7vr003gv8gpdfly17d4","_id":"ck9tmg7vw003qv8gpbf51cjtf"},{"post_id":"ck9tmg7vb0026v8gp4tnx4b21","category_id":"ck9tmg7vr003gv8gpdfly17d4","_id":"ck9tmg7vw003rv8gpf2gd6f53"},{"post_id":"ck9tmg7vc0028v8gp1jus6jtq","category_id":"ck9tmg7vv003pv8gpcfkr8q7r","_id":"ck9tmg7vx003tv8gpc3tu5p7f"},{"post_id":"ck9tmg7vg002bv8gpgqfa0p5o","category_id":"ck9tmg7vw003sv8gpfw1uedzx","_id":"ck9tmg7vy003vv8gpgvxacpg7"},{"post_id":"ck9tmg7vi002dv8gp9f4m2l4q","category_id":"ck9tmg7vx003uv8gp10qh0wao","_id":"ck9tmg7vy003xv8gp2xse9icq"},{"post_id":"ck9tmg7vk002iv8gp6md6ft8r","category_id":"ck9tmg7vy003wv8gpcc9gdigm","_id":"ck9tmg7vy003yv8gpdcjweshw"}],"PostTag":[{"post_id":"ck9tmg7tc0001v8gp8bbf4def","tag_id":"ck9tmg7to0005v8gp0f99cvuy","_id":"ck9tmg7ty000ev8gpdh3270jh"},{"post_id":"ck9tmg7tg0003v8gpaq9hcqre","tag_id":"ck9tmg7tw000dv8gpeo7z9kv3","_id":"ck9tmg7u6000mv8gp1v8a2khj"},{"post_id":"ck9tmg7tq0007v8gph4cphgyw","tag_id":"ck9tmg7tw000dv8gpeo7z9kv3","_id":"ck9tmg7ud000sv8gp7l6vae1b"},{"post_id":"ck9tmg7tt0009v8gp4yk557ji","tag_id":"ck9tmg7u8000qv8gp52pmepel","_id":"ck9tmg7ui000yv8gpgeu50msb"},{"post_id":"ck9tmg7tv000bv8gp31wnbehs","tag_id":"ck9tmg7tw000dv8gpeo7z9kv3","_id":"ck9tmg7up0014v8gp7orzfzo2"},{"post_id":"ck9tmg7ty000fv8gpgaqp1j97","tag_id":"ck9tmg7uk0012v8gp3e4j7eg4","_id":"ck9tmg7us001av8gp1u9q699w"},{"post_id":"ck9tmg7u3000gv8gpgx2gcp29","tag_id":"ck9tmg7uq0018v8gph3k1h1zp","_id":"ck9tmg7uv001gv8gp3yyoh6wp"},{"post_id":"ck9tmg7u7000nv8gpglfqers3","tag_id":"ck9tmg7uu001fv8gpg1ev0621","_id":"ck9tmg7v1001nv8gp3kyjgye4"},{"post_id":"ck9tmg7ue000tv8gphava5ssg","tag_id":"ck9tmg7v0001lv8gp1o45fs3c","_id":"ck9tmg7v5001tv8gpdu35276l"},{"post_id":"ck9tmg7uj000zv8gp723l0sos","tag_id":"ck9tmg7v3001rv8gpg694eyri","_id":"ck9tmg7v8001zv8gp3bvx2dst"},{"post_id":"ck9tmg7ul0013v8gpd9m60jfm","tag_id":"ck9tmg7v7001xv8gp0uv38kgp","_id":"ck9tmg7vb0025v8gpc41x0hqt"},{"post_id":"ck9tmg7up0015v8gp6p8j6t4i","tag_id":"ck9tmg7va0024v8gpd70bdsfo","_id":"ck9tmg7vh002cv8gp5qde8mtj"},{"post_id":"ck9tmg7vg002bv8gpgqfa0p5o","tag_id":"ck9tmg7va0024v8gpd70bdsfo","_id":"ck9tmg7vj002hv8gp56rtgp4x"},{"post_id":"ck9tmg7ur0019v8gpdggpbe9i","tag_id":"ck9tmg7vg002av8gp7ltj89sj","_id":"ck9tmg7vk002jv8gpb0g78yxv"},{"post_id":"ck9tmg7us001bv8gp6lv369oz","tag_id":"ck9tmg7vj002gv8gphhq3045a","_id":"ck9tmg7vl002nv8gp36833ysl"},{"post_id":"ck9tmg7uu001ev8gp7fm8b90g","tag_id":"ck9tmg7vl002mv8gpdjchavol","_id":"ck9tmg7vm002rv8gp65qn6wit"},{"post_id":"ck9tmg7uv001hv8gp40jv6exi","tag_id":"ck9tmg7vg002av8gp7ltj89sj","_id":"ck9tmg7vn002vv8gpbf8dansb"},{"post_id":"ck9tmg7v3001sv8gpca480aea","tag_id":"ck9tmg7vn002uv8gp86548ebv","_id":"ck9tmg7vo002zv8gp4o0jac4z"},{"post_id":"ck9tmg7v80020v8gpg3k0bksk","tag_id":"ck9tmg7vo002yv8gpdu1nbifz","_id":"ck9tmg7vp0033v8gp73xl7bd8"},{"post_id":"ck9tmg7vc0028v8gp1jus6jtq","tag_id":"ck9tmg7vp0032v8gp3ekx873o","_id":"ck9tmg7vq0037v8gp8el0diou"},{"post_id":"ck9tmg7vi002dv8gp9f4m2l4q","tag_id":"ck9tmg7vq0036v8gp2wlw40px","_id":"ck9tmg7vr003bv8gp4rmtfxcq"},{"post_id":"ck9tmg7vk002iv8gp6md6ft8r","tag_id":"ck9tmg7vq003av8gp3otifyj9","_id":"ck9tmg7vr003ev8gp2hwo30ll"}],"Tag":[{"name":"Docker","_id":"ck9tmg7to0005v8gp0f99cvuy"},{"name":"docker","_id":"ck9tmg7tw000dv8gpeo7z9kv3"},{"name":"QLExpress","_id":"ck9tmg7u8000qv8gp52pmepel"},{"name":"Wechat-Public-Manage","_id":"ck9tmg7uk0012v8gp3e4j7eg4"},{"name":"CentOS","_id":"ck9tmg7uq0018v8gph3k1h1zp"},{"name":"数据结构","_id":"ck9tmg7uu001fv8gpg1ev0621"},{"name":"spring cloud","_id":"ck9tmg7v0001lv8gp1o45fs3c"},{"name":"Essay","_id":"ck9tmg7v3001rv8gpg694eyri"},{"name":"java基础","_id":"ck9tmg7v7001xv8gp0uv38kgp"},{"name":"java","_id":"ck9tmg7va0024v8gpd70bdsfo"},{"name":"java多线程与高并发","_id":"ck9tmg7vg002av8gp7ltj89sj"},{"name":"lombok","_id":"ck9tmg7vj002gv8gphhq3045a"},{"name":"nginx","_id":"ck9tmg7vl002mv8gpdjchavol"},{"name":"others","_id":"ck9tmg7vn002uv8gp86548ebv"},{"name":"微信，小程序","_id":"ck9tmg7vo002yv8gpdu1nbifz"},{"name":"idea插件","_id":"ck9tmg7vp0032v8gp3ekx873o"},{"name":"分布式","_id":"ck9tmg7vq0036v8gp2wlw40px"},{"name":"financial cloud","_id":"ck9tmg7vq003av8gp3otifyj9"}]}}