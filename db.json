{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/bootstrap-hover-dropdown.min.js","path":"js/bootstrap-hover-dropdown.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/touxiang.jpg","path":"touxiang.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/gal/source/css/aos.css","path":"css/aos.css","modified":0,"renderable":1},{"_id":"themes/gal/source/js/activate-power-mode.js","path":"js/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/hs.js","path":"js/hs.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/aos.js","path":"js/aos.js","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/mouse2.cur","path":"imgs/mouse2.cur","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/mouse1.cur","path":"imgs/mouse1.cur","modified":0,"renderable":1},{"_id":"themes/gal/source/js/oni.js","path":"js/oni.js","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni.mp3","path":"imgs/oni.mp3","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/touxiang.jpg","path":"imgs/touxiang.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/xsbg.gif","path":"imgs/xsbg.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/gal/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/gal/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/avatar.jpg","path":"imgs/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/weixin.jpg","path":"imgs/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/alipay.jpg","path":"imgs/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-ie6.css","path":"js/highslide/highslide-ie6.css","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.min.js","path":"js/highslide/highslide-with-gallery.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-html.min.js","path":"js/highslide/highslide-with-html.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.min.js","path":"js/highslide/highslide.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.js","path":"js/highslide/highslide.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.packed.js","path":"js/highslide/highslide-with-gallery.packed.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.packed.js","path":"js/highslide/highslide.packed.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/comment/leancloud.js","path":"js/comment/leancloud.js","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni2.jpg","path":"imgs/oni/oni2.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni1.jpg","path":"imgs/oni/oni1.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni3.jpg","path":"imgs/oni/oni3.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.css","path":"js/highslide/highslide.css","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni4.jpg","path":"imgs/oni/oni4.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni5.jpg","path":"imgs/oni/oni5.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni6.jpg","path":"imgs/oni/oni6.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-html.packed.js","path":"js/highslide/highslide-with-html.packed.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-full.packed.js","path":"js/highslide/highslide-full.packed.js","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview6.jpg","path":"imgs/preview/preview6.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview5.jpg","path":"imgs/preview/preview5.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/11.png","path":"imgs/smilies/11.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/1.png","path":"imgs/smilies/1.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/10.png","path":"imgs/smilies/10.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/12.png","path":"imgs/smilies/12.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/13.png","path":"imgs/smilies/13.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/15.png","path":"imgs/smilies/15.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/16.png","path":"imgs/smilies/16.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/14.png","path":"imgs/smilies/14.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/17.png","path":"imgs/smilies/17.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/19.png","path":"imgs/smilies/19.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/18.png","path":"imgs/smilies/18.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/2.png","path":"imgs/smilies/2.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/20.png","path":"imgs/smilies/20.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/22.png","path":"imgs/smilies/22.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/23.png","path":"imgs/smilies/23.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/21.png","path":"imgs/smilies/21.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/3.png","path":"imgs/smilies/3.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/24.png","path":"imgs/smilies/24.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/25.png","path":"imgs/smilies/25.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/comment/gitment.js","path":"js/comment/gitment.js","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/4.png","path":"imgs/smilies/4.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/5.png","path":"imgs/smilies/5.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/9.png","path":"imgs/smilies/9.png","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/6.png","path":"imgs/smilies/6.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/8.png","path":"imgs/smilies/8.png","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/7.png","path":"imgs/smilies/7.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-html.js","path":"js/highslide/highslide-with-html.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-full.min.js","path":"js/highslide/highslide-full.min.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.js","path":"js/highslide/highslide-with-gallery.js","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-full.js","path":"js/highslide/highslide-full.js","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background2.jpg","path":"imgs/slide/background2.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background5.jpg","path":"imgs/slide/background5.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/closeX.png","path":"js/highslide/graphics/closeX.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-text-buttons.png","path":"js/highslide/graphics/controlbar-text-buttons.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/close.png","path":"js/highslide/graphics/close.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar2.gif","path":"js/highslide/graphics/controlbar2.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar3.gif","path":"js/highslide/graphics/controlbar3.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white-small.gif","path":"js/highslide/graphics/controlbar-white-small.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4-hover.gif","path":"js/highslide/graphics/controlbar4-hover.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/fullexpand.gif","path":"js/highslide/graphics/fullexpand.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4.gif","path":"js/highslide/graphics/controlbar4.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/geckodimmer.png","path":"js/highslide/graphics/geckodimmer.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white.gif","path":"js/highslide/graphics/controlbar-white.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/loader.gif","path":"js/highslide/graphics/loader.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-black-border.gif","path":"js/highslide/graphics/controlbar-black-border.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/icon.gif","path":"js/highslide/graphics/icon.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/loader.white.gif","path":"js/highslide/graphics/loader.white.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/zoomout.cur","path":"js/highslide/graphics/zoomout.cur","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/resize.gif","path":"js/highslide/graphics/resize.gif","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/zoomin.cur","path":"js/highslide/graphics/zoomin.cur","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/scrollarrows.png","path":"js/highslide/graphics/scrollarrows.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background3.jpg","path":"imgs/slide/background3.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background4.jpg","path":"imgs/slide/background4.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview4.jpg","path":"imgs/preview/preview4.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/beveled.png","path":"js/highslide/graphics/outlines/beveled.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/glossy-dark.png","path":"js/highslide/graphics/outlines/glossy-dark.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/drop-shadow.png","path":"js/highslide/graphics/outlines/drop-shadow.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-white.png","path":"js/highslide/graphics/outlines/rounded-white.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-black.png","path":"js/highslide/graphics/outlines/rounded-black.png","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/outer-glow.png","path":"js/highslide/graphics/outlines/outer-glow.png","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview2.jpg","path":"imgs/preview/preview2.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background6.jpg","path":"imgs/slide/background6.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background1.jpg","path":"imgs/slide/background1.jpg","modified":0,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/Outlines.psd","path":"js/highslide/graphics/outlines/Outlines.psd","modified":0,"renderable":1},{"_id":"source/imgs/MessageConverter.png","path":"imgs/MessageConverter.png","modified":0,"renderable":0},{"_id":"themes/replica/source/css/calendar.styl","path":"css/calendar.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/code.styl","path":"css/code.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/footer.styl","path":"css/footer.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/header.styl","path":"css/header.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/main.css","path":"css/main.css","modified":0,"renderable":1},{"_id":"themes/replica/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/navbar.styl","path":"css/navbar.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/css/post.styl","path":"css/post.styl","modified":0,"renderable":1},{"_id":"themes/replica/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/imgs/lombokhttpproxy.JPG","path":"imgs/lombokhttpproxy.JPG","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"a994532c1fe72df4a634dd248d2865ed9569af88","modified":1522135603613},{"_id":"source/favicon.ico","hash":"20c59e96f042970753776c92420583340cb3c6ae","modified":1521705964470},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1527736218059},{"_id":"themes/BlueLake/README.en.md","hash":"6cc6e346635bf26dd71030b9c3c6443507cd4108","modified":1527736218061},{"_id":"source/404/index.md","hash":"1c4b3981d11aafdc2e2d96aac956a4fd0505a917","modified":1521681905608},{"_id":"source/about/index.md","hash":"61b029e9dd475b1bc3f102ff1d44fffe0d293e18","modified":1521711511478},{"_id":"themes/BlueLake/README.md","hash":"66c3ef7a779b6d65bad90daa2e03bcb7a1bb742f","modified":1527736218063},{"_id":"themes/BlueLake/package.json","hash":"cdef382c442618b24305fd3e38ac7a3accf87aa9","modified":1527736218134},{"_id":"source/_posts/Docker容器中搭建Redis集群.md","hash":"961ba9892bef480349c4d20dfa77d6fbf02eedd5","modified":1536032102097},{"_id":"source/_posts/Docker容器中搭建rabbitmq集群.md","hash":"e8577892e43c3edc006791b76ee6d7a6635f6966","modified":1536032135057},{"_id":"source/_posts/Docker-Learning.md","hash":"fd8f42d9f40031e30f04cff775e2dee1e6bbf245","modified":1527737323402},{"_id":"source/_posts/P1.md","hash":"91d7a198594f64021d10f3212187f35fbc617854","modified":1525918551065},{"_id":"source/_posts/P10.md","hash":"a873bb99fb0a94656815bc1ac525bfd23c990656","modified":1525920356173},{"_id":"source/_posts/Dockerfile构建java环境镜像.md","hash":"db6afd4ee430fed2c63b75237ed9718ee3e205ba","modified":1536032118890},{"_id":"source/_posts/Docker容器中构建mysql环境.md","hash":"2f3e6bdd80a3d84064beebceaaf93e7b7750527b","modified":1527679277252},{"_id":"source/_posts/P11.md","hash":"636f9c65838ebee40a65c5c2e5733005177d52d9","modified":1525919713578},{"_id":"source/_posts/P14.md","hash":"39959e48b6a873dd4a527196b0e22d1aeefed01e","modified":1521682083520},{"_id":"source/_posts/P12.md","hash":"103cde307169a11efdb3ea33b15c86a1c0779c4e","modified":1525919944906},{"_id":"source/_posts/P16.md","hash":"26f86fe52d008ade4da0b52867cdc35e0debcd5c","modified":1521682083520},{"_id":"source/_posts/P15.md","hash":"de325f44f2b10e27c0c029afaf3f31267092c8c2","modified":1525920303670},{"_id":"source/_posts/P3.md","hash":"51b662b6587b0bc5709323d6ee963b916e601536","modified":1525918789760},{"_id":"source/_posts/P5.md","hash":"c20498541fa20791b27f319ca5cae0959dcfaa20","modified":1525918339634},{"_id":"source/_posts/P13.md","hash":"ee0b1186a9c840e043556d4841eebb891ec6f54f","modified":1525920068629},{"_id":"source/_posts/P4.md","hash":"9f8fd62cec3b1f705712be0c89d7ee7def9a357e","modified":1525918909515},{"_id":"source/_posts/P9.md","hash":"780ff697a2ef8aa53eb8bf5e1a1fe4e75c80dc66","modified":1536031064269},{"_id":"source/_posts/自己搭建小项目.md","hash":"285c1afe33f0b87f9615b082083988a6ddfa40a6","modified":1527678832650},{"_id":"source/_posts/java a=a++引发的思考.md","hash":"7c06d96720d30afeef3ab37e29d6c7b6c351ad0c","modified":1536032049261},{"_id":"source/categories/index.md","hash":"d3b2563a93ace1872d8639bc229a22c1b514c1df","modified":1524791303607},{"_id":"source/search/index.md","hash":"49d2479a820ffb525f426aad6bd3057801058ece","modified":1521681905609},{"_id":"source/tags/index.md","hash":"ec80d4cf36641e3180cd525c1fe78e50aa2942d9","modified":1524791328354},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"a127deb32d1df69bbe50a3824a5f90472513c9c3","modified":1527736218069},{"_id":"themes/BlueLake/languages/en.yml","hash":"95bac2c366505d016b5defc47370679b9f5f3c4b","modified":1527736218071},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"baa68725feeec6643f875a532a9d55ba8aacdb2c","modified":1527736218072},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"bd97d5e4b39d30da1644b90256dfc4e6b1d76988","modified":1527736218074},{"_id":"themes/BlueLake/languages/tr.yml","hash":"5f13d55fdd5bdd1115075736e3e26a1ea1dd1dea","modified":1527736218078},{"_id":"themes/BlueLake/languages/ko.yml","hash":"fc8826724f570136d9a2d3ec2705b7b7000e0f14","modified":1527736218076},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"d7f5842295509746f878e627c4c7e298f3f1613a","modified":1527736218080},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"d4d587ba81864910715c0c3879605cc6a9362e09","modified":1527736218082},{"_id":"themes/BlueLake/_config.yml","hash":"df67ab0508ed12283dcf0a257858c02b3f8f05ed","modified":1527745562163},{"_id":"source/_posts/P8.md","hash":"91df0371896100ddfb9a99b2407ff073e30138ba","modified":1525919275781},{"_id":"source/_posts/P6.md","hash":"d54d7896a5f8cc057c00a93261870d98b3f2f552","modified":1535942504119},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1527736218125},{"_id":"themes/BlueLake/layout/base.jade","hash":"ee19d63543f898336dee846ed45d932239c40fe0","modified":1527736218124},{"_id":"themes/BlueLake/layout/index.jade","hash":"dd81d9f7a6b388de2ab731b17b3ba55f70df4a5f","modified":1527736218127},{"_id":"themes/BlueLake/layout/post.jade","hash":"0305258c33e4d02f977ee1aaf7f2429b993fda17","modified":1527736218130},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1527736218132},{"_id":"themes/BlueLake/layout/page.jade","hash":"415404398931d98db28bff723886b07dcb8bbbc3","modified":1527736218128},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1527736218136},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1527736218142},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"c1f1955d12aee22a931a3f4ad9d0e9a408e80f3c","modified":1527736218089},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"d970c81b5cdbd7c0348ee28e93bcbb006d613b6d","modified":1527736218091},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1527736218086},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"e0aa5d7adc1218a324a484abe3513e9545f89067","modified":1527736218092},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1527736218096},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1527736218097},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1527736218099},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1527736218101},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"3f11d2b5a4c647bf2b37c4d00bdc250cda80b770","modified":1527736218085},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1527736218122},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1527736218108},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1527736218106},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1527736218110},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1527736218112},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1527736218113},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1527736218115},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1527736218118},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1527736218116},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1527736218120},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1527736218103},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"ba0839518db2cb9dafee67ca5e471219bfba2e90","modified":1527736218105},{"_id":"themes/BlueLake/source/css/style.styl","hash":"45776bc176bc8ed0d664e953e23d6a0a9a030929","modified":1527736218140},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1527736218144},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1527736218146},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1527736218094},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1527736218148},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1527736218138},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1527736218150},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1527736218153},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"9e68d688f2f12ec193ce9496beb0fd42e1de2288","modified":1527736218158},{"_id":"themes/BlueLake/source/js/totop.js","hash":"d9367c6fa3e973bc5f32ce38d951858455726a02","modified":1527736218160},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1527736218156},{"_id":"public/atom.xml","hash":"1faee504f3bbf3121ea852d7f6ad3511c45398ee","modified":1536108955954},{"_id":"public/content.json","hash":"6083716751dbe0929f6e1c69333670be8c3431e0","modified":1536108956205},{"_id":"public/404/index.html","hash":"b568f797e2725d4367d779b90f5c7df4004a154d","modified":1536108956247},{"_id":"public/about/index.html","hash":"b568f797e2725d4367d779b90f5c7df4004a154d","modified":1536108956247},{"_id":"public/categories/index.html","hash":"44ebd7f819e8fb42f239fb5ed8c51d4d98d5b704","modified":1536108956247},{"_id":"public/search/index.html","hash":"447425e6d740fcdd4d76d6ac55d248d35c107713","modified":1536108956247},{"_id":"public/tags/index.html","hash":"e0865ee2a296a6345c69c62d1dacb813bcd7ae79","modified":1536108956247},{"_id":"public/archives/index.html","hash":"7e752d4a17dfb0fc61b8035ce544cddb90bfc176","modified":1536108956247},{"_id":"public/archives/page/2/index.html","hash":"0754ce136cade6e7d25910bf4b9ec53ff9a347b1","modified":1536108956247},{"_id":"public/archives/page/3/index.html","hash":"8c385c6e669414343f545deab74b4ed976414e70","modified":1536029534665},{"_id":"public/archives/2017/index.html","hash":"ac4683746e69a831a67b91f173c9c32eff4a5197","modified":1536108956247},{"_id":"public/archives/2017/12/index.html","hash":"ac4683746e69a831a67b91f173c9c32eff4a5197","modified":1536108956247},{"_id":"public/archives/2018/index.html","hash":"7e752d4a17dfb0fc61b8035ce544cddb90bfc176","modified":1536108956247},{"_id":"public/archives/2018/page/2/index.html","hash":"175aeceef55e78741ae759fb2698a0c3bfced692","modified":1536108956247},{"_id":"public/archives/2018/01/index.html","hash":"3893f02cb5128582d1a77f92f3d60e69189a000d","modified":1536108956247},{"_id":"public/archives/2018/03/index.html","hash":"09f02832b714caa61c290b85cc853b2ea49a02fe","modified":1536108956247},{"_id":"public/archives/2018/04/index.html","hash":"833a75692bdfb604f42647a4fa3159c746b09ff3","modified":1536108956247},{"_id":"public/archives/2018/05/index.html","hash":"77752ac6ad7c1447dcbc54da5d7bc6de93b97187","modified":1536108956247},{"_id":"public/categories/noname/index.html","hash":"6738ca449cd9955bc7945a539c0f79403222a83b","modified":1536029534666},{"_id":"public/categories/Docker/index.html","hash":"976eb99ec6c05ee9fa0ee91bb733238a4feccf57","modified":1536108956247},{"_id":"public/categories/WeChat小程序/index.html","hash":"24850f05e1411f45438f5f3a2c40cc09dd3afa26","modified":1536108956247},{"_id":"public/categories/杂项/index.html","hash":"c0087910dc9e1442a98a39d7d725d3ccea87f9a5","modified":1536029534666},{"_id":"public/categories/Redis/index.html","hash":"640abb0184b42d5ffc7b9adb0c0c70df03f0baa0","modified":1536108956247},{"_id":"public/categories/WordPress/index.html","hash":"5619c771ea822d4da301aa6072177e810d78b3ea","modified":1536108956247},{"_id":"public/categories/Dubbo/index.html","hash":"f6ceab8956d20709aca8239fd0cff56ea07c1e24","modified":1536108956247},{"_id":"public/categories/CentOS/index.html","hash":"48909bb2e1a7d089e9b405befdb46351ef3b2eb5","modified":1536108956247},{"_id":"public/categories/Spring-batch/index.html","hash":"0fc28558eb2a29dbda8b0d6f9a609d71cb309b0d","modified":1536108956247},{"_id":"public/categories/java/index.html","hash":"fb2fd8e495c08272107c1a04146a8af7de8df4f5","modified":1536029534667},{"_id":"public/categories/CentOS/杂项/index.html","hash":"36ef7413017706d3e0240057c47717c98c54e45b","modified":1536029534668},{"_id":"public/categories/github/index.html","hash":"6d79f888c0f6bc385c96ce7291cc18095daa8dca","modified":1536029534668},{"_id":"public/page/2/index.html","hash":"c318d75e35b41ee4ddde22024ed1f7a9d3dfe6bd","modified":1536108956247},{"_id":"public/page/3/index.html","hash":"48e4816659e3c6a2f24f1a80b31c3218fa1b5d06","modified":1536029534666},{"_id":"public/tags/noname/index.html","hash":"dd40a20338172b8c6f2d9597471752428074ddbd","modified":1536029534668},{"_id":"public/tags/Docker/index.html","hash":"3bbc692813e48b94ec24b4216561c41809a9fa28","modified":1536108956247},{"_id":"public/tags/微信，小程序/index.html","hash":"2787a5e05c9c18613f5b601a887d9b84e7c3e8a0","modified":1536108956247},{"_id":"public/tags/CentOS/index.html","hash":"7f355bd70930314b0fd39a254dab4d154af5b5ca","modified":1536108956247},{"_id":"public/tags/java基础/index.html","hash":"f4497318dfbd6138a3d57cec25a01764c143a4e9","modified":1536108956247},{"_id":"public/aticle/Docker容器中搭建Redis集群.html","hash":"d0c2c04b1d11a3c31b29f4b09131b02ed4b051bb","modified":1536108956247},{"_id":"public/aticle/Docker容器中搭建rabbitmq集群.html","hash":"2aaa886f0ab125848213252ecc936340b09a254d","modified":1536108956247},{"_id":"public/aticle/Docker容器中构建mysql环境.html","hash":"3438430a192e517452c707f2cdde943d28051fbe","modified":1536029534664},{"_id":"public/aticle/Dockerfile构建java环境镜像.html","hash":"dd259424c12b19c743585672623e36e9e9d258be","modified":1536108956247},{"_id":"public/aticle/自己搭建小项目.html","hash":"c9fb09f943f5ea54e3092884c2be97ca1b00177e","modified":1531097934834},{"_id":"public/aticle/Docker-Learning.html","hash":"69e81f2da1982524aa7a0702e28b202cf4e10bb1","modified":1536108956247},{"_id":"public/aticle/java a=a++引发的思考.html","hash":"d7572025f96950354837dca25ae8c40b94285374","modified":1536108956247},{"_id":"public/aticle/P10.html","hash":"5b7b3df6a6b0be69ee40ac6432325bb4b9226de1","modified":1536029534664},{"_id":"public/aticle/P8.html","hash":"f6c7e772bf7c656c084d57c518ba2f0f8e0a99c2","modified":1536029534664},{"_id":"public/aticle/P15.html","hash":"433e470c54b4a6a23d0acd7d4d2f0a00b9be6d8d","modified":1536029534664},{"_id":"public/aticle/P12.html","hash":"cef734d1b06e8434fa5414785743f14c3e76fb2a","modified":1536029534664},{"_id":"public/aticle/P14.html","hash":"8f2edd82d83d0b9326a8300f3226f21f61adddf0","modified":1536029534664},{"_id":"public/aticle/P11.html","hash":"f6bc1f4b80e4d80c72c5bffeee674e46d3785cef","modified":1536029534664},{"_id":"public/aticle/P6.html","hash":"00c644498d6c9a65660deba7334494a209c9530f","modified":1536029534664},{"_id":"public/aticle/P3.html","hash":"aa8b3122f1302fedf64da9253e8a1d92cfae4066","modified":1536029534664},{"_id":"public/aticle/P4.html","hash":"7b6481474bd458cf2cd027bf9216d6dc01bdb5b6","modified":1536029534664},{"_id":"public/aticle/P13.html","hash":"79d837461379509fac39ce70f9d1ab00206ac0a0","modified":1536029534664},{"_id":"public/aticle/P16.html","hash":"ce9b06b21957ccb5c09de9970cd67b59fb494b8a","modified":1536029534665},{"_id":"public/aticle/P5.html","hash":"766f2491415884317bf3a577eb9bac9ed287d790","modified":1536029534665},{"_id":"public/aticle/P1.html","hash":"d60fb236a89a36e69be7ba51409be62ce1f548c4","modified":1536029534665},{"_id":"public/aticle/P9.html","hash":"5ba6b173cf1a99e2b55adb1ce3bf2f285aca7ea4","modified":1536029534665},{"_id":"public/index.html","hash":"21181cccd82c396be04263a67f869c9ff31c8945","modified":1536108956247},{"_id":"public/CNAME","hash":"a994532c1fe72df4a634dd248d2865ed9569af88","modified":1536108956263},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1536108956278},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1536108956263},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1536108956278},{"_id":"public/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1536108956263},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1536108956341},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1536108956294},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1536108957431},{"_id":"public/css/highlight.css","hash":"932879716cbce6f9a1b830070ed514082398f1ca","modified":1536108957672},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1536108957670},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1536108957670},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1536108957672},{"_id":"public/css/style.css","hash":"408a6817db3f5a51cbd359130c0c5e30194bd5f7","modified":1536108958213},{"_id":"themes/gal/_config.yml","hash":"ea7e652ecbc12a3c37fe7e6c7decba59038dfebd","modified":1522136915956},{"_id":"themes/gal/LICENSE","hash":"5b012df09f9dad60ec326c510496893726af4896","modified":1521681905610},{"_id":"themes/gal/README.md","hash":"641035393ad3121e115aa5081b88e1e2a2a48016","modified":1521681905610},{"_id":"themes/gal/package.json","hash":"e7f91cfe6ba940a1f2888cc94fa4a65ae8a2315a","modified":1521681905671},{"_id":"themes/gal/languages/default.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521681905611},{"_id":"themes/gal/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1521681905643},{"_id":"themes/gal/layout/categories.ejs","hash":"5a66fb5d67cc141bdf099e9b1189d1576daba17a","modified":1521681905644},{"_id":"themes/gal/layout/index.ejs","hash":"12ae8f7bd23b3f4e0f54dea2a1862419484d2401","modified":1521681905658},{"_id":"themes/gal/layout/category.ejs","hash":"99ba5b5a3938af83df0457c3388759e0532bb0a6","modified":1521681905644},{"_id":"themes/gal/layout/layout.ejs","hash":"c24904d00456d5b5ddab5558451feb9811a54eb9","modified":1521681905658},{"_id":"themes/gal/layout/tag.ejs","hash":"65c21bc7656507774b0869eab3442d69b8d3adb4","modified":1521681905660},{"_id":"themes/gal/layout/post.ejs","hash":"3c5a5c820b5b7f8dc230fcc9c607dc7e98860028","modified":1521681905660},{"_id":"themes/gal/layout/page.ejs","hash":"176c0170a9c5778ff8be99b3cfcd692b4c4a34e4","modified":1521711922205},{"_id":"themes/gal/layout/tags.ejs","hash":"bc9d41c3fd25ee86394b2f2928bb72db1886ee62","modified":1521681905660},{"_id":"themes/gal/libs/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521681905662},{"_id":"themes/gal/layout/_widget/hot_categories.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521681905626},{"_id":"themes/gal/source/js/bootstrap-hover-dropdown.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521681905797},{"_id":"themes/gal/layout/_widget/author.ejs","hash":"eeb4ad13fd4289b21e79269ec8eccd127d74211c","modified":1521683422775},{"_id":"themes/gal/layout/_widget/friend_links.ejs","hash":"5b4da02bc6d831ae256dd54fa3a46d8d0c93f0ce","modified":1521681905626},{"_id":"themes/gal/layout/_widget/links.ejs","hash":"e220f7dd6e348fe60735d7033b05345fe95c396c","modified":1521681905641},{"_id":"themes/gal/layout/_widget/hot_posts.ejs","hash":"08422b5abd73f0756bdee30b0116e6ded9df2b5c","modified":1521681905640},{"_id":"themes/gal/layout/_widget/hot_tags.ejs","hash":"13aa4c7269c40982af52d45e022b569a4aa195c4","modified":1521681905641},{"_id":"themes/gal/layout/_widget/recent_comments.ejs","hash":"254589b529980eec3cc7610e63b244b42f232558","modified":1521681905642},{"_id":"themes/gal/source/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1521595499859},{"_id":"themes/gal/layout/_widget/recent_posts.ejs","hash":"f2f57750466c1f8d84ec803051397dad8df2952d","modified":1521681905642},{"_id":"themes/gal/layout/_widget/random_posts.ejs","hash":"b4be3d276da1009990a3f40081be2cc2408167af","modified":1521681905642},{"_id":"themes/gal/layout/_partial/archive.ejs","hash":"5e9aa99f43fbab9c22a4f29e17bd3c66d33422e7","modified":1521681905611},{"_id":"themes/gal/layout/_widget/search.ejs","hash":"c828a111f5d71c418ed57716cddb7c5bc2165b15","modified":1521681905643},{"_id":"themes/gal/layout/_partial/footer.ejs","hash":"61d388b87c23d940bc10e27f31bfb7b73a3a301e","modified":1521681905612},{"_id":"themes/gal/layout/_partial/article.ejs","hash":"0ed59746320c9fd9b417e072d347a920c7ecc72b","modified":1521681905612},{"_id":"themes/gal/layout/_partial/excerpt.ejs","hash":"e8df81fb0830c35423b34cf76d04e0872aee6745","modified":1521681905612},{"_id":"themes/gal/layout/_partial/issue.ejs","hash":"ee735ce36846dbf1634a7c0da0e07fa6a436b780","modified":1521684672818},{"_id":"themes/gal/layout/_partial/head.ejs","hash":"a4d92fc7bd805cedde6230f6d89f2c0406802ffe","modified":1521681905612},{"_id":"themes/gal/layout/_partial/oni.ejs","hash":"323469a435fc30675f2c768802576e812cc079c1","modified":1521681905624},{"_id":"themes/gal/layout/_partial/pagination.ejs","hash":"691f796160a13d42b550700f719a1cd21691cd57","modified":1521681905624},{"_id":"themes/gal/layout/_partial/slideshow.ejs","hash":"d798410561ce8c4749c9f7270eea211275b1fab2","modified":1521681905625},{"_id":"themes/gal/layout/_partial/sidebar.ejs","hash":"25423078ce81f4c3de3c56fa3e5ffc115ae3dc7f","modified":1521681905624},{"_id":"themes/gal/layout/page/404.ejs","hash":"bed254e4a19f4b13556ccae7945de6e8ca854787","modified":1521711620728},{"_id":"themes/gal/layout/page/about.ejs","hash":"019c091fd3756861c120d54d1fc2c2be9215b0a1","modified":1521711644099},{"_id":"themes/gal/libs/font-awesome/_core.scss","hash":"2dce8814642ef0ee86c65f3d29818c17fd8951f9","modified":1521681905666},{"_id":"themes/gal/layout/_partial/header.ejs","hash":"106dd6506ee3b504c792dbde2bbcdb1870eb3b6a","modified":1521681905613},{"_id":"themes/gal/layout/page/search.ejs","hash":"d84182f23e0bf8d42f87ae7566dcd82bb8eb4a24","modified":1521681905659},{"_id":"themes/gal/libs/font-awesome/_animated.scss","hash":"c3d081abee1076d36a289afc6488e676bc59f023","modified":1521681905663},{"_id":"themes/gal/libs/font-awesome/_bordered-pulled.scss","hash":"39353047bbcce4f3f706666df1547e64546932a0","modified":1521681905663},{"_id":"themes/gal/libs/font-awesome/_fixed-width.scss","hash":"f4af333866ff3c0da59493fc7077965c6e9d46ac","modified":1521681905667},{"_id":"themes/gal/libs/font-awesome/_list.scss","hash":"8e9c5708bd91364a749f93555ba65af3c49ff1a6","modified":1521681905668},{"_id":"themes/gal/libs/font-awesome/_larger.scss","hash":"c5cf379c23025aa001f850bd560a87a92e4f711d","modified":1521681905668},{"_id":"themes/gal/libs/font-awesome/_mixins.scss","hash":"25b2361e654e3512c1f6024f3a8d593413611a58","modified":1521681905669},{"_id":"themes/gal/libs/font-awesome/_rotated-flipped.scss","hash":"fd48d098af52ffff6f829e7f5a2250a9c3cfc87f","modified":1521681905669},{"_id":"themes/gal/libs/font-awesome/_path.scss","hash":"011339ce07bb12a5736edd7fdbed0b7f3c63bf72","modified":1521681905669},{"_id":"themes/gal/libs/font-awesome/_stacked.scss","hash":"c4fe90e7781e8b229bf2657312ba61ecf1026cab","modified":1521681905670},{"_id":"themes/gal/libs/font-awesome/_screen-reader.scss","hash":"ebe3fe40059e5a2a3a3c0c0f587a2e2bc23fd1b2","modified":1521681905669},{"_id":"themes/gal/libs/font-awesome/font-awesome.scss","hash":"6bfc7e75fd344628b06d85f7fa4d48b106334584","modified":1521681905670},{"_id":"themes/gal/source/css/_article.scss","hash":"ea491b6fc3a4b36800c9d4cb6d09f692b38a77de","modified":1521681905671},{"_id":"themes/gal/source/css/_comment.scss","hash":"12ad332bedb3f5dd0e02fe931943a0c2c9f4c7c0","modified":1521681905672},{"_id":"themes/gal/libs/font-awesome/_icons.scss","hash":"303a6e9e04e91a132612f094b34cccfc90c63bec","modified":1521681905668},{"_id":"themes/gal/source/css/_header.scss","hash":"219e0628556b65cce709292bac032e37ab156af6","modified":1521681905693},{"_id":"themes/gal/source/css/_mixin.scss","hash":"4242e3474a1fe1288296310074dab4bf50823557","modified":1521681905693},{"_id":"themes/gal/libs/font-awesome/_variables.scss","hash":"e2fc1b9ba5748f33ff45f8a3e6977088b83175c4","modified":1521681905670},{"_id":"themes/gal/source/css/_pagination.scss","hash":"c70938a6432f1c6c55a88eafe84ae6cc98b57ba4","modified":1521681905694},{"_id":"themes/gal/source/css/_slideshow.scss","hash":"8520b213a52c9848e45d52fe4b3a4e389cf01e6e","modified":1521681905694},{"_id":"themes/gal/source/css/_excerpt.scss","hash":"d8080f289a10a30970f9ec0e6b46d8e69205c195","modified":1521681905692},{"_id":"themes/gal/source/css/_common.scss","hash":"21e8cb0c12d613892a1075b66563360fbc24a615","modified":1521681905672},{"_id":"themes/gal/source/css/style.scss","hash":"fb9fea87e87b94ea0c341879a7a11d02ebf8fd01","modified":1521681905697},{"_id":"themes/gal/source/css/_variables.scss","hash":"7117855f9c93c626b932c045bb1c6f6f76fb2333","modified":1521681905695},{"_id":"themes/gal/source/css/_sidebar.scss","hash":"7226875aaf385d61bcc5fc152a47b6fd4a25f9e6","modified":1521681905694},{"_id":"themes/gal/source/js/.DS_Store","hash":"52da494d68842fd3e729752636d01b7c335255bb","modified":1521681905796},{"_id":"themes/gal/source/css/aos.css","hash":"a4100b1b5f0dac2597f3d06cfd36a35df29d4c35","modified":1521681905696},{"_id":"themes/gal/source/js/activate-power-mode.js","hash":"5bb12e7590fd48e1c49123001921404213b89ebe","modified":1521681905796},{"_id":"themes/gal/source/js/blog.js","hash":"024d815b6a1acb707ea9da94bcc95f86b6475ffd","modified":1521681905797},{"_id":"themes/gal/source/js/hs.js","hash":"3df129f76e9449f45cfc1550451a0dbb89a71006","modified":1521681905858},{"_id":"themes/gal/source/js/bootstrap.min.js","hash":"8fb8a9319055253d085edfc3bb72d20f614ec709","modified":1521681905807},{"_id":"themes/gal/source/js/aos.js","hash":"3f2c66781b53b842da4e3deefd285db88bd4fbc1","modified":1521681905797},{"_id":"themes/gal/source/imgs/.DS_Store","hash":"d00df114e3fa27c440c8b1440c39f96dd8b0cc6e","modified":1521681905726},{"_id":"themes/gal/source/imgs/mouse2.cur","hash":"8a9fd78a78d446316485595bad42d44330f7bee2","modified":1521681905727},{"_id":"themes/gal/source/imgs/mouse1.cur","hash":"18ed6adcdcf37b0fe2c0e14d528f23c6a7417302","modified":1521681905727},{"_id":"themes/gal/source/js/oni.js","hash":"99e9e1bc25f898bc136e4d8d4b62e79d5e0a8eeb","modified":1521681905860},{"_id":"themes/gal/source/imgs/oni.mp3","hash":"af30f8f2574679964c98927a22a5696e44be56fb","modified":1521681905728},{"_id":"themes/gal/source/imgs/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1521595499859},{"_id":"themes/gal/source/imgs/xsbg.gif","hash":"0c07e169d9d07a7e8f71b9baed5942234d31f457","modified":1521681905795},{"_id":"themes/gal/source/fonts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521681905698},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1521681905724},{"_id":"themes/gal/source/css/bootstrap.min.css","hash":"224c9f9ad11b495358aa61dbd53e838e9b61015b","modified":1521681905697},{"_id":"themes/gal/source/js/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1521681905859},{"_id":"themes/gal/source/imgs/avatar.jpg","hash":"6317956f59fd3760799d855931b39bae031a20d5","modified":1521681905727},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1521681905724},{"_id":"themes/gal/source/imgs/weixin.jpg","hash":"01d3ef9a5bcdd3b528f0e0f6afded1993dbf94de","modified":1521595400207},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521681905721},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1521681905725},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1521681905723},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1521681905722},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521681905721},{"_id":"themes/gal/source/imgs/alipay.jpg","hash":"3f70bd1b2f6f06b1dc7a7129636ef297fdb08510","modified":1521595426371},{"_id":"themes/gal/source/js/highslide/highslide-ie6.css","hash":"eaf6db653eb1ff40782608e96ca912899962e156","modified":1521681905852},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.min.js","hash":"8fffb1c784c69140eddfa5340300070db38c0805","modified":1521681905854},{"_id":"themes/gal/source/js/highslide/highslide-with-html.min.js","hash":"57cc1afb782e3474943d7d814a0e350d301cc70f","modified":1521681905856},{"_id":"themes/gal/source/js/highslide/highslide.min.js","hash":"e0bf1dd535f3853c5cbffa245bb1e902bc156a3c","modified":1521681905858},{"_id":"themes/gal/source/js/highslide/highslide.js","hash":"12dfeebe809c27aed3bb940b641e1ef13cc0eae3","modified":1521681905857},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.packed.js","hash":"146218112687daf6e19d9fdc9ec3eb0ec283b4bf","modified":1521681905855},{"_id":"themes/gal/source/js/highslide/highslide.packed.js","hash":"727909482c3a9e531792397a251c127f40915adb","modified":1521681905858},{"_id":"themes/gal/source/js/comment/leancloud.js","hash":"c04bd8bf94023813c4b51475b9a55aa643f0866d","modified":1521681905809},{"_id":"themes/gal/source/imgs/oni/oni2.jpg","hash":"4f2c0a00ee1be183bc77baeebf551fe143ff7ae7","modified":1521681905734},{"_id":"themes/gal/source/imgs/oni/oni1.jpg","hash":"f5a33419ad2701f7a2402a867c9652cdc5e61b98","modified":1521681905734},{"_id":"themes/gal/source/imgs/oni/oni3.jpg","hash":"f76271fd447762d4ddf6c966468a77a8971ace9e","modified":1521681905735},{"_id":"themes/gal/source/js/highslide/highslide.css","hash":"9d13779279a6e95a21d09a34bbdea165c26e631d","modified":1521681905857},{"_id":"themes/gal/source/imgs/oni/oni4.jpg","hash":"92ce21f12dbe309a4674e66c048d8d75f8430fda","modified":1521681905735},{"_id":"themes/gal/source/imgs/oni/oni5.jpg","hash":"d1a83c12492e7c41ccb8a03cd5157c5397514e23","modified":1521681905740},{"_id":"themes/gal/source/imgs/oni/oni6.jpg","hash":"bb3847273571a3ccd6a63526dded82aaa1afe600","modified":1521681905741},{"_id":"themes/gal/source/js/highslide/highslide-with-html.packed.js","hash":"4e0fc1688c84c35b23a2a1a5cf099b478911bc57","modified":1521681905856},{"_id":"themes/gal/source/js/highslide/highslide-full.packed.js","hash":"9287fbb51773e32f7e67de58977b48f5e4f354a9","modified":1521681905852},{"_id":"themes/gal/source/imgs/preview/preview6.jpg","hash":"53a12cc25f7521dcc1809b59838c898f39735e01","modified":1521684939372},{"_id":"themes/gal/source/imgs/preview/preview5.jpg","hash":"d21f0ccb947ef971c139b3951193cb5890d5004d","modified":1521685108472},{"_id":"themes/gal/source/imgs/smilies/11.png","hash":"68a39392c1bcd626202b1a8c18577fe23790028a","modified":1521681905774},{"_id":"themes/gal/source/imgs/smilies/1.png","hash":"b4123ae41f1f954f42515c30ed545af7706fe67e","modified":1521681905773},{"_id":"themes/gal/source/imgs/smilies/10.png","hash":"35b01e2b70df99ac7b088da02a52cdbf8507727f","modified":1521681905773},{"_id":"themes/gal/source/imgs/smilies/12.png","hash":"15c2185a9c9f7576dc34898a18bc0810d1c33780","modified":1521681905774},{"_id":"themes/gal/source/imgs/smilies/13.png","hash":"b7f4e2eba2993ead15314e5e3a1e52d03b35ff7e","modified":1521681905774},{"_id":"themes/gal/source/imgs/smilies/15.png","hash":"9bc4ab8044a8ba0728b549ca98bfc9abeed21b3a","modified":1521681905775},{"_id":"themes/gal/source/imgs/smilies/16.png","hash":"3f1aca6372ba7a0e0c57777c44f01ac6fb2bf73e","modified":1521681905790},{"_id":"themes/gal/source/imgs/smilies/14.png","hash":"c16a7dfe5bff382314f2ab51a19f7118c04acf57","modified":1521681905775},{"_id":"themes/gal/source/imgs/smilies/17.png","hash":"03f0b4d1e0b0d4334a530be68531b9a320b8ea44","modified":1521681905790},{"_id":"themes/gal/source/imgs/smilies/19.png","hash":"a5c74a5f6dc2a3b5b39c85bc0d9d74157c57c7ec","modified":1521681905791},{"_id":"themes/gal/source/imgs/smilies/18.png","hash":"34df863688b2b026eb8a7d3aad122f47eafae894","modified":1521681905790},{"_id":"themes/gal/source/imgs/smilies/2.png","hash":"b023745ae517965a226d1656bf33acdcdf246084","modified":1521681905791},{"_id":"themes/gal/source/imgs/smilies/20.png","hash":"abfa7f204aec320de0bd59f366b1935119c1f0c7","modified":1521681905791},{"_id":"themes/gal/source/imgs/smilies/22.png","hash":"5ba3108a366aaef568d8dd4c5208fde59f4d6331","modified":1521681905792},{"_id":"themes/gal/source/imgs/smilies/23.png","hash":"74e42f550fcb4c562a39f777a77ee4316054abd4","modified":1521681905792},{"_id":"themes/gal/source/imgs/smilies/21.png","hash":"fdd175985771a9c694f81199ff2733df483331cb","modified":1521681905792},{"_id":"themes/gal/source/imgs/smilies/3.png","hash":"b087320a3cc9725d5601d106f24d38075a5b5474","modified":1521681905793},{"_id":"themes/gal/source/imgs/smilies/24.png","hash":"38751e1b4ad260a7fe035d1e3e37d3fffdb5b540","modified":1521681905792},{"_id":"themes/gal/source/imgs/smilies/25.png","hash":"5009b4bd8c30d1912bde8e5fe6add4f8f12413fd","modified":1521681905793},{"_id":"themes/gal/source/js/comment/gitment.js","hash":"ab9315d0c02375500a4b59b7a51b2f7acdd1f6dc","modified":1521681905808},{"_id":"themes/gal/source/imgs/smilies/4.png","hash":"76b7df92f0590512ee52d5200d6edd7e8ba8161b","modified":1521681905793},{"_id":"themes/gal/source/imgs/smilies/5.png","hash":"56589a046bd38eda5d0386c5a3497898e4591fa2","modified":1521681905794},{"_id":"themes/gal/source/imgs/smilies/9.png","hash":"5481e5b6b9c53ee522987c858ddda9652633b137","modified":1521681905795},{"_id":"themes/gal/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1521681905699},{"_id":"themes/gal/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521681905701},{"_id":"themes/gal/source/imgs/smilies/6.png","hash":"0c04289d0f565bcf1dd3924672914cfe87bb8df4","modified":1521681905794},{"_id":"themes/gal/source/imgs/smilies/8.png","hash":"01da87b1689ea955db6b3e3f40a8e0a2a972e209","modified":1521681905795},{"_id":"themes/gal/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1521681905720},{"_id":"themes/gal/source/imgs/smilies/7.png","hash":"0c0292581ea4ae2c61a4c03c1f9f045f6a523069","modified":1521681905794},{"_id":"themes/gal/source/js/highslide/highslide-with-html.js","hash":"8d46ad21726ba06af6ade48cefc11fab5ad364b9","modified":1521681905855},{"_id":"themes/gal/source/js/highslide/highslide-full.min.js","hash":"2affe7aaa33115a2f05eba653e8c4af153922698","modified":1521681905841},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.js","hash":"858e38bf4ca4074e8925964bb8cfd3f27c670686","modified":1521681905854},{"_id":"themes/gal/source/js/highslide/highslide-full.js","hash":"47d5a073e8e5bad5ca3c8bfea84c182e3e141ab9","modified":1521681905840},{"_id":"themes/gal/source/imgs/slide/background2.jpg","hash":"578a36104aa5bfdb05c1fcc4b5671b9791f096b9","modified":1521681905752},{"_id":"themes/gal/source/imgs/slide/background5.jpg","hash":"d1e8721833f1bba4b671df13abe89417c3164bd6","modified":1521681905770},{"_id":"themes/gal/source/js/highslide/graphics/closeX.png","hash":"11c435153ec20e4f0e784dd849e0181104a77b1d","modified":1521681905810},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-text-buttons.png","hash":"c738717eaeeafba67326b7e65641d9d6a55f0b45","modified":1521681905813},{"_id":"themes/gal/source/js/highslide/graphics/close.png","hash":"6227e5d22184d5f4a01aa29aa35f92717c6e838b","modified":1521681905810},{"_id":"themes/gal/source/js/highslide/graphics/controlbar2.gif","hash":"e964df6eb758c9328e53de3681467fd10a5ba8c7","modified":1521681905814},{"_id":"themes/gal/source/js/highslide/graphics/controlbar3.gif","hash":"0077e495245ed61f0b23bb212f0bc2b8ad85c037","modified":1521681905815},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white-small.gif","hash":"8e87bcc585d3717e5ba29b8f1f53abb3a192f3e9","modified":1521681905814},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4-hover.gif","hash":"f8d9c2a7c52c480e34bd1858391e0878ae868e62","modified":1521681905815},{"_id":"themes/gal/source/js/highslide/graphics/fullexpand.gif","hash":"b294249f054b8d765fa4f962760c8a63694563f9","modified":1521681905816},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4.gif","hash":"6bafeabac1ed78ddc7e99823c34a0d0e34592f66","modified":1521681905816},{"_id":"themes/gal/source/js/highslide/graphics/.DS_Store","hash":"be93e35c6f09a52720c735d34d1bd09c5cf31bb4","modified":1521681905810},{"_id":"themes/gal/source/js/highslide/graphics/geckodimmer.png","hash":"823e387d1ce37cf781228c766fb4b214bb2940ff","modified":1521681905816},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white.gif","hash":"1a558efe6e8e1b1571eb4d01459e83ceb053771d","modified":1521681905814},{"_id":"themes/gal/source/js/highslide/graphics/loader.gif","hash":"4272f4281fef2291084ce39b4879d882d1d02282","modified":1521681905817},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-black-border.gif","hash":"e5c77f071bbf04dac163975aa7e0ca3cc861c1a2","modified":1521681905811},{"_id":"themes/gal/source/js/highslide/graphics/icon.gif","hash":"adb9b20bbf658344146391b6ca123f4216779f2d","modified":1521681905816},{"_id":"themes/gal/source/js/highslide/graphics/loader.white.gif","hash":"f2af060f1cadbc9065c8c465c648dc01be67cc12","modified":1521681905817},{"_id":"themes/gal/source/js/highslide/graphics/zoomout.cur","hash":"2d1695a011edd32a1abc5329dcf4b8ee196d5e7f","modified":1521681905840},{"_id":"themes/gal/source/js/highslide/graphics/resize.gif","hash":"384cf559cd34e483635fac1fc00eba3c4ba861f8","modified":1521681905838},{"_id":"themes/gal/source/js/highslide/graphics/zoomin.cur","hash":"8dd0e088ec7172185c2363e9b5f83eedb4e8dac4","modified":1521681905839},{"_id":"themes/gal/source/js/highslide/graphics/scrollarrows.png","hash":"92786fa2516184af92ec80b72e70d26f82a36cbe","modified":1521681905839},{"_id":"themes/gal/source/imgs/slide/background3.jpg","hash":"32909d14c33e836e94a947aa9cbe052377fd78d5","modified":1521681905753},{"_id":"themes/gal/source/imgs/slide/background4.jpg","hash":"28a21fce4b722cfc2f5f8aaf0b134da2ef60eab8","modified":1521681905769},{"_id":"themes/gal/source/imgs/preview/preview4.jpg","hash":"63c2b5ec882455a1c74c439b2d41f31a1b17fde8","modified":1521681905748},{"_id":"themes/gal/source/js/highslide/graphics/outlines/beveled.png","hash":"9c2403fd9e01c7cbdf7a46996e2281d2c6aeedf3","modified":1521681905819},{"_id":"themes/gal/source/js/highslide/graphics/outlines/glossy-dark.png","hash":"b8b85fb1311502c237a6e9c3bdabe232369e252d","modified":1521681905820},{"_id":"themes/gal/source/js/highslide/graphics/outlines/drop-shadow.png","hash":"90c718ca34fa1d7c82a5b5b6949acb89c2aaa77f","modified":1521681905819},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-white.png","hash":"c4ef235dcc34844e4050f845ff4ce22ce35fe0b8","modified":1521681905838},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-black.png","hash":"360010e15638eb126612c5f13ffbc7c69c5c5293","modified":1521681905838},{"_id":"themes/gal/source/js/highslide/graphics/outlines/outer-glow.png","hash":"20af958d47ea54aa1474b73e62e115c50d18f7a9","modified":1521681905837},{"_id":"themes/gal/source/imgs/preview/preview2.jpg","hash":"84a1b22a5b11c77159495d3b0b1c707a02287796","modified":1521681905745},{"_id":"themes/gal/source/imgs/slide/background6.jpg","hash":"da471d9801cf963ebf566341d1bea1483d81e435","modified":1521681905772},{"_id":"themes/gal/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1521681905718},{"_id":"themes/gal/source/imgs/slide/background1.jpg","hash":"494fcbd2414a8b1d96d010bc7f2c53bfc2eb2156","modified":1521681905751},{"_id":"themes/gal/source/js/highslide/graphics/outlines/Outlines.psd","hash":"4cbeb7a5e833556f1b0f977c72edb59e8fd8f1d7","modified":1521681905819},{"_id":"public/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1536108956337},{"_id":"public/imgs/mouse2.cur","hash":"8a9fd78a78d446316485595bad42d44330f7bee2","modified":1536108956341},{"_id":"public/imgs/touxiang.jpg","hash":"af327665f3847d3b77c7c500416d2c3299a15f5b","modified":1536108956346},{"_id":"public/imgs/mouse1.cur","hash":"18ed6adcdcf37b0fe2c0e14d528f23c6a7417302","modified":1536108956342},{"_id":"public/imgs/oni.mp3","hash":"af30f8f2574679964c98927a22a5696e44be56fb","modified":1536108956341},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1536108956346},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1536108956346},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1536108956366},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1536108956347},{"_id":"public/imgs/xsbg.gif","hash":"0c07e169d9d07a7e8f71b9baed5942234d31f457","modified":1536108956347},{"_id":"public/imgs/oni/oni2.jpg","hash":"4f2c0a00ee1be183bc77baeebf551fe143ff7ae7","modified":1536108956366},{"_id":"public/imgs/oni/oni1.jpg","hash":"f5a33419ad2701f7a2402a867c9652cdc5e61b98","modified":1536108956366},{"_id":"public/imgs/oni/oni3.jpg","hash":"f76271fd447762d4ddf6c966468a77a8971ace9e","modified":1536108956366},{"_id":"public/imgs/oni/oni4.jpg","hash":"92ce21f12dbe309a4674e66c048d8d75f8430fda","modified":1536108956366},{"_id":"public/imgs/oni/oni5.jpg","hash":"d1a83c12492e7c41ccb8a03cd5157c5397514e23","modified":1536108956366},{"_id":"public/imgs/oni/oni6.jpg","hash":"bb3847273571a3ccd6a63526dded82aaa1afe600","modified":1536108956382},{"_id":"public/imgs/preview/preview6.jpg","hash":"53a12cc25f7521dcc1809b59838c898f39735e01","modified":1536108956382},{"_id":"public/imgs/preview/preview5.jpg","hash":"d21f0ccb947ef971c139b3951193cb5890d5004d","modified":1536108956382},{"_id":"public/imgs/smilies/11.png","hash":"68a39392c1bcd626202b1a8c18577fe23790028a","modified":1536108956382},{"_id":"public/imgs/smilies/1.png","hash":"b4123ae41f1f954f42515c30ed545af7706fe67e","modified":1536108956382},{"_id":"public/imgs/smilies/10.png","hash":"35b01e2b70df99ac7b088da02a52cdbf8507727f","modified":1536108956382},{"_id":"public/imgs/smilies/12.png","hash":"15c2185a9c9f7576dc34898a18bc0810d1c33780","modified":1536108956382},{"_id":"public/imgs/smilies/14.png","hash":"c16a7dfe5bff382314f2ab51a19f7118c04acf57","modified":1536108956382},{"_id":"public/imgs/smilies/17.png","hash":"03f0b4d1e0b0d4334a530be68531b9a320b8ea44","modified":1536108956382},{"_id":"public/imgs/smilies/13.png","hash":"b7f4e2eba2993ead15314e5e3a1e52d03b35ff7e","modified":1536108956382},{"_id":"public/imgs/smilies/15.png","hash":"9bc4ab8044a8ba0728b549ca98bfc9abeed21b3a","modified":1536108956382},{"_id":"public/imgs/smilies/16.png","hash":"3f1aca6372ba7a0e0c57777c44f01ac6fb2bf73e","modified":1536108956382},{"_id":"public/imgs/smilies/19.png","hash":"a5c74a5f6dc2a3b5b39c85bc0d9d74157c57c7ec","modified":1536108956382},{"_id":"public/imgs/smilies/18.png","hash":"34df863688b2b026eb8a7d3aad122f47eafae894","modified":1536108956382},{"_id":"public/imgs/smilies/2.png","hash":"b023745ae517965a226d1656bf33acdcdf246084","modified":1536108956382},{"_id":"public/imgs/smilies/20.png","hash":"abfa7f204aec320de0bd59f366b1935119c1f0c7","modified":1536108956382},{"_id":"public/imgs/smilies/22.png","hash":"5ba3108a366aaef568d8dd4c5208fde59f4d6331","modified":1536108956382},{"_id":"public/imgs/smilies/23.png","hash":"74e42f550fcb4c562a39f777a77ee4316054abd4","modified":1536108956382},{"_id":"public/imgs/smilies/21.png","hash":"fdd175985771a9c694f81199ff2733df483331cb","modified":1536108956382},{"_id":"public/imgs/smilies/3.png","hash":"b087320a3cc9725d5601d106f24d38075a5b5474","modified":1536108956382},{"_id":"public/imgs/smilies/24.png","hash":"38751e1b4ad260a7fe035d1e3e37d3fffdb5b540","modified":1536108956398},{"_id":"public/imgs/smilies/25.png","hash":"5009b4bd8c30d1912bde8e5fe6add4f8f12413fd","modified":1536108956398},{"_id":"public/imgs/smilies/5.png","hash":"56589a046bd38eda5d0386c5a3497898e4591fa2","modified":1536108956398},{"_id":"public/imgs/smilies/4.png","hash":"76b7df92f0590512ee52d5200d6edd7e8ba8161b","modified":1536108956398},{"_id":"public/imgs/smilies/9.png","hash":"5481e5b6b9c53ee522987c858ddda9652633b137","modified":1536108956398},{"_id":"public/imgs/smilies/6.png","hash":"0c04289d0f565bcf1dd3924672914cfe87bb8df4","modified":1536108956398},{"_id":"public/imgs/smilies/8.png","hash":"01da87b1689ea955db6b3e3f40a8e0a2a972e209","modified":1536108956398},{"_id":"public/imgs/smilies/7.png","hash":"0c0292581ea4ae2c61a4c03c1f9f045f6a523069","modified":1536108956398},{"_id":"public/js/highslide/graphics/closeX.png","hash":"11c435153ec20e4f0e784dd849e0181104a77b1d","modified":1536108956429},{"_id":"public/js/highslide/graphics/controlbar-text-buttons.png","hash":"c738717eaeeafba67326b7e65641d9d6a55f0b45","modified":1536108956429},{"_id":"public/js/highslide/graphics/close.png","hash":"6227e5d22184d5f4a01aa29aa35f92717c6e838b","modified":1536108956429},{"_id":"public/js/highslide/graphics/controlbar3.gif","hash":"0077e495245ed61f0b23bb212f0bc2b8ad85c037","modified":1536108956429},{"_id":"public/js/highslide/graphics/controlbar2.gif","hash":"e964df6eb758c9328e53de3681467fd10a5ba8c7","modified":1536108956429},{"_id":"public/js/highslide/graphics/controlbar-white-small.gif","hash":"8e87bcc585d3717e5ba29b8f1f53abb3a192f3e9","modified":1536108956429},{"_id":"public/js/highslide/graphics/controlbar4-hover.gif","hash":"f8d9c2a7c52c480e34bd1858391e0878ae868e62","modified":1536108956429},{"_id":"public/js/highslide/graphics/controlbar4.gif","hash":"6bafeabac1ed78ddc7e99823c34a0d0e34592f66","modified":1536108956429},{"_id":"public/js/highslide/graphics/fullexpand.gif","hash":"b294249f054b8d765fa4f962760c8a63694563f9","modified":1536108956429},{"_id":"public/js/highslide/graphics/geckodimmer.png","hash":"823e387d1ce37cf781228c766fb4b214bb2940ff","modified":1536108956429},{"_id":"public/js/highslide/graphics/controlbar-white.gif","hash":"1a558efe6e8e1b1571eb4d01459e83ceb053771d","modified":1536108956429},{"_id":"public/js/highslide/graphics/loader.gif","hash":"4272f4281fef2291084ce39b4879d882d1d02282","modified":1536108956429},{"_id":"public/js/highslide/graphics/controlbar-black-border.gif","hash":"e5c77f071bbf04dac163975aa7e0ca3cc861c1a2","modified":1536108956429},{"_id":"public/js/highslide/graphics/icon.gif","hash":"adb9b20bbf658344146391b6ca123f4216779f2d","modified":1536108956429},{"_id":"public/js/highslide/graphics/loader.white.gif","hash":"f2af060f1cadbc9065c8c465c648dc01be67cc12","modified":1536108956429},{"_id":"public/js/highslide/graphics/resize.gif","hash":"384cf559cd34e483635fac1fc00eba3c4ba861f8","modified":1536108956429},{"_id":"public/js/highslide/graphics/zoomout.cur","hash":"2d1695a011edd32a1abc5329dcf4b8ee196d5e7f","modified":1536108956429},{"_id":"public/js/highslide/graphics/zoomin.cur","hash":"8dd0e088ec7172185c2363e9b5f83eedb4e8dac4","modified":1536108956429},{"_id":"public/js/highslide/graphics/scrollarrows.png","hash":"92786fa2516184af92ec80b72e70d26f82a36cbe","modified":1536108956429},{"_id":"public/js/highslide/graphics/outlines/glossy-dark.png","hash":"b8b85fb1311502c237a6e9c3bdabe232369e252d","modified":1536108956429},{"_id":"public/js/highslide/graphics/outlines/beveled.png","hash":"9c2403fd9e01c7cbdf7a46996e2281d2c6aeedf3","modified":1536108956429},{"_id":"public/js/highslide/graphics/outlines/rounded-white.png","hash":"c4ef235dcc34844e4050f845ff4ce22ce35fe0b8","modified":1536108956429},{"_id":"public/js/highslide/graphics/outlines/drop-shadow.png","hash":"90c718ca34fa1d7c82a5b5b6949acb89c2aaa77f","modified":1536108956429},{"_id":"public/js/highslide/graphics/outlines/rounded-black.png","hash":"360010e15638eb126612c5f13ffbc7c69c5c5293","modified":1536108956429},{"_id":"public/js/highslide/graphics/outlines/outer-glow.png","hash":"20af958d47ea54aa1474b73e62e115c50d18f7a9","modified":1536108956429},{"_id":"public/imgs/avatar.jpg","hash":"6317956f59fd3760799d855931b39bae031a20d5","modified":1536108957433},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536108957438},{"_id":"public/imgs/weixin.jpg","hash":"01d3ef9a5bcdd3b528f0e0f6afded1993dbf94de","modified":1536108957438},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1536108957438},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536108957438},{"_id":"public/imgs/alipay.jpg","hash":"3f70bd1b2f6f06b1dc7a7129636ef297fdb08510","modified":1536108957438},{"_id":"public/imgs/slide/background2.jpg","hash":"578a36104aa5bfdb05c1fcc4b5671b9791f096b9","modified":1536108957438},{"_id":"public/imgs/slide/background5.jpg","hash":"d1e8721833f1bba4b671df13abe89417c3164bd6","modified":1536108957438},{"_id":"public/js/blog.js","hash":"3be90f72916e1fd62bd11e5d35e41d3b1386cba3","modified":1536108957672},{"_id":"public/js/bootstrap-hover-dropdown.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536108957671},{"_id":"public/js/activate-power-mode.js","hash":"a21f2119965860b613e17dbcb8a21c18a55b595f","modified":1536108957672},{"_id":"public/js/hs.js","hash":"c044f43539a61403e6529141508c631829ed4045","modified":1536108957672},{"_id":"public/js/aos.js","hash":"7ca38e8b8c6febc6f6d0d80ff9cdd14d6ab4dcd6","modified":1536108957672},{"_id":"public/js/oni.js","hash":"40505975c163f86314d92ad6a4e11b26d79e7f7a","modified":1536108957672},{"_id":"public/js/highslide/highslide-ie6.css","hash":"1079b3a749a6fd1ee6ed81d8bdc40588c08b2749","modified":1536108957672},{"_id":"public/js/comment/leancloud.js","hash":"f7428f717eb2816e83919c5654c3c2921b1f2963","modified":1536108957672},{"_id":"public/js/highslide/highslide.css","hash":"456631547423fb0ce00c7e084d8321bda5d8428e","modified":1536108957672},{"_id":"public/css/aos.css","hash":"016028b2f6389e90a8ada1c20c6e55771776589a","modified":1536108957672},{"_id":"public/js/bootstrap.min.js","hash":"430a443d74830fe9be26efca431f448c1b3740f9","modified":1536108957672},{"_id":"public/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1536108957672},{"_id":"public/js/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1536108957673},{"_id":"public/js/highslide/highslide-with-html.min.js","hash":"c579f05dc8a3430d0b49349f1dca67d9d86eac92","modified":1536108957672},{"_id":"public/js/highslide/highslide-with-gallery.min.js","hash":"bc76441920217090ed383eb240d03e78ae6703ed","modified":1536108957672},{"_id":"public/js/highslide/highslide.min.js","hash":"e1f8252b25bcc59aefd9020f0e60deff04926d21","modified":1536108957672},{"_id":"public/js/highslide/highslide-with-gallery.packed.js","hash":"a6766e9a5db22448195558a6141bf44e333132aa","modified":1536108957672},{"_id":"public/js/highslide/highslide.js","hash":"fd327fcdcd90478c6d79cd47d0a004c942d50c2d","modified":1536108957672},{"_id":"public/js/highslide/highslide.packed.js","hash":"194a5f8067cac605c8acd9f2e2859ef541b05a87","modified":1536108957673},{"_id":"public/js/highslide/highslide-with-html.packed.js","hash":"352a0bfac404c555eab47f41e3fb553b1ece2042","modified":1536108957673},{"_id":"public/js/highslide/highslide-full.packed.js","hash":"3b5b18256e58e95b759b6a942503470abbf3d4db","modified":1536108957690},{"_id":"public/js/comment/gitment.js","hash":"e2d0ca8d791d7bd531d1828b5ed2fd0634088a6f","modified":1536108957692},{"_id":"public/js/highslide/highslide-with-html.js","hash":"119fafa7800da04c718bc72d8a95a1d99beaeb11","modified":1536108957673},{"_id":"public/js/highslide/highslide-full.min.js","hash":"8d660332bd227272c20f7a876a05dcf967e0d265","modified":1536108957673},{"_id":"public/js/highslide/highslide-with-gallery.js","hash":"17ecfee0fb7a487dace39a48e8b5866443a498a1","modified":1536108957673},{"_id":"public/js/highslide/highslide-full.js","hash":"99c9a118d8da8b69a8a721ed734ec71a7f220cfa","modified":1536108957692},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536108957673},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536108957673},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536108957673},{"_id":"public/imgs/slide/background3.jpg","hash":"32909d14c33e836e94a947aa9cbe052377fd78d5","modified":1536108957673},{"_id":"public/imgs/slide/background4.jpg","hash":"28a21fce4b722cfc2f5f8aaf0b134da2ef60eab8","modified":1536108957673},{"_id":"public/js/highslide/graphics/outlines/Outlines.psd","hash":"4cbeb7a5e833556f1b0f977c72edb59e8fd8f1d7","modified":1536108957690},{"_id":"public/imgs/preview/preview4.jpg","hash":"63c2b5ec882455a1c74c439b2d41f31a1b17fde8","modified":1536108957690},{"_id":"public/imgs/slide/background6.jpg","hash":"da471d9801cf963ebf566341d1bea1483d81e435","modified":1536108957745},{"_id":"public/imgs/preview/preview2.jpg","hash":"84a1b22a5b11c77159495d3b0b1c707a02287796","modified":1536108957745},{"_id":"public/imgs/slide/background1.jpg","hash":"494fcbd2414a8b1d96d010bc7f2c53bfc2eb2156","modified":1536108957795},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1536108957915},{"_id":"source/_posts/lombok.md","hash":"a386017c69998ce28583b140be2a9fad01aad762","modified":1536032196091},{"_id":"source/_posts/spring-boot知识点.md","hash":"3846ad1e27e6cded85df154c2a885caa9ee2217c","modified":1535943921060},{"_id":"source/imgs/MessageConverter.png","hash":"0576d1cffea5ad3d674da3ec90545ea794f6c7d7","modified":1533085969288},{"_id":"source/_posts/img/lombpk http proxy.JPG","hash":"960bd5d8e6dec1607a2f7c6c34c2db66330f2d54","modified":1536026930409},{"_id":"public/archives/2018/07/index.html","hash":"f3c07b0e88da189f100591845317614ecefd1cea","modified":1536108956247},{"_id":"public/archives/2018/09/index.html","hash":"aa73ca4b16f323d722cf4cf848d9d66250c8a678","modified":1536108956247},{"_id":"public/categories/lombok/index.html","hash":"0f15ddde6da5468ec73f3420f78fa7322b0185e5","modified":1536029534668},{"_id":"public/tags/lombok/index.html","hash":"c1bc5d5f958b65e77ae32599b4b722a872a458a3","modified":1536108956247},{"_id":"public/aticle/lombok.html","hash":"8cdf056942423f3fba8d761bd2c0d723b5798c88","modified":1536108956247},{"_id":"public/aticle/spring-boot知识点.html","hash":"72b89bcd690386cde707bd07cb22c850c3ca4a32","modified":1536029534663},{"_id":"public/imgs/MessageConverter.png","hash":"0576d1cffea5ad3d674da3ec90545ea794f6c7d7","modified":1536108956429},{"_id":"themes/replica/LICENSE","hash":"dae982bca6e2d3d0527e4619de459419c7c838fc","modified":1534869648000},{"_id":"themes/replica/.gitignore","hash":"b9c4d3cfcf0530fa5ee6eacf43499be4b0fd0505","modified":1534869648000},{"_id":"themes/replica/README.md","hash":"0f0056a2cf0ee8c001ae17e34e29ab1556738ad8","modified":1534869648000},{"_id":"themes/replica/_config.yml","hash":"ba1067121ffa9a172f786b049e736c9a68b4145a","modified":1536029359627},{"_id":"themes/replica/layout/archive.ejs","hash":"272d2625953f60a28b90c074c3e2d606b3cd28d3","modified":1534869648000},{"_id":"themes/replica/layout/index.ejs","hash":"da2ab461d0d44dbd7f1bd0b36aa7d6b508aa34ba","modified":1534869648000},{"_id":"themes/replica/layout/layout.ejs","hash":"f6a45300b7e765a360de6903cb500fffdf5c7a74","modified":1534869648000},{"_id":"themes/replica/layout/page.ejs","hash":"f9b3d303225b32893b411f3638a3885c56e90cdb","modified":1534869648000},{"_id":"themes/replica/layout/post.ejs","hash":"851e9404a79274d2cb8a13808116dfcb53d069d4","modified":1534869648000},{"_id":"themes/replica/test/main.test.js","hash":"f754846394a9e01b6e0feb590dd1d9ccd0d5d4de","modified":1534869648000},{"_id":"themes/replica/layout/_widget/google-analytics.ejs","hash":"21e4951dd61edd4f09056485d2e15b177895b46f","modified":1534869648000},{"_id":"themes/replica/layout/_widget/baidutongji.ejs","hash":"f11adfa3dd5d47039b58bf9174a16ced87a10a6e","modified":1534869648000},{"_id":"themes/replica/layout/_widget/gitalk.ejs","hash":"03547aaf44fe813f3d35613a086f567c4c0287dc","modified":1534869648000},{"_id":"themes/replica/layout/_widget/disqus.ejs","hash":"ac8a5ae8517318d094381621a6ef9c3e00e60c8f","modified":1534869648000},{"_id":"themes/replica/layout/_widget/google-custom-search.ejs","hash":"789f910476fe50827c6e9733efae44358c084360","modified":1534869648000},{"_id":"themes/replica/layout/_partial/calendar.ejs","hash":"5c5168d6d633b1e59a692b52556b62d808e14527","modified":1534869648000},{"_id":"themes/replica/layout/_partial/article.ejs","hash":"a44a7c573357b68cfaf17241a5b8f766ec739e26","modified":1534869648000},{"_id":"themes/replica/layout/_partial/footer.ejs","hash":"15368c9a044db4023869d9683125d4f60f70fe78","modified":1534869648000},{"_id":"themes/replica/layout/_partial/head.ejs","hash":"f64c408a9ce6a1a19cf46c104cd1b01140fe40f5","modified":1534869648000},{"_id":"themes/replica/layout/_partial/header.ejs","hash":"ccfbea43f40e18c3ea4c2d3737c31d492469c5f7","modified":1534869648000},{"_id":"themes/replica/layout/_partial/navbar-secondary.ejs","hash":"aac14de4f63d8d9c4fde0219d1206aa1f0d7627b","modified":1534869648000},{"_id":"themes/replica/layout/_partial/intro.ejs","hash":"237c0f450091987c8a288e0db3d1594d1cd73261","modified":1534869648000},{"_id":"themes/replica/layout/_partial/navbar.ejs","hash":"5c98071ca0ba54cb62bc2f6d05c1e5cdb87af720","modified":1534869648000},{"_id":"themes/replica/layout/_partial/script.ejs","hash":"c917cc709366b5706b1112a2d25f7daf387a12a1","modified":1534869648000},{"_id":"themes/replica/source/css/_variables.styl","hash":"0a92cf3cc9eb415bbbab6e8877b6e8e74a9dcba9","modified":1534869648000},{"_id":"themes/replica/source/css/calendar.styl","hash":"becd031536714de84b2eed0f3ef126c13b039b83","modified":1534869648000},{"_id":"themes/replica/source/css/base.styl","hash":"2e8da20b7b1c4ac07d2d1f8d757280b9d5be448f","modified":1534869648000},{"_id":"themes/replica/source/css/code.styl","hash":"564801429f03baf12febbfdd26b22b75bbfa0942","modified":1534869648000},{"_id":"themes/replica/source/css/footer.styl","hash":"f50089ebf0e9b560983b09faad3cc9ced495aaed","modified":1534869648000},{"_id":"themes/replica/source/css/header.styl","hash":"b6819022575a1c6ed6039ac7cce8803c109a57f6","modified":1534869648000},{"_id":"themes/replica/source/css/main.css","hash":"79f4322bba35e45842b0f716b0729d63aa7e701d","modified":1534869648000},{"_id":"themes/replica/source/css/main.styl","hash":"be52d36fe639daf41bc3dd1ebbee5b095dc2fe94","modified":1534869648000},{"_id":"themes/replica/source/css/navbar.styl","hash":"89ffd20429b149ac492334a8a02fda28cfedb93e","modified":1534869648000},{"_id":"themes/replica/source/css/post.styl","hash":"fe2ca0f09fcaca787fe265817feed5d3ec2ce94a","modified":1534869648000},{"_id":"themes/replica/source/js/main.js","hash":"0765b737c847cd7d0ab79997b7fdd8eb989b7aee","modified":1534869648000},{"_id":"source/_posts/img/lombok http proxy.JPG","hash":"960bd5d8e6dec1607a2f7c6c34c2db66330f2d54","modified":1536026930409},{"_id":"public/css/base.css","hash":"46d94f57872e554fb7eda3cbc290ce29a9dfc969","modified":1536108957689},{"_id":"public/css/calendar.css","hash":"7a7631065237b046550b885dd1f9b77f6f6997c1","modified":1536108957689},{"_id":"public/css/footer.css","hash":"7df1b3fc06147cccfedeb9bf2dccd1b68b2eff39","modified":1536108957690},{"_id":"public/css/code.css","hash":"363e8f6c079361c8ffa515015708116d1b896541","modified":1536108957690},{"_id":"public/css/header.css","hash":"94db4946462f6638405c74f075dce73a8577f7d2","modified":1536108957690},{"_id":"public/css/navbar.css","hash":"330328411107337e08291fba3dc9398a4b45cb01","modified":1536108957690},{"_id":"public/css/post.css","hash":"11a2d15f1d82405a2c8a1c07132e2864eee8b20c","modified":1536108957690},{"_id":"public/js/main.js","hash":"0765b737c847cd7d0ab79997b7fdd8eb989b7aee","modified":1536108957690},{"_id":"public/css/main.css","hash":"145239704564ffa6b612246022a2fb191d8ef213","modified":1536108957690},{"_id":"source/_posts/img/lombokhttpproxy.JPG","hash":"960bd5d8e6dec1607a2f7c6c34c2db66330f2d54","modified":1536026930409},{"_id":"source/imgs/lombokhttpproxy.JPG","hash":"960bd5d8e6dec1607a2f7c6c34c2db66330f2d54","modified":1536026930409},{"_id":"source/_posts/WordPress搭建.md","hash":"ab5c7c14198e3b970386408cdfcd6d8fffb01967","modified":1536031693261},{"_id":"source/_posts/centos-mq.md","hash":"9c33c9e4cda2f460450dec97686a2d050da7b115","modified":1536031278126},{"_id":"source/_posts/centos-mysql.md","hash":"9f8fd62cec3b1f705712be0c89d7ee7def9a357e","modified":1525918909515},{"_id":"source/_posts/dubbo.md","hash":"51b662b6587b0bc5709323d6ee963b916e601536","modified":1525918789760},{"_id":"source/_posts/git.md","hash":"8d31a0601b1c01532f8c7751481bdfaa44c58b37","modified":1536031985979},{"_id":"source/_posts/java8.md","hash":"c029a084c1a4405880dfdc830f537c2afc8e1128","modified":1536032062701},{"_id":"source/_posts/helloworld.md","hash":"dda274a26ff23658004255e27e9519b140089c40","modified":1536031388589},{"_id":"source/_posts/redis.md","hash":"f6066cc71dfdc2068d43c08b5a3e88bdda453dc1","modified":1536031476491},{"_id":"source/_posts/redis集群.md","hash":"7d6f5afac9aa08cb9affb2263365d788c7b8e8ce","modified":1536031490494},{"_id":"source/_posts/vi-error.md","hash":"981f068d6f848629b8ddb867b6871ecabe498eec","modified":1536031746952},{"_id":"source/_posts/wechat.md","hash":"91d7a198594f64021d10f3212187f35fbc617854","modified":1525918551065},{"_id":"source/_posts/springboot.md","hash":"c9de694de8d336f78a5b6a3e3e33dfd7080f4797","modified":1536031646550},{"_id":"source/_posts/wordpress-nginx.md","hash":"0edf2e2dbd57147dec67814e3d19a0a1cfbe10cc","modified":1536031709844},{"_id":"source/_posts/wordpress.md","hash":"4f2158eebb090a1e8d8834830e2f40a5a92742bf","modified":1536031338260},{"_id":"source/_posts/WordPress.md","hash":"ab5c7c14198e3b970386408cdfcd6d8fffb01967","modified":1536031693261},{"_id":"source/_posts/springboot-notes.md","hash":"3846ad1e27e6cded85df154c2a885caa9ee2217c","modified":1535943921060},{"_id":"source/_posts/springbatch.md","hash":"c9de694de8d336f78a5b6a3e3e33dfd7080f4797","modified":1536031646550},{"_id":"source/_posts/wordpress-https.md","hash":"4f2158eebb090a1e8d8834830e2f40a5a92742bf","modified":1536031338260},{"_id":"public/aticle/springboot-notes.html","hash":"613e2dce87aae7f180a36af25de14131cf696613","modified":1536108956247},{"_id":"public/aticle/java8.html","hash":"d379ee21db7dac146c278bc3279b40e6629677b9","modified":1536108956247},{"_id":"public/aticle/wordpress-https.html","hash":"601b61700a6382ff9aa142104ec6b77e8f401565","modified":1536108956247},{"_id":"public/aticle/wordpress-nginx.html","hash":"accd8e71c1588f492adc86fd0259cc67e06b30c8","modified":1536108956247},{"_id":"public/aticle/redis集群.html","hash":"d218a756633083c9553d0d8a9fc5826c0bab8cf6","modified":1536108956247},{"_id":"public/aticle/redis.html","hash":"fbadc6f99f9639d57bddccdb0261e5441f0a8b84","modified":1536108956247},{"_id":"public/aticle/git.html","hash":"ccbebf5758680444bdcb9ec73e10c50add8b1428","modified":1536108956247},{"_id":"public/aticle/dubbo.html","hash":"07534f7e1a3bdb629d56c5ec80fe5b07d0c637c1","modified":1536108956247},{"_id":"public/aticle/centos-mysql.html","hash":"31d3ba2442fd262174804728a07f091f7f46ccca","modified":1536108956247},{"_id":"public/aticle/springbatch.html","hash":"dd4154249ad3609bef5cde49c6a1ce8664a659b1","modified":1536108956247},{"_id":"public/aticle/WordPress.html","hash":"3d4652343890ab085023e9fc70b20f834705b536","modified":1536108956247},{"_id":"public/aticle/wechat.html","hash":"22099abe81aea28dae8be4182e7463483aa37b73","modified":1536108956247},{"_id":"public/aticle/centos-mq.html","hash":"7841e62c777b351fd8cadfb420b727acfbf61b33","modified":1536108956247},{"_id":"public/aticle/helloworld.html","hash":"47cf92552ef7c1a7d0ee8fe575e2e8166a9334ff","modified":1536108956247},{"_id":"public/categories/Essay/index.html","hash":"d0bdaebfe73c15132aceba892d7e3b62c021cb6f","modified":1536108956247},{"_id":"public/categories/Github/index.html","hash":"01aca20c39d129237f12dc76d22ad5f58dc0607b","modified":1536108956247},{"_id":"public/categories/Java/index.html","hash":"fbbb98a808bc83c9c08dfc75699fd171418fb6a1","modified":1536108956247},{"_id":"public/categories/Lombok/index.html","hash":"15598c37f2da9600ba9545ba365dbede918f8b9c","modified":1536108956247},{"_id":"public/tags/java/index.html","hash":"982e10e2520e7f0b8056f87c15df1b8bf1e73cd3","modified":1536108956247},{"_id":"public/tags/Essay/index.html","hash":"34703dcea232e638c9b699c38407f9275cba51d0","modified":1536108956247},{"_id":"public/tags/docker/index.html","hash":"e410fc60ad6820dd5db158e41343be72c3648cc3","modified":1536108956247},{"_id":"public/imgs/lombokhttpproxy.JPG","hash":"960bd5d8e6dec1607a2f7c6c34c2db66330f2d54","modified":1536108957673}],"Category":[{"name":"noname","_id":"cjj41660000044ggpv4r7l05y"},{"name":"Docker","_id":"cjj41660p000h4ggpkz256cja"},{"name":"WeChat小程序","_id":"cjj41660v000p4ggp5p3rtawf"},{"name":"杂项","_id":"cjj416611000x4ggpkmusesus"},{"name":"Redis","_id":"cjj41661700134ggp990luerk"},{"name":"WordPress","_id":"cjj41661o001h4ggp52fv8lje"},{"name":"Dubbo","_id":"cjj41661r001o4ggpwdhagjz6"},{"name":"CentOS","_id":"cjj41661s001r4ggp5k2fkmj2"},{"name":"Spring-batch","_id":"cjj41661s001t4ggppy0m771q"},{"name":"java","_id":"cjj41661y001y4ggpe621c8w4"},{"name":"杂项","parent":"cjj41661s001r4ggp5k2fkmj2","_id":"cjj41661z00204ggpn46oovw6"},{"name":"github","_id":"cjj4166mc00264ggprn2hfjp1"},{"name":"lombok","_id":"cjln37s2100029ggpld98y33p"},{"name":"essay","parent":"cjj41661s001r4ggp5k2fkmj2","_id":"cjln57e95000040gpsqvk8q4c"},{"name":"essay","_id":"cjln58d75000240gpr6x66mcv"},{"name":"Essay","_id":"cjln5fgt4000i88gpy9ukbnki"},{"name":"Github","_id":"cjln5s9rn00005wgp101nbrnb"},{"name":"Java","_id":"cjln5tmkf00025wgpisfihvex"},{"name":"Lombok","_id":"cjln5wrvy000f5wgpyl67xx73"}],"Data":[],"Page":[{"title":"404","date":"2018-03-21T12:50:55.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-03-21 20:50:55\n---\n","updated":"2018-03-22T01:25:05.608Z","path":"404/index.html","comments":1,"layout":"page","_id":"cjj4165zk00004ggp9ni7ixbu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404","date":"2018-03-21T12:50:55.000Z","_content":"\n自我审核中。。。。\n","source":"about/index.md","raw":"---\ntitle: 404\ndate: 2018-03-21 20:50:55\n---\n\n自我审核中。。。。\n","updated":"2018-03-22T09:38:31.478Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjj4165zw00024ggpo4ga0bqg","content":"<p>自我审核中。。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>自我审核中。。。。</p>\n"},{"title":"categories","date":"2018-04-26T09:08:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-04-26 17:08:23\ntype: \"categories\"\ncomments: false  \n\n---\n","updated":"2018-04-27T01:08:23.607Z","path":"categories/index.html","layout":"page","_id":"cjj41660700064ggpnm710rr8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","date":"2018-03-21T12:50:47.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2018-03-21 20:50:47\n---\n","updated":"2018-03-22T01:25:05.609Z","path":"search/index.html","comments":1,"layout":"page","_id":"cjj41660c00084ggpbyonww9t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-04-26T09:10:39.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-04-26 17:10:39\ntype: \"tags\"\ncomments: false\n\n---\n","updated":"2018-04-27T01:08:48.354Z","path":"tags/index.html","layout":"page","_id":"cjj41660e000a4ggp0qt3nu0p","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Docker容器中搭建Redis集群","id":"523","date":"2018-05-30T10:00:00.000Z","author":["linxu"],"_content":"\n# Redis简介 #\nRedis为传说中的内存数据库的一种，运行在内存中，性能强大，还可以用作缓存和消息中间件。Redis支持多种数据结构的存储，提供了大部分平台的客户端，使用方便。\n\n# Redis优缺点 #\n## 优点 ##\n1. 性能极高：Redis能读的速度是110000次/s,写的速度是81000次/s。\n2. 丰富的数据类型：Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\n3. 原子：Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。\n4. 丰富的特性：Redis还支持 publish/subscribe, 通知, key 过期等等特性。\n\n## 缺点 ##\n1. Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。\n2. 主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。\n3. redis的主从复制采用全量复制，从机新加入集群或者从机和主机网络断开重连时都会进行，复制过程中主机会fork出一个子进程对内存做一份快照，并将内存快照保存为文件发送给从机，需要保证主机的内存足够。若快照文件较大，将影响集群的服务能力。\n4. Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。所以运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n\n# Docker中搭建Redis集群 #\n## Dockerfile文件 ##\n将redis-4.0.6.tar.gz,ruby-2.5.0.tar.gz,openssl-1.1.1-pre7.tar.gz文件放入Dockerfile同目录\n```\nfrom centos\nMAINTAINER reallinxu\n\nCOPY redis-4.0.6.tar.gz /usr/software/redis-4.0.6.tar.gz\nRUN mkdir /usr/redis\nRUN tar xzf /usr/software/redis-4.0.6.tar.gz -C /usr/redis\nRUN yum -y install gcc automake autoconf libtool make\nRUN cd /usr/redis/redis-4.0.6 && make\nCOPY ruby-2.5.0.tar.gz /usr/software/ruby-2.5.0.tar.gz\nRUN mkdir /usr/ruby\nRUN tar xzf /usr/software/ruby-2.5.0.tar.gz -C /usr/ruby\nRUN cd /usr/ruby/ruby-2.5.0 && ./configure && ls Makefile && make && make install\nRUN yum install -y rubygems\nRUN yum install -y zlib-devel\nCOPY openssl-1.1.1-pre7.tar.gz /usr/software/openssl-1.1.1-pre7.tar.gz\nRUN mkdir /usr/openssl\nRUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl\nRUN cd /usr/openssl/openssl-1.1.1-pre7 && ./config -fPIC --prefix=/usr/local/openssl enable-shared && ./config -t && make && make install\nRUN cd /usr/ruby/ruby-2.5.0/ext/zlib && ruby ./extconf.rb && sed -i 's/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/' Makefile && make && make install \nRUN cd /usr/ruby/ruby-2.5.0/ext/openssl && ruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib && sed -i 's/$(top_srcdir)/..\\/../g' Makefile && make && make install\nRUN gem install redis\nRUN sed -i 's/daemonize no/daemonize yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/dir .\\//dir \\/usr\\/redis\\//' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-enabled yes/cluster-enabled yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-node-timeout 15000/cluster-node-timeout 15000/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/appendonly no/appendonly yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN rm -rf /usr/software/redis-4.0.6.tar.gz\nRUN rm -rf /usr/software/ruby-2.5.0.tar.gz\nRUN rm -rf /usr/software/openssl-1.1.1-pre7.tar.gz\nEXPOSE 6379\n```\n\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/redis:v1\" .\n```\n## 创建容器 ##\nredis集群需要最少6个节点，3+3模式,所以用以下命令创建6个容器\n```\ndocker run -i -t --name redis1 reallinxu/redis:v1\ndocker run -i -t --name redis2 reallinxu/redis:v1\ndocker run -i -t --name redis3 reallinxu/redis:v1\ndocker run -i -t --name redis4 reallinxu/redis:v1\ndocker run -i -t --name redis5 reallinxu/redis:v1\ndocker run -i -t --name redis6 reallinxu/redis:v1\n```\n## 构建集群 ##\n分别对六台做以下操作：\n1. 查看容器ip\n```\ncat /etc/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.2      263989ddf7e2\n```\n2. 修改redis配置\n```\nvi /usr/redis/redis-4.0.6/redis.conf\n找到 bind 127.0.0.1\n改为 bind 172.17.0.2 #对应容器的ip\n```\n3. 启动redis\n```\ncd /usr/redis/redis-4.0.6/src\n./redis-server ../redis.conf\n```\n\n启动六台后实现集群\n```\n./redis-trib.rb create --replicas 1 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 172.17.0.5:6379 172.17.0.6:6379 172.17.0.7:6379  \n```\n## 测试redis集群 ##\n```\n./redis-cli  -c -h 172.17.0.3 -p 6379  \n172.17.0.3:6379> set a 1\n-> Redirected to slot [15495] located at 172.17.0.4:6379\nOK\n172.17.0.3:6379> get a\n-> Redirected to slot [15495] located at 172.17.0.4:6379\n\"1\"\n172.17.0.4:6379> exit\n```\n\n## 遇到的错误 ##\n1. -bash: make: command not found\n解决：安装gcc \n```\nyum -y install gcc automake autoconf libtool make\n```\n2. ERROR:  Loading command: install (LoadError) cannot load such file -- zlib\n解决：需要依赖zlib工具\n```\nyum install -y zlib-devel\n```\n3. Could not create Makefile due to some reason, probably lack of necessary\n解决：zlib需要安装到本地运行库\n```\ncd /usr/ruby/ruby-2.5.0/ext/zlib \nruby ./extconf.rb\nmake\nmake install \n```\n4. make: *** No rule to make target `/include/ruby.h', needed by `zlib.o'.  Stop\n解决：修改makefile文件\n```\nsed -i 's/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/' Makefile \nmake\nmake install\n```\n5. while executing gem ...(Gem:Exception) Unable to require openssl\n解决：需要安装openssl\n```\nwget https://www.openssl.org/source/openssl-1.1.1-pre7.tar.gz\nRUN mkdir /usr/openssl\nRUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl\nRUN cd /usr/openssl/openssl-1.1.1-pre7\n./config -fPIC --prefix=/usr/local/openssl enable-shared  \n./config -t  \nmake  \nmake install\n还需要安装到本地库\ncd /usr/ruby/ruby-2.5.0/ext/openssl\nruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib\nmake\nmake install\n```\n6. make: *** No rule to make target `/include/ruby.h', needed by `ossl.o'.  Stop\n解决：修改makefile文件\n```\nsed -i 's/$(top_srcdir)/..\\/../g' Makefile\nmake\nmake install\n```","source":"_posts/Docker容器中搭建Redis集群.md","raw":"---\ntitle: \"Docker容器中搭建Redis集群\"\ntags:\n  - docker\nid: 523\ncategories:\n  - Docker\ndate: 2018-05-30 18:00:00\nauthor: \n  - linxu\n---\n\n# Redis简介 #\nRedis为传说中的内存数据库的一种，运行在内存中，性能强大，还可以用作缓存和消息中间件。Redis支持多种数据结构的存储，提供了大部分平台的客户端，使用方便。\n\n# Redis优缺点 #\n## 优点 ##\n1. 性能极高：Redis能读的速度是110000次/s,写的速度是81000次/s。\n2. 丰富的数据类型：Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\n3. 原子：Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。\n4. 丰富的特性：Redis还支持 publish/subscribe, 通知, key 过期等等特性。\n\n## 缺点 ##\n1. Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。\n2. 主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。\n3. redis的主从复制采用全量复制，从机新加入集群或者从机和主机网络断开重连时都会进行，复制过程中主机会fork出一个子进程对内存做一份快照，并将内存快照保存为文件发送给从机，需要保证主机的内存足够。若快照文件较大，将影响集群的服务能力。\n4. Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。所以运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。\n\n# Docker中搭建Redis集群 #\n## Dockerfile文件 ##\n将redis-4.0.6.tar.gz,ruby-2.5.0.tar.gz,openssl-1.1.1-pre7.tar.gz文件放入Dockerfile同目录\n```\nfrom centos\nMAINTAINER reallinxu\n\nCOPY redis-4.0.6.tar.gz /usr/software/redis-4.0.6.tar.gz\nRUN mkdir /usr/redis\nRUN tar xzf /usr/software/redis-4.0.6.tar.gz -C /usr/redis\nRUN yum -y install gcc automake autoconf libtool make\nRUN cd /usr/redis/redis-4.0.6 && make\nCOPY ruby-2.5.0.tar.gz /usr/software/ruby-2.5.0.tar.gz\nRUN mkdir /usr/ruby\nRUN tar xzf /usr/software/ruby-2.5.0.tar.gz -C /usr/ruby\nRUN cd /usr/ruby/ruby-2.5.0 && ./configure && ls Makefile && make && make install\nRUN yum install -y rubygems\nRUN yum install -y zlib-devel\nCOPY openssl-1.1.1-pre7.tar.gz /usr/software/openssl-1.1.1-pre7.tar.gz\nRUN mkdir /usr/openssl\nRUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl\nRUN cd /usr/openssl/openssl-1.1.1-pre7 && ./config -fPIC --prefix=/usr/local/openssl enable-shared && ./config -t && make && make install\nRUN cd /usr/ruby/ruby-2.5.0/ext/zlib && ruby ./extconf.rb && sed -i 's/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/' Makefile && make && make install \nRUN cd /usr/ruby/ruby-2.5.0/ext/openssl && ruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib && sed -i 's/$(top_srcdir)/..\\/../g' Makefile && make && make install\nRUN gem install redis\nRUN sed -i 's/daemonize no/daemonize yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/dir .\\//dir \\/usr\\/redis\\//' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-enabled yes/cluster-enabled yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/# cluster-node-timeout 15000/cluster-node-timeout 15000/' /usr/redis/redis-4.0.6/redis.conf\nRUN sed -i 's/appendonly no/appendonly yes/' /usr/redis/redis-4.0.6/redis.conf\nRUN rm -rf /usr/software/redis-4.0.6.tar.gz\nRUN rm -rf /usr/software/ruby-2.5.0.tar.gz\nRUN rm -rf /usr/software/openssl-1.1.1-pre7.tar.gz\nEXPOSE 6379\n```\n\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/redis:v1\" .\n```\n## 创建容器 ##\nredis集群需要最少6个节点，3+3模式,所以用以下命令创建6个容器\n```\ndocker run -i -t --name redis1 reallinxu/redis:v1\ndocker run -i -t --name redis2 reallinxu/redis:v1\ndocker run -i -t --name redis3 reallinxu/redis:v1\ndocker run -i -t --name redis4 reallinxu/redis:v1\ndocker run -i -t --name redis5 reallinxu/redis:v1\ndocker run -i -t --name redis6 reallinxu/redis:v1\n```\n## 构建集群 ##\n分别对六台做以下操作：\n1. 查看容器ip\n```\ncat /etc/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.2      263989ddf7e2\n```\n2. 修改redis配置\n```\nvi /usr/redis/redis-4.0.6/redis.conf\n找到 bind 127.0.0.1\n改为 bind 172.17.0.2 #对应容器的ip\n```\n3. 启动redis\n```\ncd /usr/redis/redis-4.0.6/src\n./redis-server ../redis.conf\n```\n\n启动六台后实现集群\n```\n./redis-trib.rb create --replicas 1 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 172.17.0.5:6379 172.17.0.6:6379 172.17.0.7:6379  \n```\n## 测试redis集群 ##\n```\n./redis-cli  -c -h 172.17.0.3 -p 6379  \n172.17.0.3:6379> set a 1\n-> Redirected to slot [15495] located at 172.17.0.4:6379\nOK\n172.17.0.3:6379> get a\n-> Redirected to slot [15495] located at 172.17.0.4:6379\n\"1\"\n172.17.0.4:6379> exit\n```\n\n## 遇到的错误 ##\n1. -bash: make: command not found\n解决：安装gcc \n```\nyum -y install gcc automake autoconf libtool make\n```\n2. ERROR:  Loading command: install (LoadError) cannot load such file -- zlib\n解决：需要依赖zlib工具\n```\nyum install -y zlib-devel\n```\n3. Could not create Makefile due to some reason, probably lack of necessary\n解决：zlib需要安装到本地运行库\n```\ncd /usr/ruby/ruby-2.5.0/ext/zlib \nruby ./extconf.rb\nmake\nmake install \n```\n4. make: *** No rule to make target `/include/ruby.h', needed by `zlib.o'.  Stop\n解决：修改makefile文件\n```\nsed -i 's/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/' Makefile \nmake\nmake install\n```\n5. while executing gem ...(Gem:Exception) Unable to require openssl\n解决：需要安装openssl\n```\nwget https://www.openssl.org/source/openssl-1.1.1-pre7.tar.gz\nRUN mkdir /usr/openssl\nRUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl\nRUN cd /usr/openssl/openssl-1.1.1-pre7\n./config -fPIC --prefix=/usr/local/openssl enable-shared  \n./config -t  \nmake  \nmake install\n还需要安装到本地库\ncd /usr/ruby/ruby-2.5.0/ext/openssl\nruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib\nmake\nmake install\n```\n6. make: *** No rule to make target `/include/ruby.h', needed by `ossl.o'.  Stop\n解决：修改makefile文件\n```\nsed -i 's/$(top_srcdir)/..\\/../g' Makefile\nmake\nmake install\n```","slug":"Docker容器中搭建Redis集群","published":1,"updated":"2018-09-04T03:35:02.097Z","_id":"cjj4165zn00014ggp64s9qypa","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h1><p>Redis为传说中的内存数据库的一种，运行在内存中，性能强大，还可以用作缓存和消息中间件。Redis支持多种数据结构的存储，提供了大部分平台的客户端，使用方便。</p>\n<h1 id=\"Redis优缺点\"><a href=\"#Redis优缺点\" class=\"headerlink\" title=\"Redis优缺点\"></a>Redis优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>性能极高：Redis能读的速度是110000次/s,写的速度是81000次/s。</li>\n<li>丰富的数据类型：Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>\n<li>原子：Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>\n<li>丰富的特性：Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li>\n<li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li>\n<li>redis的主从复制采用全量复制，从机新加入集群或者从机和主机网络断开重连时都会进行，复制过程中主机会fork出一个子进程对内存做一份快照，并将内存快照保存为文件发送给从机，需要保证主机的内存足够。若快照文件较大，将影响集群的服务能力。</li>\n<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。所以运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>\n</ol>\n<h1 id=\"Docker中搭建Redis集群\"><a href=\"#Docker中搭建Redis集群\" class=\"headerlink\" title=\"Docker中搭建Redis集群\"></a>Docker中搭建Redis集群</h1><h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><p>将redis-4.0.6.tar.gz,ruby-2.5.0.tar.gz,openssl-1.1.1-pre7.tar.gz文件放入Dockerfile同目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">COPY redis-4.0.6.tar.gz /usr/software/redis-4.0.6.tar.gz</span><br><span class=\"line\">RUN mkdir /usr/redis</span><br><span class=\"line\">RUN tar xzf /usr/software/redis-4.0.6.tar.gz -C /usr/redis</span><br><span class=\"line\">RUN yum -y install gcc automake autoconf libtool make</span><br><span class=\"line\">RUN cd /usr/redis/redis-4.0.6 &amp;&amp; make</span><br><span class=\"line\">COPY ruby-2.5.0.tar.gz /usr/software/ruby-2.5.0.tar.gz</span><br><span class=\"line\">RUN mkdir /usr/ruby</span><br><span class=\"line\">RUN tar xzf /usr/software/ruby-2.5.0.tar.gz -C /usr/ruby</span><br><span class=\"line\">RUN cd /usr/ruby/ruby-2.5.0 &amp;&amp; ./configure &amp;&amp; ls Makefile &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN yum install -y rubygems</span><br><span class=\"line\">RUN yum install -y zlib-devel</span><br><span class=\"line\">COPY openssl-1.1.1-pre7.tar.gz /usr/software/openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">RUN mkdir /usr/openssl</span><br><span class=\"line\">RUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl</span><br><span class=\"line\">RUN cd /usr/openssl/openssl-1.1.1-pre7 &amp;&amp; ./config -fPIC --prefix=/usr/local/openssl enable-shared &amp;&amp; ./config -t &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN cd /usr/ruby/ruby-2.5.0/ext/zlib &amp;&amp; ruby ./extconf.rb &amp;&amp; sed -i &apos;s/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/&apos; Makefile &amp;&amp; make &amp;&amp; make install </span><br><span class=\"line\">RUN cd /usr/ruby/ruby-2.5.0/ext/openssl &amp;&amp; ruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib &amp;&amp; sed -i &apos;s/$(top_srcdir)/..\\/../g&apos; Makefile &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN gem install redis</span><br><span class=\"line\">RUN sed -i &apos;s/daemonize no/daemonize yes/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/dir .\\//dir \\/usr\\/redis\\//&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/# cluster-enabled yes/cluster-enabled yes/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/# cluster-node-timeout 15000/cluster-node-timeout 15000/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/appendonly no/appendonly yes/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN rm -rf /usr/software/redis-4.0.6.tar.gz</span><br><span class=\"line\">RUN rm -rf /usr/software/ruby-2.5.0.tar.gz</span><br><span class=\"line\">RUN rm -rf /usr/software/openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">EXPOSE 6379</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t=&quot;reallinxu/redis:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><p>redis集群需要最少6个节点，3+3模式,所以用以下命令创建6个容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t --name redis1 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis2 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis3 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis4 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis5 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis6 reallinxu/redis:v1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构建集群\"><a href=\"#构建集群\" class=\"headerlink\" title=\"构建集群\"></a>构建集群</h2><p>分别对六台做以下操作：</p>\n<ol>\n<li><p>查看容器ip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.2      263989ddf7e2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改redis配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">找到 bind 127.0.0.1</span><br><span class=\"line\">改为 bind 172.17.0.2 #对应容器的ip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/redis/redis-4.0.6/src</span><br><span class=\"line\">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>启动六台后实现集群<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./redis-trib.rb create --replicas 1 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 172.17.0.5:6379 172.17.0.6:6379 172.17.0.7:6379</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试redis集群\"><a href=\"#测试redis集群\" class=\"headerlink\" title=\"测试redis集群\"></a>测试redis集群</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./redis-cli  -c -h 172.17.0.3 -p 6379  </span><br><span class=\"line\">172.17.0.3:6379&gt; set a 1</span><br><span class=\"line\">-&gt; Redirected to slot [15495] located at 172.17.0.4:6379</span><br><span class=\"line\">OK</span><br><span class=\"line\">172.17.0.3:6379&gt; get a</span><br><span class=\"line\">-&gt; Redirected to slot [15495] located at 172.17.0.4:6379</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">172.17.0.4:6379&gt; exit</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的错误\"><a href=\"#遇到的错误\" class=\"headerlink\" title=\"遇到的错误\"></a>遇到的错误</h2><ol>\n<li><p>-bash: make: command not found<br>解决：安装gcc </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ERROR:  Loading command: install (LoadError) cannot load such file – zlib<br>解决：需要依赖zlib工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zlib-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Could not create Makefile due to some reason, probably lack of necessary<br>解决：zlib需要安装到本地运行库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/ruby/ruby-2.5.0/ext/zlib </span><br><span class=\"line\">ruby ./extconf.rb</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>make: *** No rule to make target <code>/include/ruby.h&#39;, needed by</code>zlib.o’.  Stop<br>解决：修改makefile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/&apos; Makefile </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>while executing gem …(Gem:Exception) Unable to require openssl<br>解决：需要安装openssl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.openssl.org/source/openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">RUN mkdir /usr/openssl</span><br><span class=\"line\">RUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl</span><br><span class=\"line\">RUN cd /usr/openssl/openssl-1.1.1-pre7</span><br><span class=\"line\">./config -fPIC --prefix=/usr/local/openssl enable-shared  </span><br><span class=\"line\">./config -t  </span><br><span class=\"line\">make  </span><br><span class=\"line\">make install</span><br><span class=\"line\">还需要安装到本地库</span><br><span class=\"line\">cd /usr/ruby/ruby-2.5.0/ext/openssl</span><br><span class=\"line\">ruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>make: *** No rule to make target <code>/include/ruby.h&#39;, needed by</code>ossl.o’.  Stop<br>解决：修改makefile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/$(top_srcdir)/..\\/../g&apos; Makefile</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h1><p>Redis为传说中的内存数据库的一种，运行在内存中，性能强大，还可以用作缓存和消息中间件。Redis支持多种数据结构的存储，提供了大部分平台的客户端，使用方便。</p>\n<h1 id=\"Redis优缺点\"><a href=\"#Redis优缺点\" class=\"headerlink\" title=\"Redis优缺点\"></a>Redis优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>性能极高：Redis能读的速度是110000次/s,写的速度是81000次/s。</li>\n<li>丰富的数据类型：Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>\n<li>原子：Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>\n<li>丰富的特性：Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li>\n<li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li>\n<li>redis的主从复制采用全量复制，从机新加入集群或者从机和主机网络断开重连时都会进行，复制过程中主机会fork出一个子进程对内存做一份快照，并将内存快照保存为文件发送给从机，需要保证主机的内存足够。若快照文件较大，将影响集群的服务能力。</li>\n<li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。所以运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li>\n</ol>\n<h1 id=\"Docker中搭建Redis集群\"><a href=\"#Docker中搭建Redis集群\" class=\"headerlink\" title=\"Docker中搭建Redis集群\"></a>Docker中搭建Redis集群</h1><h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><p>将redis-4.0.6.tar.gz,ruby-2.5.0.tar.gz,openssl-1.1.1-pre7.tar.gz文件放入Dockerfile同目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">COPY redis-4.0.6.tar.gz /usr/software/redis-4.0.6.tar.gz</span><br><span class=\"line\">RUN mkdir /usr/redis</span><br><span class=\"line\">RUN tar xzf /usr/software/redis-4.0.6.tar.gz -C /usr/redis</span><br><span class=\"line\">RUN yum -y install gcc automake autoconf libtool make</span><br><span class=\"line\">RUN cd /usr/redis/redis-4.0.6 &amp;&amp; make</span><br><span class=\"line\">COPY ruby-2.5.0.tar.gz /usr/software/ruby-2.5.0.tar.gz</span><br><span class=\"line\">RUN mkdir /usr/ruby</span><br><span class=\"line\">RUN tar xzf /usr/software/ruby-2.5.0.tar.gz -C /usr/ruby</span><br><span class=\"line\">RUN cd /usr/ruby/ruby-2.5.0 &amp;&amp; ./configure &amp;&amp; ls Makefile &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN yum install -y rubygems</span><br><span class=\"line\">RUN yum install -y zlib-devel</span><br><span class=\"line\">COPY openssl-1.1.1-pre7.tar.gz /usr/software/openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">RUN mkdir /usr/openssl</span><br><span class=\"line\">RUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl</span><br><span class=\"line\">RUN cd /usr/openssl/openssl-1.1.1-pre7 &amp;&amp; ./config -fPIC --prefix=/usr/local/openssl enable-shared &amp;&amp; ./config -t &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN cd /usr/ruby/ruby-2.5.0/ext/zlib &amp;&amp; ruby ./extconf.rb &amp;&amp; sed -i &apos;s/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/&apos; Makefile &amp;&amp; make &amp;&amp; make install </span><br><span class=\"line\">RUN cd /usr/ruby/ruby-2.5.0/ext/openssl &amp;&amp; ruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib &amp;&amp; sed -i &apos;s/$(top_srcdir)/..\\/../g&apos; Makefile &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">RUN gem install redis</span><br><span class=\"line\">RUN sed -i &apos;s/daemonize no/daemonize yes/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/dir .\\//dir \\/usr\\/redis\\//&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/# cluster-enabled yes/cluster-enabled yes/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/# cluster-node-timeout 15000/cluster-node-timeout 15000/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN sed -i &apos;s/appendonly no/appendonly yes/&apos; /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">RUN rm -rf /usr/software/redis-4.0.6.tar.gz</span><br><span class=\"line\">RUN rm -rf /usr/software/ruby-2.5.0.tar.gz</span><br><span class=\"line\">RUN rm -rf /usr/software/openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">EXPOSE 6379</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t=&quot;reallinxu/redis:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><p>redis集群需要最少6个节点，3+3模式,所以用以下命令创建6个容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t --name redis1 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis2 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis3 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis4 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis5 reallinxu/redis:v1</span><br><span class=\"line\">docker run -i -t --name redis6 reallinxu/redis:v1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构建集群\"><a href=\"#构建集群\" class=\"headerlink\" title=\"构建集群\"></a>构建集群</h2><p>分别对六台做以下操作：</p>\n<ol>\n<li><p>查看容器ip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.2      263989ddf7e2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改redis配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/redis/redis-4.0.6/redis.conf</span><br><span class=\"line\">找到 bind 127.0.0.1</span><br><span class=\"line\">改为 bind 172.17.0.2 #对应容器的ip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/redis/redis-4.0.6/src</span><br><span class=\"line\">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>启动六台后实现集群<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./redis-trib.rb create --replicas 1 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 172.17.0.5:6379 172.17.0.6:6379 172.17.0.7:6379</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试redis集群\"><a href=\"#测试redis集群\" class=\"headerlink\" title=\"测试redis集群\"></a>测试redis集群</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./redis-cli  -c -h 172.17.0.3 -p 6379  </span><br><span class=\"line\">172.17.0.3:6379&gt; set a 1</span><br><span class=\"line\">-&gt; Redirected to slot [15495] located at 172.17.0.4:6379</span><br><span class=\"line\">OK</span><br><span class=\"line\">172.17.0.3:6379&gt; get a</span><br><span class=\"line\">-&gt; Redirected to slot [15495] located at 172.17.0.4:6379</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">172.17.0.4:6379&gt; exit</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的错误\"><a href=\"#遇到的错误\" class=\"headerlink\" title=\"遇到的错误\"></a>遇到的错误</h2><ol>\n<li><p>-bash: make: command not found<br>解决：安装gcc </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ERROR:  Loading command: install (LoadError) cannot load such file – zlib<br>解决：需要依赖zlib工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zlib-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Could not create Makefile due to some reason, probably lack of necessary<br>解决：zlib需要安装到本地运行库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/ruby/ruby-2.5.0/ext/zlib </span><br><span class=\"line\">ruby ./extconf.rb</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>make: *** No rule to make target <code>/include/ruby.h&#39;, needed by</code>zlib.o’.  Stop<br>解决：修改makefile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/zlib.o: $(top_srcdir)\\/include\\/ruby.h/zlib.o: ..\\/..\\/include\\/ruby.h/&apos; Makefile </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>while executing gem …(Gem:Exception) Unable to require openssl<br>解决：需要安装openssl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.openssl.org/source/openssl-1.1.1-pre7.tar.gz</span><br><span class=\"line\">RUN mkdir /usr/openssl</span><br><span class=\"line\">RUN tar xzf /usr/software/openssl-1.1.1-pre7.tar.gz -C /usr/openssl</span><br><span class=\"line\">RUN cd /usr/openssl/openssl-1.1.1-pre7</span><br><span class=\"line\">./config -fPIC --prefix=/usr/local/openssl enable-shared  </span><br><span class=\"line\">./config -t  </span><br><span class=\"line\">make  </span><br><span class=\"line\">make install</span><br><span class=\"line\">还需要安装到本地库</span><br><span class=\"line\">cd /usr/ruby/ruby-2.5.0/ext/openssl</span><br><span class=\"line\">ruby extconf.rb  --with-openssl-include=/usr/local/openssl/include/ --with-openssl-lib=/usr/local/openssl/lib</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>make: *** No rule to make target <code>/include/ruby.h&#39;, needed by</code>ossl.o’.  Stop<br>解决：修改makefile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/$(top_srcdir)/..\\/../g&apos; Makefile</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Docker容器中搭建rabbitmq集群","id":"522","date":"2018-05-29T10:00:00.000Z","author":["linxu"],"_content":"# RabbitMq简介 #\n>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\nRabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。使用Rabbitmq可以使程序间不再需要彼此调用，只需要将消息放入消息队列中，通过对队列的监听，对消息进行对应处理，而且消息队列在当消息接收方服务忙或不可用时，提供了一个消息暂存的功能，等服务可用时，继续对消息进行处理。\n\n# RabbitMq几个基本概念 #\n1. Connection、Channel\n\tConnection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。Channel是可以定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等的最重要的一个接口。\n2. Queue\n\tQueue（队列）是RabbitMQ的内部对象，生产者将消息投递到queue中，消费者从queue中获取消息。多个消费者可以订阅同一个queue，这时queue的消息会均摊给多个消费者。\n3. Message acknowledgment\n\t消费者收到queue消息后，为了避免没有处理完成就宕机导致消息丢失，在消费者完成后会发送一个回执给rabbitmq，rabbit收到消息回执(ack)才会移除消息,如果rabbitmq检测到消费者已断开但是仍未收到回执，则会将消息发送给其他消费者。\n4. Message durability\n\t如果需要在rabbitmq重启时也不丢失消息，可以将queue和message设置为可持久化的。这种情况可能存在还没有持久化rabbitmq就停的小概率事件，这就需要rabbitmq的事务。\n5. Prefetch count\n\t设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息，消费者处理完这条消息后Queue会再给该消费者发送一条消息。\n6. Exchange\n\t生产者通过Exchange将消息投入queue中，由Exchange将消息路由到一个或多个Queue中(或者丢弃)。\n7. routing key\n\t生产者可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。\n8. Binding\n\tRabbitMQ中通过Binding将Exchange与Queue关联起来。\n9. Binding key\n\tbinding key与routing key相匹配时，消息将会被路由到对应的Queue中。\n10. Exchange Types\n\tfanout：所有发送到该Exchange的消息路由到所有与它绑定的Queue中。\n\tdirect：消息路由到那些binding key与routing key完全匹配的Queue中。\n\ttopic：topic与direct相似，可以使用*与#做模糊匹配，*匹配一个单词，#匹配多个单词（可以是零个）\n\theaders：不依赖于key的规则，而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对，当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对。\n11. RPC\n\t客户端发送请求消息时，在消息的属性（MessageProperties）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）。\n\n# Docker容器搭建rabbitmq集群 #\n## Dockerfile文件 ##\n将rabbitmq-signing-key-public.asc，rabbitmq-server-3.3.5-1.noarch.rpm放入Dockerfile同目录\n```\nfrom centos\nMAINTAINER reallinxu\n\nRUN rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\nRUN yum install -y erlang\nCOPY rabbitmq-signing-key-public.asc /usr/software/rabbitmq-signing-key-public.asc\nCOPY rabbitmq-server-3.3.5-1.noarch.rpm /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm\nRUN rpm --import /usr/software/rabbitmq-signing-key-public.asc\nRUN rpm -ivh /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm  --force --nodeps\nRUN rabbitmq-plugins enable rabbitmq_management\nRUN chkconfig --level 3 rabbitmq-server on\nRUN sed -i 's/PID_FILE=\\/var\\/run\\/rabbitmq\\/pid/&\\nexport RABBITMQ_MNESIA=\\/rabbitmq\\/mnesia/' /etc/init.d/rabbitmq-server\nRUN chmod 644 /etc/rabbitmq/enabled_plugins\nRUN rm -rf /usr/software/rabbitmq-signing-key-public.asc\nRUN rm -rf /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm\nEXPOSE 8080 15672 5672\n```\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/rabbit:v1\" .\n```\n## 创建容器 ##\n### 创建第一个容器 ###\n```\ndocker run -p 15672:15672 -i -t --name rabbit1 reallinxu/rabbit:1 \n#查看hosts\ncat /etc/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      c0543dbe04fe\n```\n\n### 创建后续容器 ###\n因为要搭建集群，后面的hosts文件需要配置第一台的配置，这时候我们使用-v进行挂载容器，将/etc/hosts指定使用宿主机的/user/hosts文件。\n```\n#/user/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      c0543dbe04fe\n```\n创建容器\n```\ndocker run -i -t -p 15670:15672 --name rabbit2 -v /user/hosts:/etc/hosts reallinxu/rabbit:1 \n```\n\n### 实现集群 ###\n第一个容器中启动rabbitmq\n```\nrabbitmq-server -detached # -detached后台运行\nrabbitmqctl add_user admin admin\nrabbitmqctl set_user_tags admin administrator\n```\n将/var/lib/rabbitmq的.erlang.cookie文件拷贝到宿主机中\n```\nsudo docker cp c0543dbe04fe:/var/lib/rabbitmq /user\n```\n将第一个容器中/root下cookie覆盖\n```\ndocker cp /user/rabbitmq/.erlang.cookie c0543dbe04fe:/root\n```\n将宿主机的cookie文件覆盖到其他容器中：\n```\ndocker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/root\ndocker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/var/lib/rabbitmq\n```\n更改.erlang.cookie的访问权限为400\n```\nchmod 400 /var/lib/rabbitmq/.erlang.cookie\n```\n更改.erlang.cookie的文件所有人为rabbitmq\n```\nchown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n```\n启动后续容器并做如下操作：\n```\nrabbitmq-server -detached\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@c0543dbe04fe\nrabbitmqctl start_app\n```\n查看rabbitmq后台界面，可以发现集群搭建成功。不过因为直接挂载，导致容器自身映射端口并没有生效，所以在后面需要将自己的hosts配置进去，在hosts文件后面追加下面语句\n```\n172.17.0.3\t780f23c07ef7\n```\n容器ID请按照自己创建容器ID来替换。\n\n# 小知识 #\n## sed命令 ##\nsed -i 's/指定的字符/要插入的字符&/'  文件  #前插\nsed -i 's/指定的字符/&要插入的字符/'  文件  #后插\nsed 's/原字符串/替换字符串/' 文件\t\t\t#替换\nsed 's/原字符串/替换字符串/g' 文件\t\t\t#替换所有\n\\n 换行符  \\转义\n\n## 查看容器端口映射 ##\ndocker port <NAME>\n\n## 失败解决 ##\n安装rpm包如果出现“Exiting on user Command”的错误，请在yum命令后加上“-y”选项\n\n## systemctl ##\n不可以使用，尽量避免，网上说可以CMD或者entrypoint设置为/usr/sbin/init，但是创建容器时一直没有反应，所以放弃了","source":"_posts/Docker容器中搭建rabbitmq集群.md","raw":"---\ntitle: \"Docker容器中搭建rabbitmq集群\"\ntags:\n  - docker\nid: 522\ncategories:\n  - Docker\ndate: 2018-05-29 18:00:00\nauthor: \n  - linxu\n---\n# RabbitMq简介 #\n>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\nRabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。使用Rabbitmq可以使程序间不再需要彼此调用，只需要将消息放入消息队列中，通过对队列的监听，对消息进行对应处理，而且消息队列在当消息接收方服务忙或不可用时，提供了一个消息暂存的功能，等服务可用时，继续对消息进行处理。\n\n# RabbitMq几个基本概念 #\n1. Connection、Channel\n\tConnection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。Channel是可以定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等的最重要的一个接口。\n2. Queue\n\tQueue（队列）是RabbitMQ的内部对象，生产者将消息投递到queue中，消费者从queue中获取消息。多个消费者可以订阅同一个queue，这时queue的消息会均摊给多个消费者。\n3. Message acknowledgment\n\t消费者收到queue消息后，为了避免没有处理完成就宕机导致消息丢失，在消费者完成后会发送一个回执给rabbitmq，rabbit收到消息回执(ack)才会移除消息,如果rabbitmq检测到消费者已断开但是仍未收到回执，则会将消息发送给其他消费者。\n4. Message durability\n\t如果需要在rabbitmq重启时也不丢失消息，可以将queue和message设置为可持久化的。这种情况可能存在还没有持久化rabbitmq就停的小概率事件，这就需要rabbitmq的事务。\n5. Prefetch count\n\t设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息，消费者处理完这条消息后Queue会再给该消费者发送一条消息。\n6. Exchange\n\t生产者通过Exchange将消息投入queue中，由Exchange将消息路由到一个或多个Queue中(或者丢弃)。\n7. routing key\n\t生产者可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。\n8. Binding\n\tRabbitMQ中通过Binding将Exchange与Queue关联起来。\n9. Binding key\n\tbinding key与routing key相匹配时，消息将会被路由到对应的Queue中。\n10. Exchange Types\n\tfanout：所有发送到该Exchange的消息路由到所有与它绑定的Queue中。\n\tdirect：消息路由到那些binding key与routing key完全匹配的Queue中。\n\ttopic：topic与direct相似，可以使用*与#做模糊匹配，*匹配一个单词，#匹配多个单词（可以是零个）\n\theaders：不依赖于key的规则，而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对，当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对。\n11. RPC\n\t客户端发送请求消息时，在消息的属性（MessageProperties）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）。\n\n# Docker容器搭建rabbitmq集群 #\n## Dockerfile文件 ##\n将rabbitmq-signing-key-public.asc，rabbitmq-server-3.3.5-1.noarch.rpm放入Dockerfile同目录\n```\nfrom centos\nMAINTAINER reallinxu\n\nRUN rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\nRUN yum install -y erlang\nCOPY rabbitmq-signing-key-public.asc /usr/software/rabbitmq-signing-key-public.asc\nCOPY rabbitmq-server-3.3.5-1.noarch.rpm /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm\nRUN rpm --import /usr/software/rabbitmq-signing-key-public.asc\nRUN rpm -ivh /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm  --force --nodeps\nRUN rabbitmq-plugins enable rabbitmq_management\nRUN chkconfig --level 3 rabbitmq-server on\nRUN sed -i 's/PID_FILE=\\/var\\/run\\/rabbitmq\\/pid/&\\nexport RABBITMQ_MNESIA=\\/rabbitmq\\/mnesia/' /etc/init.d/rabbitmq-server\nRUN chmod 644 /etc/rabbitmq/enabled_plugins\nRUN rm -rf /usr/software/rabbitmq-signing-key-public.asc\nRUN rm -rf /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm\nEXPOSE 8080 15672 5672\n```\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/rabbit:v1\" .\n```\n## 创建容器 ##\n### 创建第一个容器 ###\n```\ndocker run -p 15672:15672 -i -t --name rabbit1 reallinxu/rabbit:1 \n#查看hosts\ncat /etc/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      c0543dbe04fe\n```\n\n### 创建后续容器 ###\n因为要搭建集群，后面的hosts文件需要配置第一台的配置，这时候我们使用-v进行挂载容器，将/etc/hosts指定使用宿主机的/user/hosts文件。\n```\n#/user/hosts\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      c0543dbe04fe\n```\n创建容器\n```\ndocker run -i -t -p 15670:15672 --name rabbit2 -v /user/hosts:/etc/hosts reallinxu/rabbit:1 \n```\n\n### 实现集群 ###\n第一个容器中启动rabbitmq\n```\nrabbitmq-server -detached # -detached后台运行\nrabbitmqctl add_user admin admin\nrabbitmqctl set_user_tags admin administrator\n```\n将/var/lib/rabbitmq的.erlang.cookie文件拷贝到宿主机中\n```\nsudo docker cp c0543dbe04fe:/var/lib/rabbitmq /user\n```\n将第一个容器中/root下cookie覆盖\n```\ndocker cp /user/rabbitmq/.erlang.cookie c0543dbe04fe:/root\n```\n将宿主机的cookie文件覆盖到其他容器中：\n```\ndocker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/root\ndocker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/var/lib/rabbitmq\n```\n更改.erlang.cookie的访问权限为400\n```\nchmod 400 /var/lib/rabbitmq/.erlang.cookie\n```\n更改.erlang.cookie的文件所有人为rabbitmq\n```\nchown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n```\n启动后续容器并做如下操作：\n```\nrabbitmq-server -detached\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@c0543dbe04fe\nrabbitmqctl start_app\n```\n查看rabbitmq后台界面，可以发现集群搭建成功。不过因为直接挂载，导致容器自身映射端口并没有生效，所以在后面需要将自己的hosts配置进去，在hosts文件后面追加下面语句\n```\n172.17.0.3\t780f23c07ef7\n```\n容器ID请按照自己创建容器ID来替换。\n\n# 小知识 #\n## sed命令 ##\nsed -i 's/指定的字符/要插入的字符&/'  文件  #前插\nsed -i 's/指定的字符/&要插入的字符/'  文件  #后插\nsed 's/原字符串/替换字符串/' 文件\t\t\t#替换\nsed 's/原字符串/替换字符串/g' 文件\t\t\t#替换所有\n\\n 换行符  \\转义\n\n## 查看容器端口映射 ##\ndocker port <NAME>\n\n## 失败解决 ##\n安装rpm包如果出现“Exiting on user Command”的错误，请在yum命令后加上“-y”选项\n\n## systemctl ##\n不可以使用，尽量避免，网上说可以CMD或者entrypoint设置为/usr/sbin/init，但是创建容器时一直没有反应，所以放弃了","slug":"Docker容器中搭建rabbitmq集群","published":1,"updated":"2018-09-04T03:35:35.057Z","_id":"cjj4165zx00034ggpjoyhpj9s","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"RabbitMq简介\"><a href=\"#RabbitMq简介\" class=\"headerlink\" title=\"RabbitMq简介\"></a>RabbitMq简介</h1><blockquote>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n</blockquote>\n<p>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。使用Rabbitmq可以使程序间不再需要彼此调用，只需要将消息放入消息队列中，通过对队列的监听，对消息进行对应处理，而且消息队列在当消息接收方服务忙或不可用时，提供了一个消息暂存的功能，等服务可用时，继续对消息进行处理。</p>\n<h1 id=\"RabbitMq几个基本概念\"><a href=\"#RabbitMq几个基本概念\" class=\"headerlink\" title=\"RabbitMq几个基本概念\"></a>RabbitMq几个基本概念</h1><ol>\n<li>Connection、Channel<br> Connection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。Channel是可以定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等的最重要的一个接口。</li>\n<li>Queue<br> Queue（队列）是RabbitMQ的内部对象，生产者将消息投递到queue中，消费者从queue中获取消息。多个消费者可以订阅同一个queue，这时queue的消息会均摊给多个消费者。</li>\n<li>Message acknowledgment<br> 消费者收到queue消息后，为了避免没有处理完成就宕机导致消息丢失，在消费者完成后会发送一个回执给rabbitmq，rabbit收到消息回执(ack)才会移除消息,如果rabbitmq检测到消费者已断开但是仍未收到回执，则会将消息发送给其他消费者。</li>\n<li>Message durability<br> 如果需要在rabbitmq重启时也不丢失消息，可以将queue和message设置为可持久化的。这种情况可能存在还没有持久化rabbitmq就停的小概率事件，这就需要rabbitmq的事务。</li>\n<li>Prefetch count<br> 设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息，消费者处理完这条消息后Queue会再给该消费者发送一条消息。</li>\n<li>Exchange<br> 生产者通过Exchange将消息投入queue中，由Exchange将消息路由到一个或多个Queue中(或者丢弃)。</li>\n<li>routing key<br> 生产者可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。</li>\n<li>Binding<br> RabbitMQ中通过Binding将Exchange与Queue关联起来。</li>\n<li>Binding key<br> binding key与routing key相匹配时，消息将会被路由到对应的Queue中。</li>\n<li>Exchange Types<br>fanout：所有发送到该Exchange的消息路由到所有与它绑定的Queue中。<br>direct：消息路由到那些binding key与routing key完全匹配的Queue中。<br>topic：topic与direct相似，可以使用<em>与#做模糊匹配，</em>匹配一个单词，#匹配多个单词（可以是零个）<br>headers：不依赖于key的规则，而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对，当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对。</li>\n<li>RPC<br>客户端发送请求消息时，在消息的属性（MessageProperties）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）。</li>\n</ol>\n<h1 id=\"Docker容器搭建rabbitmq集群\"><a href=\"#Docker容器搭建rabbitmq集群\" class=\"headerlink\" title=\"Docker容器搭建rabbitmq集群\"></a>Docker容器搭建rabbitmq集群</h1><h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><p>将rabbitmq-signing-key-public.asc，rabbitmq-server-3.3.5-1.noarch.rpm放入Dockerfile同目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</span><br><span class=\"line\">RUN yum install -y erlang</span><br><span class=\"line\">COPY rabbitmq-signing-key-public.asc /usr/software/rabbitmq-signing-key-public.asc</span><br><span class=\"line\">COPY rabbitmq-server-3.3.5-1.noarch.rpm /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm</span><br><span class=\"line\">RUN rpm --import /usr/software/rabbitmq-signing-key-public.asc</span><br><span class=\"line\">RUN rpm -ivh /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm  --force --nodeps</span><br><span class=\"line\">RUN rabbitmq-plugins enable rabbitmq_management</span><br><span class=\"line\">RUN chkconfig --level 3 rabbitmq-server on</span><br><span class=\"line\">RUN sed -i &apos;s/PID_FILE=\\/var\\/run\\/rabbitmq\\/pid/&amp;\\nexport RABBITMQ_MNESIA=\\/rabbitmq\\/mnesia/&apos; /etc/init.d/rabbitmq-server</span><br><span class=\"line\">RUN chmod 644 /etc/rabbitmq/enabled_plugins</span><br><span class=\"line\">RUN rm -rf /usr/software/rabbitmq-signing-key-public.asc</span><br><span class=\"line\">RUN rm -rf /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm</span><br><span class=\"line\">EXPOSE 8080 15672 5672</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t=&quot;reallinxu/rabbit:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><h3 id=\"创建第一个容器\"><a href=\"#创建第一个容器\" class=\"headerlink\" title=\"创建第一个容器\"></a>创建第一个容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 15672:15672 -i -t --name rabbit1 reallinxu/rabbit:1 </span><br><span class=\"line\">#查看hosts</span><br><span class=\"line\">cat /etc/hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.3      c0543dbe04fe</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建后续容器\"><a href=\"#创建后续容器\" class=\"headerlink\" title=\"创建后续容器\"></a>创建后续容器</h3><p>因为要搭建集群，后面的hosts文件需要配置第一台的配置，这时候我们使用-v进行挂载容器，将/etc/hosts指定使用宿主机的/user/hosts文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/user/hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.3      c0543dbe04fe</span><br></pre></td></tr></table></figure></p>\n<p>创建容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -p 15670:15672 --name rabbit2 -v /user/hosts:/etc/hosts reallinxu/rabbit:1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实现集群\"><a href=\"#实现集群\" class=\"headerlink\" title=\"实现集群\"></a>实现集群</h3><p>第一个容器中启动rabbitmq<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached # -detached后台运行</span><br><span class=\"line\">rabbitmqctl add_user admin admin</span><br><span class=\"line\">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure></p>\n<p>将/var/lib/rabbitmq的.erlang.cookie文件拷贝到宿主机中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp c0543dbe04fe:/var/lib/rabbitmq /user</span><br></pre></td></tr></table></figure></p>\n<p>将第一个容器中/root下cookie覆盖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp /user/rabbitmq/.erlang.cookie c0543dbe04fe:/root</span><br></pre></td></tr></table></figure></p>\n<p>将宿主机的cookie文件覆盖到其他容器中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/root</span><br><span class=\"line\">docker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/var/lib/rabbitmq</span><br></pre></td></tr></table></figure></p>\n<p>更改.erlang.cookie的访问权限为400<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 400 /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure></p>\n<p>更改.erlang.cookie的文件所有人为rabbitmq<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure></p>\n<p>启动后续容器并做如下操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached</span><br><span class=\"line\">rabbitmqctl stop_app</span><br><span class=\"line\">rabbitmqctl join_cluster rabbit@c0543dbe04fe</span><br><span class=\"line\">rabbitmqctl start_app</span><br></pre></td></tr></table></figure></p>\n<p>查看rabbitmq后台界面，可以发现集群搭建成功。不过因为直接挂载，导致容器自身映射端口并没有生效，所以在后面需要将自己的hosts配置进去，在hosts文件后面追加下面语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">172.17.0.3\t780f23c07ef7</span><br></pre></td></tr></table></figure></p>\n<p>容器ID请按照自己创建容器ID来替换。</p>\n<h1 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\"小知识\"></a>小知识</h1><h2 id=\"sed命令\"><a href=\"#sed命令\" class=\"headerlink\" title=\"sed命令\"></a>sed命令</h2><p>sed -i ‘s/指定的字符/要插入的字符&amp;/‘  文件  #前插<br>sed -i ‘s/指定的字符/&amp;要插入的字符/‘  文件  #后插<br>sed ‘s/原字符串/替换字符串/‘ 文件            #替换<br>sed ‘s/原字符串/替换字符串/g’ 文件            #替换所有<br>\\n 换行符  \\转义</p>\n<h2 id=\"查看容器端口映射\"><a href=\"#查看容器端口映射\" class=\"headerlink\" title=\"查看容器端口映射\"></a>查看容器端口映射</h2><p>docker port <name></name></p>\n<h2 id=\"失败解决\"><a href=\"#失败解决\" class=\"headerlink\" title=\"失败解决\"></a>失败解决</h2><p>安装rpm包如果出现“Exiting on user Command”的错误，请在yum命令后加上“-y”选项</p>\n<h2 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h2><p>不可以使用，尽量避免，网上说可以CMD或者entrypoint设置为/usr/sbin/init，但是创建容器时一直没有反应，所以放弃了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RabbitMq简介\"><a href=\"#RabbitMq简介\" class=\"headerlink\" title=\"RabbitMq简介\"></a>RabbitMq简介</h1><blockquote>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n</blockquote>\n<p>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。使用Rabbitmq可以使程序间不再需要彼此调用，只需要将消息放入消息队列中，通过对队列的监听，对消息进行对应处理，而且消息队列在当消息接收方服务忙或不可用时，提供了一个消息暂存的功能，等服务可用时，继续对消息进行处理。</p>\n<h1 id=\"RabbitMq几个基本概念\"><a href=\"#RabbitMq几个基本概念\" class=\"headerlink\" title=\"RabbitMq几个基本概念\"></a>RabbitMq几个基本概念</h1><ol>\n<li>Connection、Channel<br> Connection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。Channel是可以定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等的最重要的一个接口。</li>\n<li>Queue<br> Queue（队列）是RabbitMQ的内部对象，生产者将消息投递到queue中，消费者从queue中获取消息。多个消费者可以订阅同一个queue，这时queue的消息会均摊给多个消费者。</li>\n<li>Message acknowledgment<br> 消费者收到queue消息后，为了避免没有处理完成就宕机导致消息丢失，在消费者完成后会发送一个回执给rabbitmq，rabbit收到消息回执(ack)才会移除消息,如果rabbitmq检测到消费者已断开但是仍未收到回执，则会将消息发送给其他消费者。</li>\n<li>Message durability<br> 如果需要在rabbitmq重启时也不丢失消息，可以将queue和message设置为可持久化的。这种情况可能存在还没有持久化rabbitmq就停的小概率事件，这就需要rabbitmq的事务。</li>\n<li>Prefetch count<br> 设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1，则Queue每次给每个消费者发送一条消息，消费者处理完这条消息后Queue会再给该消费者发送一条消息。</li>\n<li>Exchange<br> 生产者通过Exchange将消息投入queue中，由Exchange将消息路由到一个或多个Queue中(或者丢弃)。</li>\n<li>routing key<br> 生产者可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。</li>\n<li>Binding<br> RabbitMQ中通过Binding将Exchange与Queue关联起来。</li>\n<li>Binding key<br> binding key与routing key相匹配时，消息将会被路由到对应的Queue中。</li>\n<li>Exchange Types<br>fanout：所有发送到该Exchange的消息路由到所有与它绑定的Queue中。<br>direct：消息路由到那些binding key与routing key完全匹配的Queue中。<br>topic：topic与direct相似，可以使用<em>与#做模糊匹配，</em>匹配一个单词，#匹配多个单词（可以是零个）<br>headers：不依赖于key的规则，而是根据发送的消息内容中的headers属性进行匹配。在绑定Queue与Exchange时指定一组键值对，当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对。</li>\n<li>RPC<br>客户端发送请求消息时，在消息的属性（MessageProperties）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）。</li>\n</ol>\n<h1 id=\"Docker容器搭建rabbitmq集群\"><a href=\"#Docker容器搭建rabbitmq集群\" class=\"headerlink\" title=\"Docker容器搭建rabbitmq集群\"></a>Docker容器搭建rabbitmq集群</h1><h2 id=\"Dockerfile文件\"><a href=\"#Dockerfile文件\" class=\"headerlink\" title=\"Dockerfile文件\"></a>Dockerfile文件</h2><p>将rabbitmq-signing-key-public.asc，rabbitmq-server-3.3.5-1.noarch.rpm放入Dockerfile同目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">RUN rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</span><br><span class=\"line\">RUN yum install -y erlang</span><br><span class=\"line\">COPY rabbitmq-signing-key-public.asc /usr/software/rabbitmq-signing-key-public.asc</span><br><span class=\"line\">COPY rabbitmq-server-3.3.5-1.noarch.rpm /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm</span><br><span class=\"line\">RUN rpm --import /usr/software/rabbitmq-signing-key-public.asc</span><br><span class=\"line\">RUN rpm -ivh /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm  --force --nodeps</span><br><span class=\"line\">RUN rabbitmq-plugins enable rabbitmq_management</span><br><span class=\"line\">RUN chkconfig --level 3 rabbitmq-server on</span><br><span class=\"line\">RUN sed -i &apos;s/PID_FILE=\\/var\\/run\\/rabbitmq\\/pid/&amp;\\nexport RABBITMQ_MNESIA=\\/rabbitmq\\/mnesia/&apos; /etc/init.d/rabbitmq-server</span><br><span class=\"line\">RUN chmod 644 /etc/rabbitmq/enabled_plugins</span><br><span class=\"line\">RUN rm -rf /usr/software/rabbitmq-signing-key-public.asc</span><br><span class=\"line\">RUN rm -rf /usr/software/rabbitmq-server-3.3.5-1.noarch.rpm</span><br><span class=\"line\">EXPOSE 8080 15672 5672</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t=&quot;reallinxu/rabbit:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><h3 id=\"创建第一个容器\"><a href=\"#创建第一个容器\" class=\"headerlink\" title=\"创建第一个容器\"></a>创建第一个容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 15672:15672 -i -t --name rabbit1 reallinxu/rabbit:1 </span><br><span class=\"line\">#查看hosts</span><br><span class=\"line\">cat /etc/hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.3      c0543dbe04fe</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建后续容器\"><a href=\"#创建后续容器\" class=\"headerlink\" title=\"创建后续容器\"></a>创建后续容器</h3><p>因为要搭建集群，后面的hosts文件需要配置第一台的配置，这时候我们使用-v进行挂载容器，将/etc/hosts指定使用宿主机的/user/hosts文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/user/hosts</span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">::1     localhost ip6-localhost ip6-loopback</span><br><span class=\"line\">fe00::0 ip6-localnet</span><br><span class=\"line\">ff00::0 ip6-mcastprefix</span><br><span class=\"line\">ff02::1 ip6-allnodes</span><br><span class=\"line\">ff02::2 ip6-allrouters</span><br><span class=\"line\">172.17.0.3      c0543dbe04fe</span><br></pre></td></tr></table></figure></p>\n<p>创建容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -p 15670:15672 --name rabbit2 -v /user/hosts:/etc/hosts reallinxu/rabbit:1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实现集群\"><a href=\"#实现集群\" class=\"headerlink\" title=\"实现集群\"></a>实现集群</h3><p>第一个容器中启动rabbitmq<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached # -detached后台运行</span><br><span class=\"line\">rabbitmqctl add_user admin admin</span><br><span class=\"line\">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure></p>\n<p>将/var/lib/rabbitmq的.erlang.cookie文件拷贝到宿主机中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp c0543dbe04fe:/var/lib/rabbitmq /user</span><br></pre></td></tr></table></figure></p>\n<p>将第一个容器中/root下cookie覆盖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp /user/rabbitmq/.erlang.cookie c0543dbe04fe:/root</span><br></pre></td></tr></table></figure></p>\n<p>将宿主机的cookie文件覆盖到其他容器中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/root</span><br><span class=\"line\">docker cp /user/rabbitmq/.erlang.cookie 780f23c07ef7:/var/lib/rabbitmq</span><br></pre></td></tr></table></figure></p>\n<p>更改.erlang.cookie的访问权限为400<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 400 /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure></p>\n<p>更改.erlang.cookie的文件所有人为rabbitmq<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure></p>\n<p>启动后续容器并做如下操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-server -detached</span><br><span class=\"line\">rabbitmqctl stop_app</span><br><span class=\"line\">rabbitmqctl join_cluster rabbit@c0543dbe04fe</span><br><span class=\"line\">rabbitmqctl start_app</span><br></pre></td></tr></table></figure></p>\n<p>查看rabbitmq后台界面，可以发现集群搭建成功。不过因为直接挂载，导致容器自身映射端口并没有生效，所以在后面需要将自己的hosts配置进去，在hosts文件后面追加下面语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">172.17.0.3\t780f23c07ef7</span><br></pre></td></tr></table></figure></p>\n<p>容器ID请按照自己创建容器ID来替换。</p>\n<h1 id=\"小知识\"><a href=\"#小知识\" class=\"headerlink\" title=\"小知识\"></a>小知识</h1><h2 id=\"sed命令\"><a href=\"#sed命令\" class=\"headerlink\" title=\"sed命令\"></a>sed命令</h2><p>sed -i ‘s/指定的字符/要插入的字符&amp;/‘  文件  #前插<br>sed -i ‘s/指定的字符/&amp;要插入的字符/‘  文件  #后插<br>sed ‘s/原字符串/替换字符串/‘ 文件            #替换<br>sed ‘s/原字符串/替换字符串/g’ 文件            #替换所有<br>\\n 换行符  \\转义</p>\n<h2 id=\"查看容器端口映射\"><a href=\"#查看容器端口映射\" class=\"headerlink\" title=\"查看容器端口映射\"></a>查看容器端口映射</h2><p>docker port <name></name></p>\n<h2 id=\"失败解决\"><a href=\"#失败解决\" class=\"headerlink\" title=\"失败解决\"></a>失败解决</h2><p>安装rpm包如果出现“Exiting on user Command”的错误，请在yum命令后加上“-y”选项</p>\n<h2 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h2><p>不可以使用，尽量避免，网上说可以CMD或者entrypoint设置为/usr/sbin/init，但是创建容器时一直没有反应，所以放弃了</p>\n"},{"title":"Docker入门及基础命令","id":"101","date":"2018-05-16T02:20:31.000Z","author":["linxu"],"_content":"![](https://i.imgur.com/0p0flPx.jpg)\n# Docker入门 #  \n## Docker介绍 ##\n>关于 Docker 是什么，有个著名的隐喻：集装箱。但是它却起了个“码头工人”（docker 的英文翻译）的名字。这无疑给使用者很多暗示：“快来用吧！用了 Docker，就像世界出现了集装箱，这样你的业务就可以随意的、无拘无束的运行在任何地方（Docker 公司的口号：Build，Ship，and Run Any App，Anywhere），于是码头工人就基本都可以下岗了。”但是人们往往忽略了一个问题，隐喻的好处是方便人理解一个不容易理解的概念，但并不能解释其概念本身。 　　　　　　　　　　　　　　　　　　 　　—————————邹立巍《什么是 Docker?》\n\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\n\nDocker主要关键词是容器和镜像，可以从仓库中获取所需要的镜像，通过镜像创建容器。每一个容器都相当于一个完全独立的虚拟机(Docker不是虚拟机)，但是所占用内存消耗和启动时间等都远远小于虚拟机。在容器中可以根据所需安装软件，部署应用服务等。\n\n## Docker与Vm对比 ##\n![](https://i.imgur.com/Vx4ilht.jpg)\n\n图中可以看出docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有优势。docker利用的是宿主机的内核，而不需要Guest OS,因此新建一个docker容器只需要几秒钟。docker不需要增加Guest OS，所以在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。\n\n## 安装Docker ##\ndocker的安装非常简单，centOs中直接使用  \n\n\tyum install docker\n即可安装。\n\n## Docker基础命令 ##\n1. 启动docker  \n\t```\n\tservice docker start    \t#启动\n\tservice docker stop \t\t#停止\n\tservice docker restart \t \t#重启\n\t```\n2. 运行创建容器\n\t```\n\tsudo docker run -i -t ubuntu /bin/bash\n\t-i 保证容器中STDIN是开启的。STDIN是标准输入，一般指键盘输入到缓冲区里的东西。\n\t-t 为创建的容器分配一个伪tty终端。\n\t```\n3. 安装Vim  \n\t```\n\tapt-get update && apt-get install vim #容器中执行\n\t```\n4. 退出容器\n\t```\n\texit\n\t```\n5. 查看容器列表\n\t```\n\tdocker ps     \t\t#列出所有运行中的容器\n\tdocker ps -a  \t\t#列出所有容器\n\tdocker PS -l  \t\t#列出最后一次运行的容器\n\tdocker PS -n x    \t#列出最后一次运行的x个容器\n\t```\n6. 创建指定名称的容器\n\t```\n\tsudo docker run --name reallinxu -i -t ubuntu /bin/bash\n\t```\n7. 删除容器\n\t```\n\tdocker rm reallinxu  #可以通过容器名称、CONTAINER ID删除\n\t```\n8. 启动容器\n\t```\n\tdocker start b74cf5d6a711   #启动一个已停止的容器\n\tdocker restart b74cf5d6a711 #重新启动容器\n\t```\n9. 附着容器会话\n\t```\n\tdocker attach 48db85aa8845\n\t```\n10. 创建守护容器\n\t```\n\tsudo docker run --name daemon_aaa -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n\t#-d docker会让容器后台运行\n\t#-c 设置容器CPU权重，在CPU共享场景使用\n\t```\n11. 获取容器日志  \n\t```\n\tsudo docker logs daemon_aaa \t\t#输出最后几条log\n\tsudo docker logs -f daemon_aaa\t\t#动态监控log\n\tdocker logs --tail 10 daemon_aaa\t#获取日志最后10行\n\tdocker logs --tail 0 -f daemon_aaa\t#跟踪容器最新log\n\t```\n12. 查看容器内进程\n\t```\n\tsudo docker top daemon_aaa  \n\t```\n13. 在容器内部运行进程\n\t```\n\tsudo docker exec -d daemon_aaa touch /etc/new_config_file\n\t#-d 表示需要运行一个后台进程\n\tsudo docker exec -t -i daemon_aaa /bin/bash\n\t#创建一个新的bash会话，通过docker exec可以在运行中的容器中进行操作管理\n\t```\n14. 停止守护容器\n\t```\n\tsudo docker stop daemon_aaa #向容器发送SIGTERM信号\n\tsudo docker kill daemon_aaa #向容器发送SIGKILL信号,可以快速停止\n\t```\n15. 自动重启容器\n\t```\n\tsudo docker run --restart=always --name daemon_ccc -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n\t#--restart=always 无论退出代码是什么都会自动重启\n\t#--restart=on-failure 退出代码非0时重启\n\t#--restart=on-failure:5 非0时重启，最多重启5次\n\t```\n16. 获取容器信息\n\t```\n\tdocker inspect daemon_aaa   #查看容器详细信息\n\tdocker inspect --format='{{.State.Running}}' daemon_aaa #查看指定属性，区分大小写\n\tdocker inspect --format='{{.State.Running}} {{.Name}}'  daemon_aaa daemon_bbb #查看多个容器多个属性\n\t#所有容器都放在/var/lib/docker/containers文件夹下\n\t```\n17. 删除所有容器小技巧\n\t```\n\tdocker rm `docker ps -a -q`   #返回所有容器id传给rm\n\t```\n\n## 使用docker镜像和仓库 ##  \n1. 拉取指定仓库的镜像，默认为latest\n\t```\n\tdocker pull ubuntu\n\t```\n2. 查看本地镜像\n\t```\n\tdocker images\n\t```\n3. 镜像标签\n\t```\n\tdocker run -t -u --name haha ubuntu:12.04 /bin/bash\n\t#通过镜像ubuntu:12.04启动一个容器，不指定标签则为latest\n\t```\n4. docker hub上查找镜像\n\t```\n\tdocker search puppet\n\t```\n5. docker commit方法构建\n\tdockerhub注册账号：https://hub.docker.com/\n\t登录dockerhub\n\t```\n\tdocker login #登录dockerhub,个人认证信息保存在$HOME/.dockercfg\n\tsudo docker commit 9de0d8b43b0f reallinxu/ubuntu1  #提交一个镜像\n\tdocker commit -m=\"test\" --author=\"reallinxu\" 1d61b09d590d reallinxu/hah:hah\n\t#-m 提交信息\n\t#--author 作者\n\t#:hah 标签\n\t#docker commit提交的只是创建的容器与容器的当前状态有差异的部分，这使得更新非常轻量\n\t```\n6. dockerfile方法构建\n\t创建文件\n\t```\n\tmkdir static_web\n\tcd static_web\n\ttouch Dockerfile\n\tvi Dockerfile\n\t# Version: 0.0.1\n\tFROM ubuntu:14.04  #从指定镜像创建容器\n\tMAINTAINER reallinxu \"xxxxx@qq.com\" #指定用户名和作者\n\tRUN apt-get update #更新apt-get\n\tRUN apt-get install -y nginx  #安装ngnix\n\tRUN echo 'Hi,I am in your container' >/usr/share/nginx/html/index.html\n\tEXPOSE 80 #向外部公开80端口，可以公开多个端口\n\t```\n7. docker build构建镜像\n\t```\n\tsudo docker build -t=\"reallinxu/static_web\" .\t#默认latest标签\n\tsudo docker build -t=\"reallinxu/static_web:v1\" . #指定标签\n\tsudo docker build -t=\"reallinxu/static_web:v1\" gitURL  #可以通过git根目录下文件构建\n\t#build时会按照文件顺序一步步执行\n\t```\n8. 镜像推送到dockerhub\n\t```\n\tsudo docker commit 9de0d8b43b0f reallinxu/ubuntu1:test #构建镜像的时候最好加上tag，不加可能会报错\n\tsudo docker push 9de0d8b43b0f reallinxu/ubuntu1:test #推送到dockerhub\n\t```\n9. 删除镜像\n\t```\n\tdocker rmi reallinxu/ubuntu1:test\n\tdocker rmi `docker images -a -q`  #小技巧，返回所有镜像ID，再移除\n\t```\n\n# Docker进阶 #\n## 启动阿里云加速 ##\ndocker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容  \n\t```\n\t{\n\t\t\"registry-mirrors\": [\"https://almtd3fa.mirror.aliyuncs.com\"]\n\t}\n\t#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker\n\tsystemctl daemon-reload\n\tservice docker restart\n\t```\n## Docker中运行jar ##\n1. 下载java8镜像：\n\t```\n\tdocker pull frolvlad/alpine-oraclejdk8\n\t```\n2. 创建一个简单的spring-boot项目，开放8080端口，生成可执行的jar文件。\n3. 将demo-0.0.1-SNAPSHOT.jar放到/usr下，执行命令创建容器并执行jar\n\t```\n\tdocker run -d -p 8080:8080 -v /usr/demo-0.0.1-SNAPSHOT.jar:/usr/demo-0.0.1-SNAPSHOT.jar --name springboot frolvlad/alpine-oraclejdk8 java -jar /usr/demo-0.0.1-SNAPSHOT.jar\n\t#-d 容器后台运行\n\t#-p 主机端口与容器端口映射\n\t```\n4. 浏览器中输入ip:8080验证是否启动成功。\n\n## docker宿主机与容器文件交互 ##  \n\n1. 从主机复制到容器  \n\t```\n\tsudo docker cp host_path containerID:container_path\n\t```\n   从容器复制到主机\n\t```\n\tsudo docker cp containerID:container_path host_path\n\t```\n2. 挂载数据卷\n\t```\n\tdocker run -v /path/to/hostdir:/mnt $container(image name or image id)  在容器内拷贝  \n\tcp /mnt/sourcefile /path/to/destfile \n\t```","source":"_posts/Docker-Learning.md","raw":"---\ntitle: \"Docker入门及基础命令\"\ntags:\n  - Docker\nid: 101\ncategories:\n  - Docker\ndate: 2018-05-16 10:20:31\nauthor: \n  - linxu\n---\n![](https://i.imgur.com/0p0flPx.jpg)\n# Docker入门 #  \n## Docker介绍 ##\n>关于 Docker 是什么，有个著名的隐喻：集装箱。但是它却起了个“码头工人”（docker 的英文翻译）的名字。这无疑给使用者很多暗示：“快来用吧！用了 Docker，就像世界出现了集装箱，这样你的业务就可以随意的、无拘无束的运行在任何地方（Docker 公司的口号：Build，Ship，and Run Any App，Anywhere），于是码头工人就基本都可以下岗了。”但是人们往往忽略了一个问题，隐喻的好处是方便人理解一个不容易理解的概念，但并不能解释其概念本身。 　　　　　　　　　　　　　　　　　　 　　—————————邹立巍《什么是 Docker?》\n\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\n\nDocker主要关键词是容器和镜像，可以从仓库中获取所需要的镜像，通过镜像创建容器。每一个容器都相当于一个完全独立的虚拟机(Docker不是虚拟机)，但是所占用内存消耗和启动时间等都远远小于虚拟机。在容器中可以根据所需安装软件，部署应用服务等。\n\n## Docker与Vm对比 ##\n![](https://i.imgur.com/Vx4ilht.jpg)\n\n图中可以看出docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有优势。docker利用的是宿主机的内核，而不需要Guest OS,因此新建一个docker容器只需要几秒钟。docker不需要增加Guest OS，所以在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。\n\n## 安装Docker ##\ndocker的安装非常简单，centOs中直接使用  \n\n\tyum install docker\n即可安装。\n\n## Docker基础命令 ##\n1. 启动docker  \n\t```\n\tservice docker start    \t#启动\n\tservice docker stop \t\t#停止\n\tservice docker restart \t \t#重启\n\t```\n2. 运行创建容器\n\t```\n\tsudo docker run -i -t ubuntu /bin/bash\n\t-i 保证容器中STDIN是开启的。STDIN是标准输入，一般指键盘输入到缓冲区里的东西。\n\t-t 为创建的容器分配一个伪tty终端。\n\t```\n3. 安装Vim  \n\t```\n\tapt-get update && apt-get install vim #容器中执行\n\t```\n4. 退出容器\n\t```\n\texit\n\t```\n5. 查看容器列表\n\t```\n\tdocker ps     \t\t#列出所有运行中的容器\n\tdocker ps -a  \t\t#列出所有容器\n\tdocker PS -l  \t\t#列出最后一次运行的容器\n\tdocker PS -n x    \t#列出最后一次运行的x个容器\n\t```\n6. 创建指定名称的容器\n\t```\n\tsudo docker run --name reallinxu -i -t ubuntu /bin/bash\n\t```\n7. 删除容器\n\t```\n\tdocker rm reallinxu  #可以通过容器名称、CONTAINER ID删除\n\t```\n8. 启动容器\n\t```\n\tdocker start b74cf5d6a711   #启动一个已停止的容器\n\tdocker restart b74cf5d6a711 #重新启动容器\n\t```\n9. 附着容器会话\n\t```\n\tdocker attach 48db85aa8845\n\t```\n10. 创建守护容器\n\t```\n\tsudo docker run --name daemon_aaa -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n\t#-d docker会让容器后台运行\n\t#-c 设置容器CPU权重，在CPU共享场景使用\n\t```\n11. 获取容器日志  \n\t```\n\tsudo docker logs daemon_aaa \t\t#输出最后几条log\n\tsudo docker logs -f daemon_aaa\t\t#动态监控log\n\tdocker logs --tail 10 daemon_aaa\t#获取日志最后10行\n\tdocker logs --tail 0 -f daemon_aaa\t#跟踪容器最新log\n\t```\n12. 查看容器内进程\n\t```\n\tsudo docker top daemon_aaa  \n\t```\n13. 在容器内部运行进程\n\t```\n\tsudo docker exec -d daemon_aaa touch /etc/new_config_file\n\t#-d 表示需要运行一个后台进程\n\tsudo docker exec -t -i daemon_aaa /bin/bash\n\t#创建一个新的bash会话，通过docker exec可以在运行中的容器中进行操作管理\n\t```\n14. 停止守护容器\n\t```\n\tsudo docker stop daemon_aaa #向容器发送SIGTERM信号\n\tsudo docker kill daemon_aaa #向容器发送SIGKILL信号,可以快速停止\n\t```\n15. 自动重启容器\n\t```\n\tsudo docker run --restart=always --name daemon_ccc -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n\t#--restart=always 无论退出代码是什么都会自动重启\n\t#--restart=on-failure 退出代码非0时重启\n\t#--restart=on-failure:5 非0时重启，最多重启5次\n\t```\n16. 获取容器信息\n\t```\n\tdocker inspect daemon_aaa   #查看容器详细信息\n\tdocker inspect --format='{{.State.Running}}' daemon_aaa #查看指定属性，区分大小写\n\tdocker inspect --format='{{.State.Running}} {{.Name}}'  daemon_aaa daemon_bbb #查看多个容器多个属性\n\t#所有容器都放在/var/lib/docker/containers文件夹下\n\t```\n17. 删除所有容器小技巧\n\t```\n\tdocker rm `docker ps -a -q`   #返回所有容器id传给rm\n\t```\n\n## 使用docker镜像和仓库 ##  \n1. 拉取指定仓库的镜像，默认为latest\n\t```\n\tdocker pull ubuntu\n\t```\n2. 查看本地镜像\n\t```\n\tdocker images\n\t```\n3. 镜像标签\n\t```\n\tdocker run -t -u --name haha ubuntu:12.04 /bin/bash\n\t#通过镜像ubuntu:12.04启动一个容器，不指定标签则为latest\n\t```\n4. docker hub上查找镜像\n\t```\n\tdocker search puppet\n\t```\n5. docker commit方法构建\n\tdockerhub注册账号：https://hub.docker.com/\n\t登录dockerhub\n\t```\n\tdocker login #登录dockerhub,个人认证信息保存在$HOME/.dockercfg\n\tsudo docker commit 9de0d8b43b0f reallinxu/ubuntu1  #提交一个镜像\n\tdocker commit -m=\"test\" --author=\"reallinxu\" 1d61b09d590d reallinxu/hah:hah\n\t#-m 提交信息\n\t#--author 作者\n\t#:hah 标签\n\t#docker commit提交的只是创建的容器与容器的当前状态有差异的部分，这使得更新非常轻量\n\t```\n6. dockerfile方法构建\n\t创建文件\n\t```\n\tmkdir static_web\n\tcd static_web\n\ttouch Dockerfile\n\tvi Dockerfile\n\t# Version: 0.0.1\n\tFROM ubuntu:14.04  #从指定镜像创建容器\n\tMAINTAINER reallinxu \"xxxxx@qq.com\" #指定用户名和作者\n\tRUN apt-get update #更新apt-get\n\tRUN apt-get install -y nginx  #安装ngnix\n\tRUN echo 'Hi,I am in your container' >/usr/share/nginx/html/index.html\n\tEXPOSE 80 #向外部公开80端口，可以公开多个端口\n\t```\n7. docker build构建镜像\n\t```\n\tsudo docker build -t=\"reallinxu/static_web\" .\t#默认latest标签\n\tsudo docker build -t=\"reallinxu/static_web:v1\" . #指定标签\n\tsudo docker build -t=\"reallinxu/static_web:v1\" gitURL  #可以通过git根目录下文件构建\n\t#build时会按照文件顺序一步步执行\n\t```\n8. 镜像推送到dockerhub\n\t```\n\tsudo docker commit 9de0d8b43b0f reallinxu/ubuntu1:test #构建镜像的时候最好加上tag，不加可能会报错\n\tsudo docker push 9de0d8b43b0f reallinxu/ubuntu1:test #推送到dockerhub\n\t```\n9. 删除镜像\n\t```\n\tdocker rmi reallinxu/ubuntu1:test\n\tdocker rmi `docker images -a -q`  #小技巧，返回所有镜像ID，再移除\n\t```\n\n# Docker进阶 #\n## 启动阿里云加速 ##\ndocker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容  \n\t```\n\t{\n\t\t\"registry-mirrors\": [\"https://almtd3fa.mirror.aliyuncs.com\"]\n\t}\n\t#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker\n\tsystemctl daemon-reload\n\tservice docker restart\n\t```\n## Docker中运行jar ##\n1. 下载java8镜像：\n\t```\n\tdocker pull frolvlad/alpine-oraclejdk8\n\t```\n2. 创建一个简单的spring-boot项目，开放8080端口，生成可执行的jar文件。\n3. 将demo-0.0.1-SNAPSHOT.jar放到/usr下，执行命令创建容器并执行jar\n\t```\n\tdocker run -d -p 8080:8080 -v /usr/demo-0.0.1-SNAPSHOT.jar:/usr/demo-0.0.1-SNAPSHOT.jar --name springboot frolvlad/alpine-oraclejdk8 java -jar /usr/demo-0.0.1-SNAPSHOT.jar\n\t#-d 容器后台运行\n\t#-p 主机端口与容器端口映射\n\t```\n4. 浏览器中输入ip:8080验证是否启动成功。\n\n## docker宿主机与容器文件交互 ##  \n\n1. 从主机复制到容器  \n\t```\n\tsudo docker cp host_path containerID:container_path\n\t```\n   从容器复制到主机\n\t```\n\tsudo docker cp containerID:container_path host_path\n\t```\n2. 挂载数据卷\n\t```\n\tdocker run -v /path/to/hostdir:/mnt $container(image name or image id)  在容器内拷贝  \n\tcp /mnt/sourcefile /path/to/destfile \n\t```","slug":"Docker-Learning","published":1,"updated":"2018-05-31T03:28:43.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj41660900074ggp8ofnjapc","content":"<p><img src=\"https://i.imgur.com/0p0flPx.jpg\" alt=\"\"></p>\n<h1 id=\"Docker入门\"><a href=\"#Docker入门\" class=\"headerlink\" title=\"Docker入门\"></a>Docker入门</h1><h2 id=\"Docker介绍\"><a href=\"#Docker介绍\" class=\"headerlink\" title=\"Docker介绍\"></a>Docker介绍</h2><blockquote>\n<p>关于 Docker 是什么，有个著名的隐喻：集装箱。但是它却起了个“码头工人”（docker 的英文翻译）的名字。这无疑给使用者很多暗示：“快来用吧！用了 Docker，就像世界出现了集装箱，这样你的业务就可以随意的、无拘无束的运行在任何地方（Docker 公司的口号：Build，Ship，and Run Any App，Anywhere），于是码头工人就基本都可以下岗了。”但是人们往往忽略了一个问题，隐喻的好处是方便人理解一个不容易理解的概念，但并不能解释其概念本身。 　　　　　　　　　　　　　　　　　　 　　—————————邹立巍《什么是 Docker?》</p>\n</blockquote>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n<p>Docker主要关键词是容器和镜像，可以从仓库中获取所需要的镜像，通过镜像创建容器。每一个容器都相当于一个完全独立的虚拟机(Docker不是虚拟机)，但是所占用内存消耗和启动时间等都远远小于虚拟机。在容器中可以根据所需安装软件，部署应用服务等。</p>\n<h2 id=\"Docker与Vm对比\"><a href=\"#Docker与Vm对比\" class=\"headerlink\" title=\"Docker与Vm对比\"></a>Docker与Vm对比</h2><p><img src=\"https://i.imgur.com/Vx4ilht.jpg\" alt=\"\"></p>\n<p>图中可以看出docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有优势。docker利用的是宿主机的内核，而不需要Guest OS,因此新建一个docker容器只需要几秒钟。docker不需要增加Guest OS，所以在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。</p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>docker的安装非常简单，centOs中直接使用  </p>\n<pre><code>yum install docker\n</code></pre><p>即可安装。</p>\n<h2 id=\"Docker基础命令\"><a href=\"#Docker基础命令\" class=\"headerlink\" title=\"Docker基础命令\"></a>Docker基础命令</h2><ol>\n<li><p>启动docker  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker start    \t#启动</span><br><span class=\"line\">service docker stop \t\t#停止</span><br><span class=\"line\">service docker restart \t \t#重启</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行创建容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\">-i 保证容器中STDIN是开启的。STDIN是标准输入，一般指键盘输入到缓冲区里的东西。</span><br><span class=\"line\">-t 为创建的容器分配一个伪tty终端。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Vim  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update &amp;&amp; apt-get install vim #容器中执行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>退出容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看容器列表</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps     \t\t#列出所有运行中的容器</span><br><span class=\"line\">docker ps -a  \t\t#列出所有容器</span><br><span class=\"line\">docker PS -l  \t\t#列出最后一次运行的容器</span><br><span class=\"line\">docker PS -n x    \t#列出最后一次运行的x个容器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建指定名称的容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name reallinxu -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm reallinxu  #可以通过容器名称、CONTAINER ID删除</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start b74cf5d6a711   #启动一个已停止的容器</span><br><span class=\"line\">docker restart b74cf5d6a711 #重新启动容器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>附着容器会话</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 48db85aa8845</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建守护容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name daemon_aaa -d ubuntu /bin/sh -c &quot;while true;do echo hello world;sleep 1;done&quot;</span><br><span class=\"line\">#-d docker会让容器后台运行</span><br><span class=\"line\">#-c 设置容器CPU权重，在CPU共享场景使用</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取容器日志  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker logs daemon_aaa \t\t#输出最后几条log</span><br><span class=\"line\">sudo docker logs -f daemon_aaa\t\t#动态监控log</span><br><span class=\"line\">docker logs --tail 10 daemon_aaa\t#获取日志最后10行</span><br><span class=\"line\">docker logs --tail 0 -f daemon_aaa\t#跟踪容器最新log</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看容器内进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker top daemon_aaa</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在容器内部运行进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec -d daemon_aaa touch /etc/new_config_file</span><br><span class=\"line\">#-d 表示需要运行一个后台进程</span><br><span class=\"line\">sudo docker exec -t -i daemon_aaa /bin/bash</span><br><span class=\"line\">#创建一个新的bash会话，通过docker exec可以在运行中的容器中进行操作管理</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止守护容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker stop daemon_aaa #向容器发送SIGTERM信号</span><br><span class=\"line\">sudo docker kill daemon_aaa #向容器发送SIGKILL信号,可以快速停止</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动重启容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart=always --name daemon_ccc -d ubuntu /bin/sh -c &quot;while true;do echo hello world;sleep 1;done&quot;</span><br><span class=\"line\">#--restart=always 无论退出代码是什么都会自动重启</span><br><span class=\"line\">#--restart=on-failure 退出代码非0时重启</span><br><span class=\"line\">#--restart=on-failure:5 非0时重启，最多重启5次</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取容器信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect daemon_aaa   #查看容器详细信息</span><br><span class=\"line\">docker inspect --format=&apos;&#123;&#123;.State.Running&#125;&#125;&apos; daemon_aaa #查看指定属性，区分大小写</span><br><span class=\"line\">docker inspect --format=&apos;&#123;&#123;.State.Running&#125;&#125; &#123;&#123;.Name&#125;&#125;&apos;  daemon_aaa daemon_bbb #查看多个容器多个属性</span><br><span class=\"line\">#所有容器都放在/var/lib/docker/containers文件夹下</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除所有容器小技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`   #返回所有容器id传给rm</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"使用docker镜像和仓库\"><a href=\"#使用docker镜像和仓库\" class=\"headerlink\" title=\"使用docker镜像和仓库\"></a>使用docker镜像和仓库</h2><ol>\n<li><p>拉取指定仓库的镜像，默认为latest</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看本地镜像</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像标签</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -u --name haha ubuntu:12.04 /bin/bash</span><br><span class=\"line\">#通过镜像ubuntu:12.04启动一个容器，不指定标签则为latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker hub上查找镜像</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search puppet</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker commit方法构建<br> dockerhub注册账号：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a><br> 登录dockerhub</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login #登录dockerhub,个人认证信息保存在$HOME/.dockercfg</span><br><span class=\"line\">sudo docker commit 9de0d8b43b0f reallinxu/ubuntu1  #提交一个镜像</span><br><span class=\"line\">docker commit -m=&quot;test&quot; --author=&quot;reallinxu&quot; 1d61b09d590d reallinxu/hah:hah</span><br><span class=\"line\">#-m 提交信息</span><br><span class=\"line\">#--author 作者</span><br><span class=\"line\">#:hah 标签</span><br><span class=\"line\">#docker commit提交的只是创建的容器与容器的当前状态有差异的部分，这使得更新非常轻量</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>dockerfile方法构建<br> 创建文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir static_web</span><br><span class=\"line\">cd static_web</span><br><span class=\"line\">touch Dockerfile</span><br><span class=\"line\">vi Dockerfile</span><br><span class=\"line\"># Version: 0.0.1</span><br><span class=\"line\">FROM ubuntu:14.04  #从指定镜像创建容器</span><br><span class=\"line\">MAINTAINER reallinxu &quot;xxxxx@qq.com&quot; #指定用户名和作者</span><br><span class=\"line\">RUN apt-get update #更新apt-get</span><br><span class=\"line\">RUN apt-get install -y nginx  #安装ngnix</span><br><span class=\"line\">RUN echo &apos;Hi,I am in your container&apos; &gt;/usr/share/nginx/html/index.html</span><br><span class=\"line\">EXPOSE 80 #向外部公开80端口，可以公开多个端口</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker build构建镜像</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker build -t=&quot;reallinxu/static_web&quot; .\t#默认latest标签</span><br><span class=\"line\">sudo docker build -t=&quot;reallinxu/static_web:v1&quot; . #指定标签</span><br><span class=\"line\">sudo docker build -t=&quot;reallinxu/static_web:v1&quot; gitURL  #可以通过git根目录下文件构建</span><br><span class=\"line\">#build时会按照文件顺序一步步执行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像推送到dockerhub</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker commit 9de0d8b43b0f reallinxu/ubuntu1:test #构建镜像的时候最好加上tag，不加可能会报错</span><br><span class=\"line\">sudo docker push 9de0d8b43b0f reallinxu/ubuntu1:test #推送到dockerhub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除镜像</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi reallinxu/ubuntu1:test</span><br><span class=\"line\">docker rmi `docker images -a -q`  #小技巧，返回所有镜像ID，再移除</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Docker进阶\"><a href=\"#Docker进阶\" class=\"headerlink\" title=\"Docker进阶\"></a>Docker进阶</h1><h2 id=\"启动阿里云加速\"><a href=\"#启动阿里云加速\" class=\"headerlink\" title=\"启动阿里云加速\"></a>启动阿里云加速</h2><p>docker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [&quot;https://almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker中运行jar\"><a href=\"#Docker中运行jar\" class=\"headerlink\" title=\"Docker中运行jar\"></a>Docker中运行jar</h2><ol>\n<li><p>下载java8镜像：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull frolvlad/alpine-oraclejdk8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个简单的spring-boot项目，开放8080端口，生成可执行的jar文件。</p>\n</li>\n<li><p>将demo-0.0.1-SNAPSHOT.jar放到/usr下，执行命令创建容器并执行jar</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:8080 -v /usr/demo-0.0.1-SNAPSHOT.jar:/usr/demo-0.0.1-SNAPSHOT.jar --name springboot frolvlad/alpine-oraclejdk8 java -jar /usr/demo-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\">#-d 容器后台运行</span><br><span class=\"line\">#-p 主机端口与容器端口映射</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览器中输入ip:8080验证是否启动成功。</p>\n</li>\n</ol>\n<h2 id=\"docker宿主机与容器文件交互\"><a href=\"#docker宿主机与容器文件交互\" class=\"headerlink\" title=\"docker宿主机与容器文件交互\"></a>docker宿主机与容器文件交互</h2><ol>\n<li><p>从主机复制到容器  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp host_path containerID:container_path</span><br></pre></td></tr></table></figure>\n<p>从容器复制到主机</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>挂载数据卷</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v /path/to/hostdir:/mnt $container(image name or image id)  在容器内拷贝  </span><br><span class=\"line\">cp /mnt/sourcefile /path/to/destfile</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.imgur.com/0p0flPx.jpg\" alt=\"\"></p>\n<h1 id=\"Docker入门\"><a href=\"#Docker入门\" class=\"headerlink\" title=\"Docker入门\"></a>Docker入门</h1><h2 id=\"Docker介绍\"><a href=\"#Docker介绍\" class=\"headerlink\" title=\"Docker介绍\"></a>Docker介绍</h2><blockquote>\n<p>关于 Docker 是什么，有个著名的隐喻：集装箱。但是它却起了个“码头工人”（docker 的英文翻译）的名字。这无疑给使用者很多暗示：“快来用吧！用了 Docker，就像世界出现了集装箱，这样你的业务就可以随意的、无拘无束的运行在任何地方（Docker 公司的口号：Build，Ship，and Run Any App，Anywhere），于是码头工人就基本都可以下岗了。”但是人们往往忽略了一个问题，隐喻的好处是方便人理解一个不容易理解的概念，但并不能解释其概念本身。 　　　　　　　　　　　　　　　　　　 　　—————————邹立巍《什么是 Docker?》</p>\n</blockquote>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n<p>Docker主要关键词是容器和镜像，可以从仓库中获取所需要的镜像，通过镜像创建容器。每一个容器都相当于一个完全独立的虚拟机(Docker不是虚拟机)，但是所占用内存消耗和启动时间等都远远小于虚拟机。在容器中可以根据所需安装软件，部署应用服务等。</p>\n<h2 id=\"Docker与Vm对比\"><a href=\"#Docker与Vm对比\" class=\"headerlink\" title=\"Docker与Vm对比\"></a>Docker与Vm对比</h2><p><img src=\"https://i.imgur.com/Vx4ilht.jpg\" alt=\"\"></p>\n<p>图中可以看出docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有优势。docker利用的是宿主机的内核，而不需要Guest OS,因此新建一个docker容器只需要几秒钟。docker不需要增加Guest OS，所以在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。</p>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>docker的安装非常简单，centOs中直接使用  </p>\n<pre><code>yum install docker\n</code></pre><p>即可安装。</p>\n<h2 id=\"Docker基础命令\"><a href=\"#Docker基础命令\" class=\"headerlink\" title=\"Docker基础命令\"></a>Docker基础命令</h2><ol>\n<li><p>启动docker  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker start    \t#启动</span><br><span class=\"line\">service docker stop \t\t#停止</span><br><span class=\"line\">service docker restart \t \t#重启</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行创建容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\">-i 保证容器中STDIN是开启的。STDIN是标准输入，一般指键盘输入到缓冲区里的东西。</span><br><span class=\"line\">-t 为创建的容器分配一个伪tty终端。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装Vim  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update &amp;&amp; apt-get install vim #容器中执行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>退出容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看容器列表</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps     \t\t#列出所有运行中的容器</span><br><span class=\"line\">docker ps -a  \t\t#列出所有容器</span><br><span class=\"line\">docker PS -l  \t\t#列出最后一次运行的容器</span><br><span class=\"line\">docker PS -n x    \t#列出最后一次运行的x个容器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建指定名称的容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name reallinxu -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm reallinxu  #可以通过容器名称、CONTAINER ID删除</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动容器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start b74cf5d6a711   #启动一个已停止的容器</span><br><span class=\"line\">docker restart b74cf5d6a711 #重新启动容器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>附着容器会话</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 48db85aa8845</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建守护容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --name daemon_aaa -d ubuntu /bin/sh -c &quot;while true;do echo hello world;sleep 1;done&quot;</span><br><span class=\"line\">#-d docker会让容器后台运行</span><br><span class=\"line\">#-c 设置容器CPU权重，在CPU共享场景使用</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取容器日志  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker logs daemon_aaa \t\t#输出最后几条log</span><br><span class=\"line\">sudo docker logs -f daemon_aaa\t\t#动态监控log</span><br><span class=\"line\">docker logs --tail 10 daemon_aaa\t#获取日志最后10行</span><br><span class=\"line\">docker logs --tail 0 -f daemon_aaa\t#跟踪容器最新log</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看容器内进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker top daemon_aaa</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在容器内部运行进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker exec -d daemon_aaa touch /etc/new_config_file</span><br><span class=\"line\">#-d 表示需要运行一个后台进程</span><br><span class=\"line\">sudo docker exec -t -i daemon_aaa /bin/bash</span><br><span class=\"line\">#创建一个新的bash会话，通过docker exec可以在运行中的容器中进行操作管理</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止守护容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker stop daemon_aaa #向容器发送SIGTERM信号</span><br><span class=\"line\">sudo docker kill daemon_aaa #向容器发送SIGKILL信号,可以快速停止</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动重启容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --restart=always --name daemon_ccc -d ubuntu /bin/sh -c &quot;while true;do echo hello world;sleep 1;done&quot;</span><br><span class=\"line\">#--restart=always 无论退出代码是什么都会自动重启</span><br><span class=\"line\">#--restart=on-failure 退出代码非0时重启</span><br><span class=\"line\">#--restart=on-failure:5 非0时重启，最多重启5次</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取容器信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect daemon_aaa   #查看容器详细信息</span><br><span class=\"line\">docker inspect --format=&apos;&#123;&#123;.State.Running&#125;&#125;&apos; daemon_aaa #查看指定属性，区分大小写</span><br><span class=\"line\">docker inspect --format=&apos;&#123;&#123;.State.Running&#125;&#125; &#123;&#123;.Name&#125;&#125;&apos;  daemon_aaa daemon_bbb #查看多个容器多个属性</span><br><span class=\"line\">#所有容器都放在/var/lib/docker/containers文件夹下</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除所有容器小技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm `docker ps -a -q`   #返回所有容器id传给rm</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"使用docker镜像和仓库\"><a href=\"#使用docker镜像和仓库\" class=\"headerlink\" title=\"使用docker镜像和仓库\"></a>使用docker镜像和仓库</h2><ol>\n<li><p>拉取指定仓库的镜像，默认为latest</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看本地镜像</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像标签</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -u --name haha ubuntu:12.04 /bin/bash</span><br><span class=\"line\">#通过镜像ubuntu:12.04启动一个容器，不指定标签则为latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker hub上查找镜像</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search puppet</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker commit方法构建<br> dockerhub注册账号：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/</a><br> 登录dockerhub</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login #登录dockerhub,个人认证信息保存在$HOME/.dockercfg</span><br><span class=\"line\">sudo docker commit 9de0d8b43b0f reallinxu/ubuntu1  #提交一个镜像</span><br><span class=\"line\">docker commit -m=&quot;test&quot; --author=&quot;reallinxu&quot; 1d61b09d590d reallinxu/hah:hah</span><br><span class=\"line\">#-m 提交信息</span><br><span class=\"line\">#--author 作者</span><br><span class=\"line\">#:hah 标签</span><br><span class=\"line\">#docker commit提交的只是创建的容器与容器的当前状态有差异的部分，这使得更新非常轻量</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>dockerfile方法构建<br> 创建文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir static_web</span><br><span class=\"line\">cd static_web</span><br><span class=\"line\">touch Dockerfile</span><br><span class=\"line\">vi Dockerfile</span><br><span class=\"line\"># Version: 0.0.1</span><br><span class=\"line\">FROM ubuntu:14.04  #从指定镜像创建容器</span><br><span class=\"line\">MAINTAINER reallinxu &quot;xxxxx@qq.com&quot; #指定用户名和作者</span><br><span class=\"line\">RUN apt-get update #更新apt-get</span><br><span class=\"line\">RUN apt-get install -y nginx  #安装ngnix</span><br><span class=\"line\">RUN echo &apos;Hi,I am in your container&apos; &gt;/usr/share/nginx/html/index.html</span><br><span class=\"line\">EXPOSE 80 #向外部公开80端口，可以公开多个端口</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker build构建镜像</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker build -t=&quot;reallinxu/static_web&quot; .\t#默认latest标签</span><br><span class=\"line\">sudo docker build -t=&quot;reallinxu/static_web:v1&quot; . #指定标签</span><br><span class=\"line\">sudo docker build -t=&quot;reallinxu/static_web:v1&quot; gitURL  #可以通过git根目录下文件构建</span><br><span class=\"line\">#build时会按照文件顺序一步步执行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像推送到dockerhub</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker commit 9de0d8b43b0f reallinxu/ubuntu1:test #构建镜像的时候最好加上tag，不加可能会报错</span><br><span class=\"line\">sudo docker push 9de0d8b43b0f reallinxu/ubuntu1:test #推送到dockerhub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除镜像</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi reallinxu/ubuntu1:test</span><br><span class=\"line\">docker rmi `docker images -a -q`  #小技巧，返回所有镜像ID，再移除</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Docker进阶\"><a href=\"#Docker进阶\" class=\"headerlink\" title=\"Docker进阶\"></a>Docker进阶</h1><h2 id=\"启动阿里云加速\"><a href=\"#启动阿里云加速\" class=\"headerlink\" title=\"启动阿里云加速\"></a>启动阿里云加速</h2><p>docker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [&quot;https://almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Docker中运行jar\"><a href=\"#Docker中运行jar\" class=\"headerlink\" title=\"Docker中运行jar\"></a>Docker中运行jar</h2><ol>\n<li><p>下载java8镜像：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull frolvlad/alpine-oraclejdk8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个简单的spring-boot项目，开放8080端口，生成可执行的jar文件。</p>\n</li>\n<li><p>将demo-0.0.1-SNAPSHOT.jar放到/usr下，执行命令创建容器并执行jar</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:8080 -v /usr/demo-0.0.1-SNAPSHOT.jar:/usr/demo-0.0.1-SNAPSHOT.jar --name springboot frolvlad/alpine-oraclejdk8 java -jar /usr/demo-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\">#-d 容器后台运行</span><br><span class=\"line\">#-p 主机端口与容器端口映射</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览器中输入ip:8080验证是否启动成功。</p>\n</li>\n</ol>\n<h2 id=\"docker宿主机与容器文件交互\"><a href=\"#docker宿主机与容器文件交互\" class=\"headerlink\" title=\"docker宿主机与容器文件交互\"></a>docker宿主机与容器文件交互</h2><ol>\n<li><p>从主机复制到容器  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp host_path containerID:container_path</span><br></pre></td></tr></table></figure>\n<p>从容器复制到主机</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>挂载数据卷</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v /path/to/hostdir:/mnt $container(image name or image id)  在容器内拷贝  </span><br><span class=\"line\">cp /mnt/sourcefile /path/to/destfile</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Dockerfile构建java环境镜像","id":"521","date":"2018-05-28T10:20:31.000Z","author":["linxu"],"_content":"\n# dockerfile详解 #\nDockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速构建自定义的镜像。\n\n## dockerfile基本结构 ##\ndockerfile一般分为四部分:\n1. 基础镜像信息\n2. 维护者信息\n3. 镜像操作指令\n4. 容器启动时执行指令\n\n## dockerfile基本命令 ##\n1. FROM命令，选择一个基础镜像，如果有多个，可以使用多个from\n\t```\n\tFROM <image> 或 FROM <image>:<tag>\n\t```\n2. MAINTAINER命令，说明作者信息\n\t```\n\tMAINTAINER <name> <email>\n\t```\n3. RUN命令，RUN指令将在当前镜像基础上执行指定命令\n\t```\n\tRUN <command> \n\tRUN [\"executable\",\"param1\",\"param2\"] \n\t```\n4. cMD命令，指定启动容器时执行的命令，每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令\n\t```\n\t支持三种格式：\n\tCMD [\"executable\",\"param1\",\"param2\"]使用exec执行，推荐方式。\n\tCMD command param1 prarm2 在/bin/sh中执行，提供给需要交互的应用\n\tCMD [\"prarm1\",\"param2\"]提供给ENTRYPOINT的默认参数\n\t```\n5. EXPOSE命令，暴露容器端口\n\t```\n\tEXPOSE <port> <port> ...\n\t```\n6. ENV命令，指定环境变量\n\t```\n\tENV <key> <value>\n\t```\n7. ADD命令，复制宿主机文件或目录到容器中，其中src可以是Dockerfile所在目录的一个相对路径(文件或目录)，也可以是一个URL，还可以是一个tar文件\n\t```\n\tADD <src> <dest>\n\t```\n8. COPY命令，复制本地主机的src为容器中的dest，目标路径不存在时，会自动创建\n\t```\n\tCOPY <src> <dest>\n\t```\n9. ENTRYPOINT命令，配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。\n\t```\t\n\tENTRYPOINT [\"executable\",\"param1\",\"param2\"]\n\tENTRYPOING command param1 param2 (shell中执行)\n\t```\n10. VOLUME命令，创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。\n\t```\n\tVOLUME [\"/data\"]\n\t```\n11. USER命令，指定运行容器时的用户名或UID，后续的RUN也会使用指定用户\n\t```\n\tUSER daemon\n\t```\n12. WORKDIR命令，为后续的RUN、CMD、ENTRYPOINT指令配置工作目录，可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。\n\t```\n\tWORKDIR /path/to/workdir\n\t```\n13. ONBUILD命令，配置当所创建的镜像作为其他新创建镜像的基础镜像时，所执行的操作指令\n\t```\n\tONBUILD [INSTRUCTION]\n\t```\n\n# Dockerfile构建java环境镜像 #  \n## 创建Dockerfile文件 ##\n```\nmkdir /usr/file\nvi /usr/file/Dockfile #文件名必须是Dockfile\n#以下是文件内容\nfrom centos\nMAINTAINER reallinxu\n\nRUN yum install -y wget\nRUN mkdir /usr/software\nRUN mkdir /usr/jdk\nRUN wget --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" -P /usr/software http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz\nRUN tar xzf /usr/software/jdk-8u171-linux-x64.tar.gz -C /usr/jdk\nENV JAVA_HOME /usr/jdk/jdk1.8.0_171\nENV PATH $PATH:$JAVA_HOME/bin\nEXPOSE 8080\n```\n\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/javaimage:v1\" .\n```\n\n## 运行容器 ##\n```\ndocker run -i -t reallinxu/javaimage:v1 /bin/bash\n```\n\n# 构建noname镜像 #\n使用本地jdk创建，首先将jdk-8u144-linux-x64.tar.gz，放到Dockerfile同一个文件夹下\n```\n#Dockerfile文件\nfrom centos\nMAINTAINER reallinxu\n\nCOPY jdk-8u144-linux-x64.tar.gz /usr/software/jdk-8u144-linux-x64.tar.gz\nWORKDIR /usr/software\nRUN mkdir /usr/jdk\nRUN tar xzf /usr/software/jdk-8u144-linux-x64.tar.gz -C /usr/jdk\nENV JAVA_HOME /usr/jdk/jdk1.8.0_171\nENV PATH $PATH:$JAVA_HOME/bin\nEXPOSE 8080\n\ndocker build -t=\"reallinxu/noname\" .\n```","source":"_posts/Dockerfile构建java环境镜像.md","raw":"---\ntitle: \"Dockerfile构建java环境镜像\"\ntags:\n  - docker\nid: 521\ncategories:\n  - Docker\ndate: 2018-05-28 18:20:31\nauthor: \n  - linxu\n---\n\n# dockerfile详解 #\nDockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速构建自定义的镜像。\n\n## dockerfile基本结构 ##\ndockerfile一般分为四部分:\n1. 基础镜像信息\n2. 维护者信息\n3. 镜像操作指令\n4. 容器启动时执行指令\n\n## dockerfile基本命令 ##\n1. FROM命令，选择一个基础镜像，如果有多个，可以使用多个from\n\t```\n\tFROM <image> 或 FROM <image>:<tag>\n\t```\n2. MAINTAINER命令，说明作者信息\n\t```\n\tMAINTAINER <name> <email>\n\t```\n3. RUN命令，RUN指令将在当前镜像基础上执行指定命令\n\t```\n\tRUN <command> \n\tRUN [\"executable\",\"param1\",\"param2\"] \n\t```\n4. cMD命令，指定启动容器时执行的命令，每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令\n\t```\n\t支持三种格式：\n\tCMD [\"executable\",\"param1\",\"param2\"]使用exec执行，推荐方式。\n\tCMD command param1 prarm2 在/bin/sh中执行，提供给需要交互的应用\n\tCMD [\"prarm1\",\"param2\"]提供给ENTRYPOINT的默认参数\n\t```\n5. EXPOSE命令，暴露容器端口\n\t```\n\tEXPOSE <port> <port> ...\n\t```\n6. ENV命令，指定环境变量\n\t```\n\tENV <key> <value>\n\t```\n7. ADD命令，复制宿主机文件或目录到容器中，其中src可以是Dockerfile所在目录的一个相对路径(文件或目录)，也可以是一个URL，还可以是一个tar文件\n\t```\n\tADD <src> <dest>\n\t```\n8. COPY命令，复制本地主机的src为容器中的dest，目标路径不存在时，会自动创建\n\t```\n\tCOPY <src> <dest>\n\t```\n9. ENTRYPOINT命令，配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。\n\t```\t\n\tENTRYPOINT [\"executable\",\"param1\",\"param2\"]\n\tENTRYPOING command param1 param2 (shell中执行)\n\t```\n10. VOLUME命令，创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。\n\t```\n\tVOLUME [\"/data\"]\n\t```\n11. USER命令，指定运行容器时的用户名或UID，后续的RUN也会使用指定用户\n\t```\n\tUSER daemon\n\t```\n12. WORKDIR命令，为后续的RUN、CMD、ENTRYPOINT指令配置工作目录，可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。\n\t```\n\tWORKDIR /path/to/workdir\n\t```\n13. ONBUILD命令，配置当所创建的镜像作为其他新创建镜像的基础镜像时，所执行的操作指令\n\t```\n\tONBUILD [INSTRUCTION]\n\t```\n\n# Dockerfile构建java环境镜像 #  \n## 创建Dockerfile文件 ##\n```\nmkdir /usr/file\nvi /usr/file/Dockfile #文件名必须是Dockfile\n#以下是文件内容\nfrom centos\nMAINTAINER reallinxu\n\nRUN yum install -y wget\nRUN mkdir /usr/software\nRUN mkdir /usr/jdk\nRUN wget --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" -P /usr/software http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz\nRUN tar xzf /usr/software/jdk-8u171-linux-x64.tar.gz -C /usr/jdk\nENV JAVA_HOME /usr/jdk/jdk1.8.0_171\nENV PATH $PATH:$JAVA_HOME/bin\nEXPOSE 8080\n```\n\n## 构建镜像 ##\n```\ndocker build -t=\"reallinxu/javaimage:v1\" .\n```\n\n## 运行容器 ##\n```\ndocker run -i -t reallinxu/javaimage:v1 /bin/bash\n```\n\n# 构建noname镜像 #\n使用本地jdk创建，首先将jdk-8u144-linux-x64.tar.gz，放到Dockerfile同一个文件夹下\n```\n#Dockerfile文件\nfrom centos\nMAINTAINER reallinxu\n\nCOPY jdk-8u144-linux-x64.tar.gz /usr/software/jdk-8u144-linux-x64.tar.gz\nWORKDIR /usr/software\nRUN mkdir /usr/jdk\nRUN tar xzf /usr/software/jdk-8u144-linux-x64.tar.gz -C /usr/jdk\nENV JAVA_HOME /usr/jdk/jdk1.8.0_171\nENV PATH $PATH:$JAVA_HOME/bin\nEXPOSE 8080\n\ndocker build -t=\"reallinxu/noname\" .\n```","slug":"Dockerfile构建java环境镜像","published":1,"updated":"2018-09-04T03:35:18.890Z","_id":"cjj41660l000f4ggppn70yzsf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"dockerfile详解\"><a href=\"#dockerfile详解\" class=\"headerlink\" title=\"dockerfile详解\"></a>dockerfile详解</h1><p>Dockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速构建自定义的镜像。</p>\n<h2 id=\"dockerfile基本结构\"><a href=\"#dockerfile基本结构\" class=\"headerlink\" title=\"dockerfile基本结构\"></a>dockerfile基本结构</h2><p>dockerfile一般分为四部分:</p>\n<ol>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作指令</li>\n<li>容器启动时执行指令</li>\n</ol>\n<h2 id=\"dockerfile基本命令\"><a href=\"#dockerfile基本命令\" class=\"headerlink\" title=\"dockerfile基本命令\"></a>dockerfile基本命令</h2><ol>\n<li><p>FROM命令，选择一个基础镜像，如果有多个，可以使用多个from</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM &lt;image&gt; 或 FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MAINTAINER命令，说明作者信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAINTAINER &lt;name&gt; &lt;email&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>RUN命令，RUN指令将在当前镜像基础上执行指定命令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN &lt;command&gt; </span><br><span class=\"line\">RUN [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cMD命令，指定启动容器时执行的命令，每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">支持三种格式：</span><br><span class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]使用exec执行，推荐方式。</span><br><span class=\"line\">CMD command param1 prarm2 在/bin/sh中执行，提供给需要交互的应用</span><br><span class=\"line\">CMD [&quot;prarm1&quot;,&quot;param2&quot;]提供给ENTRYPOINT的默认参数</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>EXPOSE命令，暴露容器端口</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;port&gt; &lt;port&gt; ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ENV命令，指定环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ADD命令，复制宿主机文件或目录到容器中，其中src可以是Dockerfile所在目录的一个相对路径(文件或目录)，也可以是一个URL，还可以是一个tar文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>COPY命令，复制本地主机的src为容器中的dest，目标路径不存在时，会自动创建</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ENTRYPOINT命令，配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class=\"line\">ENTRYPOING command param1 param2 (shell中执行)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>VOLUME命令，创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOLUME [&quot;/data&quot;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>USER命令，指定运行容器时的用户名或UID，后续的RUN也会使用指定用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER daemon</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>WORKDIR命令，为后续的RUN、CMD、ENTRYPOINT指令配置工作目录，可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ONBUILD命令，配置当所创建的镜像作为其他新创建镜像的基础镜像时，所执行的操作指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Dockerfile构建java环境镜像\"><a href=\"#Dockerfile构建java环境镜像\" class=\"headerlink\" title=\"Dockerfile构建java环境镜像\"></a>Dockerfile构建java环境镜像</h1><h2 id=\"创建Dockerfile文件\"><a href=\"#创建Dockerfile文件\" class=\"headerlink\" title=\"创建Dockerfile文件\"></a>创建Dockerfile文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/file</span><br><span class=\"line\">vi /usr/file/Dockfile #文件名必须是Dockfile</span><br><span class=\"line\">#以下是文件内容</span><br><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">RUN yum install -y wget</span><br><span class=\"line\">RUN mkdir /usr/software</span><br><span class=\"line\">RUN mkdir /usr/jdk</span><br><span class=\"line\">RUN wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; -P /usr/software http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz</span><br><span class=\"line\">RUN tar xzf /usr/software/jdk-8u171-linux-x64.tar.gz -C /usr/jdk</span><br><span class=\"line\">ENV JAVA_HOME /usr/jdk/jdk1.8.0_171</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin</span><br><span class=\"line\">EXPOSE 8080</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t=&quot;reallinxu/javaimage:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t reallinxu/javaimage:v1 /bin/bash</span><br></pre></td></tr></table></figure>\n<h1 id=\"构建noname镜像\"><a href=\"#构建noname镜像\" class=\"headerlink\" title=\"构建noname镜像\"></a>构建noname镜像</h1><p>使用本地jdk创建，首先将jdk-8u144-linux-x64.tar.gz，放到Dockerfile同一个文件夹下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Dockerfile文件</span><br><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">COPY jdk-8u144-linux-x64.tar.gz /usr/software/jdk-8u144-linux-x64.tar.gz</span><br><span class=\"line\">WORKDIR /usr/software</span><br><span class=\"line\">RUN mkdir /usr/jdk</span><br><span class=\"line\">RUN tar xzf /usr/software/jdk-8u144-linux-x64.tar.gz -C /usr/jdk</span><br><span class=\"line\">ENV JAVA_HOME /usr/jdk/jdk1.8.0_171</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t=&quot;reallinxu/noname&quot; .</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dockerfile详解\"><a href=\"#dockerfile详解\" class=\"headerlink\" title=\"dockerfile详解\"></a>dockerfile详解</h1><p>Dockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速构建自定义的镜像。</p>\n<h2 id=\"dockerfile基本结构\"><a href=\"#dockerfile基本结构\" class=\"headerlink\" title=\"dockerfile基本结构\"></a>dockerfile基本结构</h2><p>dockerfile一般分为四部分:</p>\n<ol>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作指令</li>\n<li>容器启动时执行指令</li>\n</ol>\n<h2 id=\"dockerfile基本命令\"><a href=\"#dockerfile基本命令\" class=\"headerlink\" title=\"dockerfile基本命令\"></a>dockerfile基本命令</h2><ol>\n<li><p>FROM命令，选择一个基础镜像，如果有多个，可以使用多个from</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM &lt;image&gt; 或 FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MAINTAINER命令，说明作者信息</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAINTAINER &lt;name&gt; &lt;email&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>RUN命令，RUN指令将在当前镜像基础上执行指定命令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN &lt;command&gt; </span><br><span class=\"line\">RUN [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cMD命令，指定启动容器时执行的命令，每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">支持三种格式：</span><br><span class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]使用exec执行，推荐方式。</span><br><span class=\"line\">CMD command param1 prarm2 在/bin/sh中执行，提供给需要交互的应用</span><br><span class=\"line\">CMD [&quot;prarm1&quot;,&quot;param2&quot;]提供给ENTRYPOINT的默认参数</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>EXPOSE命令，暴露容器端口</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;port&gt; &lt;port&gt; ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ENV命令，指定环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ADD命令，复制宿主机文件或目录到容器中，其中src可以是Dockerfile所在目录的一个相对路径(文件或目录)，也可以是一个URL，还可以是一个tar文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>COPY命令，复制本地主机的src为容器中的dest，目标路径不存在时，会自动创建</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ENTRYPOINT命令，配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class=\"line\">ENTRYPOING command param1 param2 (shell中执行)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>VOLUME命令，创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOLUME [&quot;/data&quot;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>USER命令，指定运行容器时的用户名或UID，后续的RUN也会使用指定用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER daemon</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>WORKDIR命令，为后续的RUN、CMD、ENTRYPOINT指令配置工作目录，可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ONBUILD命令，配置当所创建的镜像作为其他新创建镜像的基础镜像时，所执行的操作指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Dockerfile构建java环境镜像\"><a href=\"#Dockerfile构建java环境镜像\" class=\"headerlink\" title=\"Dockerfile构建java环境镜像\"></a>Dockerfile构建java环境镜像</h1><h2 id=\"创建Dockerfile文件\"><a href=\"#创建Dockerfile文件\" class=\"headerlink\" title=\"创建Dockerfile文件\"></a>创建Dockerfile文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/file</span><br><span class=\"line\">vi /usr/file/Dockfile #文件名必须是Dockfile</span><br><span class=\"line\">#以下是文件内容</span><br><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">RUN yum install -y wget</span><br><span class=\"line\">RUN mkdir /usr/software</span><br><span class=\"line\">RUN mkdir /usr/jdk</span><br><span class=\"line\">RUN wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; -P /usr/software http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz</span><br><span class=\"line\">RUN tar xzf /usr/software/jdk-8u171-linux-x64.tar.gz -C /usr/jdk</span><br><span class=\"line\">ENV JAVA_HOME /usr/jdk/jdk1.8.0_171</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin</span><br><span class=\"line\">EXPOSE 8080</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t=&quot;reallinxu/javaimage:v1&quot; .</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t reallinxu/javaimage:v1 /bin/bash</span><br></pre></td></tr></table></figure>\n<h1 id=\"构建noname镜像\"><a href=\"#构建noname镜像\" class=\"headerlink\" title=\"构建noname镜像\"></a>构建noname镜像</h1><p>使用本地jdk创建，首先将jdk-8u144-linux-x64.tar.gz，放到Dockerfile同一个文件夹下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Dockerfile文件</span><br><span class=\"line\">from centos</span><br><span class=\"line\">MAINTAINER reallinxu</span><br><span class=\"line\"></span><br><span class=\"line\">COPY jdk-8u144-linux-x64.tar.gz /usr/software/jdk-8u144-linux-x64.tar.gz</span><br><span class=\"line\">WORKDIR /usr/software</span><br><span class=\"line\">RUN mkdir /usr/jdk</span><br><span class=\"line\">RUN tar xzf /usr/software/jdk-8u144-linux-x64.tar.gz -C /usr/jdk</span><br><span class=\"line\">ENV JAVA_HOME /usr/jdk/jdk1.8.0_171</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t=&quot;reallinxu/noname&quot; .</span><br></pre></td></tr></table></figure></p>\n"},{"title":"a=a++引发的思考","id":"67","date":"2018-04-26T02:20:31.000Z","author":["linxu"],"_content":"# 前言 #\n\n最近越来越感觉到java基础的重要性，开始重新拾起封存已久的《Thinking in java》,偶然的一个小案例引发了此次的思考。\n\n# Demo #\n\n首先一个小的demo：\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 1;\n\t\t\tSystem.out.println(\"1:\"+ a);\n\t\t\ta++;\n\t\t\tSystem.out.println(\"2:\"+ a);\n\t\t\t++a;\n\t\t\tSystem.out.println(\"3:\"+ a);\n\t\t\ta = ++a;\n\t\t\tSystem.out.println(\"4:\"+ a);\n\t\t\ta = a++;\n\t\t\tSystem.out.println(\"5:\"+ a);\n\t\t\ta = a++ + ++a;\n\t\t\tSystem.out.println(\"6:\"+ a);\n\t\t\tint b = a++;\n\t\t\tSystem.out.println(\"7:\"+ a);\n\t\t\tSystem.out.println(\"8:\"+ b);\n\t\t}\n\t}\n\njava入门时都会遇到过的小案例，前三个答案相信都会随口而出，但是第四个才是此次探索的问题所在，上面答案如下：\n\t1:1\n\t2:2\n\t3:3\n\t4:4\n\t5:4\n\t6:10\n\t7:11\n\t8:10\n回答正确的可以绕过本篇文章，回答错误的跟笔者一起探索下去吧。\n\n# 代码分析 #\n1. a++ 和 ++a 区别不在过多赘述，a++是先执行表达式后++，++a是先++再执行表达式。\n2. a = ++a; 从上的结果可以得出a=3，此时a先++等于4，再赋值给a。此时a=4无异议。\n3. a = a++; 从上的结果可以得出a=4，此时a先被赋值为4，再执行++，此时a=5。为什么++未生效呢？这篇文章主要就是这个问题的探讨，具体原因可以参考下面对jVM的分析。\n4. a = a++ + a++; 从上的结果可以得出a=4，运算时第一个a仍为4，然后经过a++为5，又因为++a先执行++，此时a=6，所以结果4+6=10。\n5. b = a++; 从上的结果可以得出a=10，此时b先被a赋值为10,a再执行++为11。对比上面的第三点，此时++也生效，什么原因？见JVM分析。\n\n# JVM分析 #\n\n上述Demo可以通过java自带的javap查看字节码文件，命令如下：\n\tjavac Test.java\n\tjavap -c Test.class\n觉得分不清的可以分别对语句进行查看字节码文件，以下是笔者的探索过程。\n1. a++和++a的字节码分析(两个字节码基本相同)：\n\t   0: iconst_1\t\t\t\t\t1压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(1)存入局部变量1(a)\n       2: iinc          1, 1\t\t  变量1自加（a++或++a操作，自加后变量1的值为2）  \n\n2. a=++a的字节码分析：\n\t   0: iconst_3\t\t\t\t\t3压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(3)存入局部变量1(a)\n       2: iinc          1, 1\t\t  变量1自加（++a操作，自加后变量1的值为4）\n       5: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为4）\n       6: istore_1\t\t\t\t\t将栈顶值（4）存入变量1（=操作）\n\t\t\t\t\n3. a=a++的字节码分析：\n       0: iconst_4\t\t\t\t\t4压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(4)存入局部变量1(a)\n       2: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为4）\n       3: iinc          1, 1\t\t  变量1自加（a++操作，自加后变量1的值为5）\n       6: istore_1\t\t\t\t\t将栈顶值（4）存入变量1（=操作）  \n\n4. b=a++的字节码分析：\n       0: bipush        10\t\t\t10压入栈顶\n       2: istore_1\t\t\t\t\t栈顶值(10)存入局部变量1(a)\n       3: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为10）\n       4: iinc          1, 1\t\t  变量1自加（a++操作，自加后变量1的值为11）\n       7: istore_2\t\t\t\t\t栈顶值(10)存入局部变量2(b)（=操作）\n        \n从3可以看出a=a++,a++操作后并没有压入栈，返回a的值为栈顶值4，所以a从5又被赋值为4。对于1,2本质上只是对变量操作，并没有计算的赋值逻辑，对于4，变量b被赋值栈顶值为10，变量a自加后为11。以上为思考全过程，如果不足请指正。\n\n\n\n\n\n","source":"_posts/java a=a++引发的思考.md","raw":"---\ntitle: \"a=a++引发的思考\"\ntags:\n  - java基础\nid: 67\ncategories:\n  - Java\ndate: 2018-04-26 10:20:31\nauthor: \n  - linxu\n---\n# 前言 #\n\n最近越来越感觉到java基础的重要性，开始重新拾起封存已久的《Thinking in java》,偶然的一个小案例引发了此次的思考。\n\n# Demo #\n\n首先一个小的demo：\n\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\tint a = 1;\n\t\t\tSystem.out.println(\"1:\"+ a);\n\t\t\ta++;\n\t\t\tSystem.out.println(\"2:\"+ a);\n\t\t\t++a;\n\t\t\tSystem.out.println(\"3:\"+ a);\n\t\t\ta = ++a;\n\t\t\tSystem.out.println(\"4:\"+ a);\n\t\t\ta = a++;\n\t\t\tSystem.out.println(\"5:\"+ a);\n\t\t\ta = a++ + ++a;\n\t\t\tSystem.out.println(\"6:\"+ a);\n\t\t\tint b = a++;\n\t\t\tSystem.out.println(\"7:\"+ a);\n\t\t\tSystem.out.println(\"8:\"+ b);\n\t\t}\n\t}\n\njava入门时都会遇到过的小案例，前三个答案相信都会随口而出，但是第四个才是此次探索的问题所在，上面答案如下：\n\t1:1\n\t2:2\n\t3:3\n\t4:4\n\t5:4\n\t6:10\n\t7:11\n\t8:10\n回答正确的可以绕过本篇文章，回答错误的跟笔者一起探索下去吧。\n\n# 代码分析 #\n1. a++ 和 ++a 区别不在过多赘述，a++是先执行表达式后++，++a是先++再执行表达式。\n2. a = ++a; 从上的结果可以得出a=3，此时a先++等于4，再赋值给a。此时a=4无异议。\n3. a = a++; 从上的结果可以得出a=4，此时a先被赋值为4，再执行++，此时a=5。为什么++未生效呢？这篇文章主要就是这个问题的探讨，具体原因可以参考下面对jVM的分析。\n4. a = a++ + a++; 从上的结果可以得出a=4，运算时第一个a仍为4，然后经过a++为5，又因为++a先执行++，此时a=6，所以结果4+6=10。\n5. b = a++; 从上的结果可以得出a=10，此时b先被a赋值为10,a再执行++为11。对比上面的第三点，此时++也生效，什么原因？见JVM分析。\n\n# JVM分析 #\n\n上述Demo可以通过java自带的javap查看字节码文件，命令如下：\n\tjavac Test.java\n\tjavap -c Test.class\n觉得分不清的可以分别对语句进行查看字节码文件，以下是笔者的探索过程。\n1. a++和++a的字节码分析(两个字节码基本相同)：\n\t   0: iconst_1\t\t\t\t\t1压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(1)存入局部变量1(a)\n       2: iinc          1, 1\t\t  变量1自加（a++或++a操作，自加后变量1的值为2）  \n\n2. a=++a的字节码分析：\n\t   0: iconst_3\t\t\t\t\t3压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(3)存入局部变量1(a)\n       2: iinc          1, 1\t\t  变量1自加（++a操作，自加后变量1的值为4）\n       5: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为4）\n       6: istore_1\t\t\t\t\t将栈顶值（4）存入变量1（=操作）\n\t\t\t\t\n3. a=a++的字节码分析：\n       0: iconst_4\t\t\t\t\t4压入栈顶\n       1: istore_1\t\t\t\t\t栈顶值(4)存入局部变量1(a)\n       2: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为4）\n       3: iinc          1, 1\t\t  变量1自加（a++操作，自加后变量1的值为5）\n       6: istore_1\t\t\t\t\t将栈顶值（4）存入变量1（=操作）  \n\n4. b=a++的字节码分析：\n       0: bipush        10\t\t\t10压入栈顶\n       2: istore_1\t\t\t\t\t栈顶值(10)存入局部变量1(a)\n       3: iload_1\t\t\t\t\t 变量1的值压入栈顶（值为10）\n       4: iinc          1, 1\t\t  变量1自加（a++操作，自加后变量1的值为11）\n       7: istore_2\t\t\t\t\t栈顶值(10)存入局部变量2(b)（=操作）\n        \n从3可以看出a=a++,a++操作后并没有压入栈，返回a的值为栈顶值4，所以a从5又被赋值为4。对于1,2本质上只是对变量操作，并没有计算的赋值逻辑，对于4，变量b被赋值栈顶值为10，变量a自加后为11。以上为思考全过程，如果不足请指正。\n\n\n\n\n\n","slug":"java a=a++引发的思考","published":1,"updated":"2018-09-04T03:34:09.261Z","_id":"cjj41661m001f4ggppnqbeu8m","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近越来越感觉到java基础的重要性，开始重新拾起封存已久的《Thinking in java》,偶然的一个小案例引发了此次的思考。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>首先一个小的demo：</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(&quot;1:&quot;+ a);\n        a++;\n        System.out.println(&quot;2:&quot;+ a);\n        ++a;\n        System.out.println(&quot;3:&quot;+ a);\n        a = ++a;\n        System.out.println(&quot;4:&quot;+ a);\n        a = a++;\n        System.out.println(&quot;5:&quot;+ a);\n        a = a++ + ++a;\n        System.out.println(&quot;6:&quot;+ a);\n        int b = a++;\n        System.out.println(&quot;7:&quot;+ a);\n        System.out.println(&quot;8:&quot;+ b);\n    }\n}\n</code></pre><p>java入门时都会遇到过的小案例，前三个答案相信都会随口而出，但是第四个才是此次探索的问题所在，上面答案如下：<br>    1:1<br>    2:2<br>    3:3<br>    4:4<br>    5:4<br>    6:10<br>    7:11<br>    8:10<br>回答正确的可以绕过本篇文章，回答错误的跟笔者一起探索下去吧。</p>\n<h1 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h1><ol>\n<li>a++ 和 ++a 区别不在过多赘述，a++是先执行表达式后++，++a是先++再执行表达式。</li>\n<li>a = ++a; 从上的结果可以得出a=3，此时a先++等于4，再赋值给a。此时a=4无异议。</li>\n<li>a = a++; 从上的结果可以得出a=4，此时a先被赋值为4，再执行++，此时a=5。为什么++未生效呢？这篇文章主要就是这个问题的探讨，具体原因可以参考下面对jVM的分析。</li>\n<li>a = a++ + a++; 从上的结果可以得出a=4，运算时第一个a仍为4，然后经过a++为5，又因为++a先执行++，此时a=6，所以结果4+6=10。</li>\n<li>b = a++; 从上的结果可以得出a=10，此时b先被a赋值为10,a再执行++为11。对比上面的第三点，此时++也生效，什么原因？见JVM分析。</li>\n</ol>\n<h1 id=\"JVM分析\"><a href=\"#JVM分析\" class=\"headerlink\" title=\"JVM分析\"></a>JVM分析</h1><p>上述Demo可以通过java自带的javap查看字节码文件，命令如下：<br>    javac Test.java<br>    javap -c Test.class<br>觉得分不清的可以分别对语句进行查看字节码文件，以下是笔者的探索过程。</p>\n<ol>\n<li><p>a++和++a的字节码分析(两个字节码基本相同)：</p>\n<pre><code>0: iconst_1                    1压入栈顶\n1: istore_1                    栈顶值(1)存入局部变量1(a)\n2: iinc          1, 1          变量1自加（a++或++a操作，自加后变量1的值为2）  \n</code></pre></li>\n<li><p>a=++a的字节码分析：</p>\n<pre><code>0: iconst_3                    3压入栈顶\n1: istore_1                    栈顶值(3)存入局部变量1(a)\n2: iinc          1, 1          变量1自加（++a操作，自加后变量1的值为4）\n5: iload_1                     变量1的值压入栈顶（值为4）\n6: istore_1                    将栈顶值（4）存入变量1（=操作）\n</code></pre></li>\n<li><p>a=a++的字节码分析：</p>\n<pre><code>0: iconst_4                    4压入栈顶\n1: istore_1                    栈顶值(4)存入局部变量1(a)\n2: iload_1                     变量1的值压入栈顶（值为4）\n3: iinc          1, 1          变量1自加（a++操作，自加后变量1的值为5）\n6: istore_1                    将栈顶值（4）存入变量1（=操作）  \n</code></pre></li>\n<li><p>b=a++的字节码分析：</p>\n<pre><code>0: bipush        10            10压入栈顶\n2: istore_1                    栈顶值(10)存入局部变量1(a)\n3: iload_1                     变量1的值压入栈顶（值为10）\n4: iinc          1, 1          变量1自加（a++操作，自加后变量1的值为11）\n7: istore_2                    栈顶值(10)存入局部变量2(b)（=操作）\n</code></pre></li>\n</ol>\n<p>从3可以看出a=a++,a++操作后并没有压入栈，返回a的值为栈顶值4，所以a从5又被赋值为4。对于1,2本质上只是对变量操作，并没有计算的赋值逻辑，对于4，变量b被赋值栈顶值为10，变量a自加后为11。以上为思考全过程，如果不足请指正。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近越来越感觉到java基础的重要性，开始重新拾起封存已久的《Thinking in java》,偶然的一个小案例引发了此次的思考。</p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>首先一个小的demo：</p>\n<pre><code>public class Test {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(&quot;1:&quot;+ a);\n        a++;\n        System.out.println(&quot;2:&quot;+ a);\n        ++a;\n        System.out.println(&quot;3:&quot;+ a);\n        a = ++a;\n        System.out.println(&quot;4:&quot;+ a);\n        a = a++;\n        System.out.println(&quot;5:&quot;+ a);\n        a = a++ + ++a;\n        System.out.println(&quot;6:&quot;+ a);\n        int b = a++;\n        System.out.println(&quot;7:&quot;+ a);\n        System.out.println(&quot;8:&quot;+ b);\n    }\n}\n</code></pre><p>java入门时都会遇到过的小案例，前三个答案相信都会随口而出，但是第四个才是此次探索的问题所在，上面答案如下：<br>    1:1<br>    2:2<br>    3:3<br>    4:4<br>    5:4<br>    6:10<br>    7:11<br>    8:10<br>回答正确的可以绕过本篇文章，回答错误的跟笔者一起探索下去吧。</p>\n<h1 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h1><ol>\n<li>a++ 和 ++a 区别不在过多赘述，a++是先执行表达式后++，++a是先++再执行表达式。</li>\n<li>a = ++a; 从上的结果可以得出a=3，此时a先++等于4，再赋值给a。此时a=4无异议。</li>\n<li>a = a++; 从上的结果可以得出a=4，此时a先被赋值为4，再执行++，此时a=5。为什么++未生效呢？这篇文章主要就是这个问题的探讨，具体原因可以参考下面对jVM的分析。</li>\n<li>a = a++ + a++; 从上的结果可以得出a=4，运算时第一个a仍为4，然后经过a++为5，又因为++a先执行++，此时a=6，所以结果4+6=10。</li>\n<li>b = a++; 从上的结果可以得出a=10，此时b先被a赋值为10,a再执行++为11。对比上面的第三点，此时++也生效，什么原因？见JVM分析。</li>\n</ol>\n<h1 id=\"JVM分析\"><a href=\"#JVM分析\" class=\"headerlink\" title=\"JVM分析\"></a>JVM分析</h1><p>上述Demo可以通过java自带的javap查看字节码文件，命令如下：<br>    javac Test.java<br>    javap -c Test.class<br>觉得分不清的可以分别对语句进行查看字节码文件，以下是笔者的探索过程。</p>\n<ol>\n<li><p>a++和++a的字节码分析(两个字节码基本相同)：</p>\n<pre><code>0: iconst_1                    1压入栈顶\n1: istore_1                    栈顶值(1)存入局部变量1(a)\n2: iinc          1, 1          变量1自加（a++或++a操作，自加后变量1的值为2）  \n</code></pre></li>\n<li><p>a=++a的字节码分析：</p>\n<pre><code>0: iconst_3                    3压入栈顶\n1: istore_1                    栈顶值(3)存入局部变量1(a)\n2: iinc          1, 1          变量1自加（++a操作，自加后变量1的值为4）\n5: iload_1                     变量1的值压入栈顶（值为4）\n6: istore_1                    将栈顶值（4）存入变量1（=操作）\n</code></pre></li>\n<li><p>a=a++的字节码分析：</p>\n<pre><code>0: iconst_4                    4压入栈顶\n1: istore_1                    栈顶值(4)存入局部变量1(a)\n2: iload_1                     变量1的值压入栈顶（值为4）\n3: iinc          1, 1          变量1自加（a++操作，自加后变量1的值为5）\n6: istore_1                    将栈顶值（4）存入变量1（=操作）  \n</code></pre></li>\n<li><p>b=a++的字节码分析：</p>\n<pre><code>0: bipush        10            10压入栈顶\n2: istore_1                    栈顶值(10)存入局部变量1(a)\n3: iload_1                     变量1的值压入栈顶（值为10）\n4: iinc          1, 1          变量1自加（a++操作，自加后变量1的值为11）\n7: istore_2                    栈顶值(10)存入局部变量2(b)（=操作）\n</code></pre></li>\n</ol>\n<p>从3可以看出a=a++,a++操作后并没有压入栈，返回a的值为栈顶值4，所以a从5又被赋值为4。对于1,2本质上只是对变量操作，并没有计算的赋值逻辑，对于4，变量b被赋值栈顶值为10，变量a自加后为11。以上为思考全过程，如果不足请指正。</p>\n"},{"title":"lombok","id":"520","date":"2018-09-04T02:20:31.000Z","author":["linxu"],"_content":"# 前言 #\n“发明起源于懒”，当你在java开发中需要不停地重复编写set，get，tostring方法时，当你觉得这些代码很浪费时间，影响美观时，lombok你需要了解一下。\n\n# 简介 #\nlombok可以通过简单注解实现bean的set，get，tostring等方法，不再需要额外编写。\nlombok常用注解如下：  \n\n+ @Data 注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、 hashCode、toString 方法\n+ @Setter ：注解在属性上；为属性提供 setting 方法\n+ @Setter ：注解在属性上；为属性提供 getting 方法\n+ @Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象\n+ @NoArgsConstructor ：注解在类上；为类提供一个无参的构造方法\n+ @AllArgsConstructor ：注解在类上；为类提供一个全参的构造方法\n+ @Cleanup : 可以关闭流\n+ @Builder ： 被注解的类加个构造者模式\n+ @Synchronized ： 加个同步锁\n+ @SneakyThrows : 等同于try/catch 捕获异常\n+ @NonNull : 如果给参数加个这个注解 参数为null会抛出空指针异常\n+ @Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。\n\n# IDE使用lombok #\n## eclipse ##\n1. 下载lombok，[click](https://projectlombok.org/download)\n2. 双击lombok.jar直接安装，如果安装不了，将lombok放入到eclipse安装目录，编辑eclipse.ini，在最后一行加上 -javaagent:lombok.jar，重启eclipse。\n3. 添加maven配置：  \n  \n``` java\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.16.10</version>\n\t</dependency>\n```\n\n## idea ##\n1. 安装lombok插件，File-->Settings-->plugins-->Browse Repositories，搜索lombok plugin，选择install，重启idea。\n2. 如果上面下载不了，或者太慢，且本地有shadowsocks翻墙支持，可以在当前窗口进入HTTP Proxy Settings，选择Manual proxy configuration，设置如图：\n\t![Http Proxy](/imgs/lombokhttpproxy.JPG)\n3. 添加maven配置：  \n \n``` java\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.16.10</version>\n\t</dependency>\n```\n\n","source":"_posts/lombok.md","raw":"---\ntitle: \"lombok\"\ntags:\n  - lombok\nid: 520\ncategories:\n  - Lombok\ndate: 2018-09-04 10:20:31\nauthor: \n  - linxu\n---\n# 前言 #\n“发明起源于懒”，当你在java开发中需要不停地重复编写set，get，tostring方法时，当你觉得这些代码很浪费时间，影响美观时，lombok你需要了解一下。\n\n# 简介 #\nlombok可以通过简单注解实现bean的set，get，tostring等方法，不再需要额外编写。\nlombok常用注解如下：  \n\n+ @Data 注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、 hashCode、toString 方法\n+ @Setter ：注解在属性上；为属性提供 setting 方法\n+ @Setter ：注解在属性上；为属性提供 getting 方法\n+ @Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象\n+ @NoArgsConstructor ：注解在类上；为类提供一个无参的构造方法\n+ @AllArgsConstructor ：注解在类上；为类提供一个全参的构造方法\n+ @Cleanup : 可以关闭流\n+ @Builder ： 被注解的类加个构造者模式\n+ @Synchronized ： 加个同步锁\n+ @SneakyThrows : 等同于try/catch 捕获异常\n+ @NonNull : 如果给参数加个这个注解 参数为null会抛出空指针异常\n+ @Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。\n\n# IDE使用lombok #\n## eclipse ##\n1. 下载lombok，[click](https://projectlombok.org/download)\n2. 双击lombok.jar直接安装，如果安装不了，将lombok放入到eclipse安装目录，编辑eclipse.ini，在最后一行加上 -javaagent:lombok.jar，重启eclipse。\n3. 添加maven配置：  \n  \n``` java\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.16.10</version>\n\t</dependency>\n```\n\n## idea ##\n1. 安装lombok插件，File-->Settings-->plugins-->Browse Repositories，搜索lombok plugin，选择install，重启idea。\n2. 如果上面下载不了，或者太慢，且本地有shadowsocks翻墙支持，可以在当前窗口进入HTTP Proxy Settings，选择Manual proxy configuration，设置如图：\n\t![Http Proxy](/imgs/lombokhttpproxy.JPG)\n3. 添加maven配置：  \n \n``` java\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.16.10</version>\n\t</dependency>\n```\n\n","slug":"lombok","published":1,"updated":"2018-09-04T03:36:36.091Z","_id":"cjln37s1q00009ggprtirluiq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>“发明起源于懒”，当你在java开发中需要不停地重复编写set，get，tostring方法时，当你觉得这些代码很浪费时间，影响美观时，lombok你需要了解一下。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>lombok可以通过简单注解实现bean的set，get，tostring等方法，不再需要额外编写。<br>lombok常用注解如下：  </p>\n<ul>\n<li>@Data 注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、 hashCode、toString 方法</li>\n<li>@Setter ：注解在属性上；为属性提供 setting 方法</li>\n<li>@Setter ：注解在属性上；为属性提供 getting 方法</li>\n<li>@Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</li>\n<li>@NoArgsConstructor ：注解在类上；为类提供一个无参的构造方法</li>\n<li>@AllArgsConstructor ：注解在类上；为类提供一个全参的构造方法</li>\n<li>@Cleanup : 可以关闭流</li>\n<li>@Builder ： 被注解的类加个构造者模式</li>\n<li>@Synchronized ： 加个同步锁</li>\n<li>@SneakyThrows : 等同于try/catch 捕获异常</li>\n<li>@NonNull : 如果给参数加个这个注解 参数为null会抛出空指针异常</li>\n<li>@Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。</li>\n</ul>\n<h1 id=\"IDE使用lombok\"><a href=\"#IDE使用lombok\" class=\"headerlink\" title=\"IDE使用lombok\"></a>IDE使用lombok</h1><h2 id=\"eclipse\"><a href=\"#eclipse\" class=\"headerlink\" title=\"eclipse\"></a>eclipse</h2><ol>\n<li>下载lombok，<a href=\"https://projectlombok.org/download\" target=\"_blank\" rel=\"noopener\">click</a></li>\n<li>双击lombok.jar直接安装，如果安装不了，将lombok放入到eclipse安装目录，编辑eclipse.ini，在最后一行加上 -javaagent:lombok.jar，重启eclipse。</li>\n<li>添加maven配置：  </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><ol>\n<li>安装lombok插件，File–&gt;Settings–&gt;plugins–&gt;Browse Repositories，搜索lombok plugin，选择install，重启idea。</li>\n<li>如果上面下载不了，或者太慢，且本地有shadowsocks翻墙支持，可以在当前窗口进入HTTP Proxy Settings，选择Manual proxy configuration，设置如图：<br> <img src=\"/imgs/lombokhttpproxy.JPG\" alt=\"Http Proxy\"></li>\n<li>添加maven配置：  </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>“发明起源于懒”，当你在java开发中需要不停地重复编写set，get，tostring方法时，当你觉得这些代码很浪费时间，影响美观时，lombok你需要了解一下。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>lombok可以通过简单注解实现bean的set，get，tostring等方法，不再需要额外编写。<br>lombok常用注解如下：  </p>\n<ul>\n<li>@Data 注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、 hashCode、toString 方法</li>\n<li>@Setter ：注解在属性上；为属性提供 setting 方法</li>\n<li>@Setter ：注解在属性上；为属性提供 getting 方法</li>\n<li>@Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</li>\n<li>@NoArgsConstructor ：注解在类上；为类提供一个无参的构造方法</li>\n<li>@AllArgsConstructor ：注解在类上；为类提供一个全参的构造方法</li>\n<li>@Cleanup : 可以关闭流</li>\n<li>@Builder ： 被注解的类加个构造者模式</li>\n<li>@Synchronized ： 加个同步锁</li>\n<li>@SneakyThrows : 等同于try/catch 捕获异常</li>\n<li>@NonNull : 如果给参数加个这个注解 参数为null会抛出空指针异常</li>\n<li>@Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。</li>\n</ul>\n<h1 id=\"IDE使用lombok\"><a href=\"#IDE使用lombok\" class=\"headerlink\" title=\"IDE使用lombok\"></a>IDE使用lombok</h1><h2 id=\"eclipse\"><a href=\"#eclipse\" class=\"headerlink\" title=\"eclipse\"></a>eclipse</h2><ol>\n<li>下载lombok，<a href=\"https://projectlombok.org/download\" target=\"_blank\" rel=\"noopener\">click</a></li>\n<li>双击lombok.jar直接安装，如果安装不了，将lombok放入到eclipse安装目录，编辑eclipse.ini，在最后一行加上 -javaagent:lombok.jar，重启eclipse。</li>\n<li>添加maven配置：  </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"idea\"><a href=\"#idea\" class=\"headerlink\" title=\"idea\"></a>idea</h2><ol>\n<li>安装lombok插件，File–&gt;Settings–&gt;plugins–&gt;Browse Repositories，搜索lombok plugin，选择install，重启idea。</li>\n<li>如果上面下载不了，或者太慢，且本地有shadowsocks翻墙支持，可以在当前窗口进入HTTP Proxy Settings，选择Manual proxy configuration，设置如图：<br> <img src=\"/imgs/lombokhttpproxy.JPG\" alt=\"Http Proxy\"></li>\n<li>添加maven配置：  </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.16.10&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":" java8初识","id":"156","date":"2018-03-13T01:19:22.000Z","_content":"\n1. 接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)\n\n2. 一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)\n\n3. Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)\n\n4. 我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)\n\n5. lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)\n\n6. lambda表达式可以访问全部变量。(test3)\n\n7. 当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)\n\n8. 当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)\n\n9. 数据流基础操作。(test5)\n\n10. 数据流衔接操作只在终止操作调用时被执行。(test6)\n\n11. 衔接操作是垂直进行的，数据流执行顺序研究.(test6)\n\n12. Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)\n\n13. 要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)\n\n14. Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)\n\n15. executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)\n\nPS:括号内为测试代码，代码地址：https://github.com/reallinxu/java8Test","source":"_posts/java8.md","raw":"---\ntitle: \" java8初识\"\nid: 156\ncategories:\n  - Java\ndate: 2018-03-13 09:19:22\ntags: java\n---\n\n1. 接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)\n\n2. 一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)\n\n3. Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)\n\n4. 我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)\n\n5. lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)\n\n6. lambda表达式可以访问全部变量。(test3)\n\n7. 当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)\n\n8. 当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)\n\n9. 数据流基础操作。(test5)\n\n10. 数据流衔接操作只在终止操作调用时被执行。(test6)\n\n11. 衔接操作是垂直进行的，数据流执行顺序研究.(test6)\n\n12. Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)\n\n13. 要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)\n\n14. Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)\n\n15. executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)\n\nPS:括号内为测试代码，代码地址：https://github.com/reallinxu/java8Test","slug":"java8","published":1,"updated":"2018-09-04T03:34:22.701Z","_id":"cjln59vcv000388gpn2ubgrnj","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)</p>\n</li>\n<li><p>一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)</p>\n</li>\n<li><p>Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)</p>\n</li>\n<li><p>我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)</p>\n</li>\n<li><p>lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)</p>\n</li>\n<li><p>lambda表达式可以访问全部变量。(test3)</p>\n</li>\n<li><p>当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)</p>\n</li>\n<li><p>当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)</p>\n</li>\n<li><p>数据流基础操作。(test5)</p>\n</li>\n<li><p>数据流衔接操作只在终止操作调用时被执行。(test6)</p>\n</li>\n<li><p>衔接操作是垂直进行的，数据流执行顺序研究.(test6)</p>\n</li>\n<li><p>Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)</p>\n</li>\n<li><p>要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)</p>\n</li>\n<li><p>Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)</p>\n</li>\n<li><p>executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)</p>\n</li>\n</ol>\n<p>PS:括号内为测试代码，代码地址：<a href=\"https://github.com/reallinxu/java8Test\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/java8Test</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>接口里允许使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。默认方法可以直接使用。默认方法无法在lambda表达式内部被访问。(test1)</p>\n</li>\n<li><p>一个所谓的函数式接口必须要有且仅有一个抽象方法声明。每个与之对应的lambda表达式必须要与抽象方法的声明相匹配。由于默认方法不是抽象的，因此你可以在你的函数式接口里任意添加默认方法。(test1)</p>\n</li>\n<li><p>Java8允许你通过::关键字获取方法或者构造函数的的引用。(test1)</p>\n</li>\n<li><p>我们通过Person::new来创建一个Person类构造函数的引用。Java编译器会自动地选择合适的构造函数来匹配PersonFactory.create函数的签名，并选择正确的构造函数形式。(test2)</p>\n</li>\n<li><p>lambda表达式可以访问外部的final局部变量，变量并不需要一定是final，然而，在编译的时候被隐式地当做final变量来处理。(test2,test3)</p>\n</li>\n<li><p>lambda表达式可以访问全部变量。(test3)</p>\n</li>\n<li><p>当一个函数不修改数据流的底层数据源，它就是无干扰的。即没有任何lambda表达式通过添加或删除修改元素。(test4)</p>\n</li>\n<li><p>当一个函数的操作的执行是确定性的，它就是无状态的。即在上面的例子中，没有任何lambda表达式依赖于外部作用域中任何在操作过程中可变的变量或状态。(test4)</p>\n</li>\n<li><p>数据流基础操作。(test5)</p>\n</li>\n<li><p>数据流衔接操作只在终止操作调用时被执行。(test6)</p>\n</li>\n<li><p>衔接操作是垂直进行的，数据流执行顺序研究.(test6)</p>\n</li>\n<li><p>Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了.(test7)</p>\n</li>\n<li><p>要克服第10点这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作。(test7)</p>\n</li>\n<li><p>Executors类提供了便利的工厂方法来创建不同类型的 executor services。Executors必须显式的停止。(test8)</p>\n</li>\n<li><p>executor 可以返回一个Future类型的结果，它可以用来在稍后某个时间取出实际的结果。(test9)</p>\n</li>\n</ol>\n<p>PS:括号内为测试代码，代码地址：<a href=\"https://github.com/reallinxu/java8Test\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/java8Test</a></p>\n"},{"title":" 微信小程序初探","id":"66","date":"2017-12-22T02:20:31.000Z","_content":"\n>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。\n\n# 前言：#\n<font size ='4' >距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  \n\n\n# 初探：#\n\n\n1.小程序的组成主要由以下四种类型文件：  \n\n  .js　　　JavaScrip文件  \n  .json　　项目配置文件，负责窗口颜色等等  \n  .wxss　　类似HTML文件  \n  .wxml　　类似CSS文件\n\n2.小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：\n\n   app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。  \n   app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。  \n   app.wxss　　不必须有这个文件，可以定义全局的css样式。  \n   app.wxml　　不必须有这个文件，并不是首页界面。  \n  \n3.小程序的基本函数如下：  \n\nApp函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  \n    \n属性|描述|触发时机  \n:-| :- | :-   \nonLaunch|生命周期函数--监听小程序初始化|当小程序初始化完成时，会触发 onLaunch（全局只触发一次）  \nonShow|生命周期函数--监听小程序显示|当小程序启动，或从后台进入前台显示，会触发 onShow  \nonHide|Function|生命周期函数--监听小程序隐藏\t当小程序从前台进入后台，会触发 onHide  \nonError|Function|错误监听函数\t当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息  \n其他||开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问 \n<br/>   \n\nPage函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。   \n  \n    \n属性 | 类型 | 描述 \n:- | :- | :-  \ndata | Object | 页面的初始数据 \nonLoad | Function | 生命周期函数--监听页面加载 \nonReady | Function | 生命周期函数--监听页面初次渲染完成 \nonShow | Function | 生命周期函数--监听页面显示 \nonHide | Function | 生命周期函数--监听页面隐藏 \nonUnload | Function | 生命周期函数--监听页面卸载 \nonPullDownRefresh | Function | 页面相关事件处理函数--监听用户下拉动作 \nonReachBottom | Function | 页面上拉触底事件的处理函数 \nonShareAppMessage | Function | 用户点击右上角转发 \nonPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问   \n<br/>\n\n4.更多小程序API请参考官方文档。  \n   [点击传送门](https://developers.weixin.qq.com/miniprogram/dev/api/)  \n\n# 实践：#\n\n通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。\n\n[数字爆炸小程序代码github地址](https://github.com/reallinxu/NumBomb.git)\n\n要点笔记：\n\n1.js文件中page中方法data为初始化数据，可以在wxml文件中通过{{demo}}来获取，也可在js定义的方法中通过setData进行修改。\n\n2.传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。  \ngetNumJson: function (e){  \n　var numjson = e.currentTarget.dataset.id;  \n}\n\n3.多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。\n\n4.页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。   \nwx.redirectTo({  \n　　url: '../boom/boom'  \n})\n当页面在tabbar时，用此方法不会跳转，应使用：  \nwx.switchTab({   \n　　url: '../index/index'   \n}) \n\n5.图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 \n\n6.隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden='true'，通过使用class='{{demo}}'在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。\n\n7.普通方法中修改变量使用:  \nbaseInput: function (e) {  \n   　　this.setData({  \n 　　　　baseNum: e.detail.value  \n   　　})  \n}   \nwx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。\n","source":"_posts/wechat.md","raw":"---\ntitle: \" 微信小程序初探\"\ntags:\n  - 微信，小程序\nid: 66\ncategories:\n  - WeChat小程序\ndate: 2017-12-22 10:20:31\n---\n\n>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。\n\n# 前言：#\n<font size ='4' >距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  \n\n\n# 初探：#\n\n\n1.小程序的组成主要由以下四种类型文件：  \n\n  .js　　　JavaScrip文件  \n  .json　　项目配置文件，负责窗口颜色等等  \n  .wxss　　类似HTML文件  \n  .wxml　　类似CSS文件\n\n2.小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：\n\n   app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。  \n   app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。  \n   app.wxss　　不必须有这个文件，可以定义全局的css样式。  \n   app.wxml　　不必须有这个文件，并不是首页界面。  \n  \n3.小程序的基本函数如下：  \n\nApp函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  \n    \n属性|描述|触发时机  \n:-| :- | :-   \nonLaunch|生命周期函数--监听小程序初始化|当小程序初始化完成时，会触发 onLaunch（全局只触发一次）  \nonShow|生命周期函数--监听小程序显示|当小程序启动，或从后台进入前台显示，会触发 onShow  \nonHide|Function|生命周期函数--监听小程序隐藏\t当小程序从前台进入后台，会触发 onHide  \nonError|Function|错误监听函数\t当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息  \n其他||开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问 \n<br/>   \n\nPage函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。   \n  \n    \n属性 | 类型 | 描述 \n:- | :- | :-  \ndata | Object | 页面的初始数据 \nonLoad | Function | 生命周期函数--监听页面加载 \nonReady | Function | 生命周期函数--监听页面初次渲染完成 \nonShow | Function | 生命周期函数--监听页面显示 \nonHide | Function | 生命周期函数--监听页面隐藏 \nonUnload | Function | 生命周期函数--监听页面卸载 \nonPullDownRefresh | Function | 页面相关事件处理函数--监听用户下拉动作 \nonReachBottom | Function | 页面上拉触底事件的处理函数 \nonShareAppMessage | Function | 用户点击右上角转发 \nonPageScroll | Function | 页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问   \n<br/>\n\n4.更多小程序API请参考官方文档。  \n   [点击传送门](https://developers.weixin.qq.com/miniprogram/dev/api/)  \n\n# 实践：#\n\n通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。\n\n[数字爆炸小程序代码github地址](https://github.com/reallinxu/NumBomb.git)\n\n要点笔记：\n\n1.js文件中page中方法data为初始化数据，可以在wxml文件中通过{{demo}}来获取，也可在js定义的方法中通过setData进行修改。\n\n2.传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。  \ngetNumJson: function (e){  \n　var numjson = e.currentTarget.dataset.id;  \n}\n\n3.多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。\n\n4.页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。   \nwx.redirectTo({  \n　　url: '../boom/boom'  \n})\n当页面在tabbar时，用此方法不会跳转，应使用：  \nwx.switchTab({   \n　　url: '../index/index'   \n}) \n\n5.图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 \n\n6.隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden='true'，通过使用class='{{demo}}'在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。\n\n7.普通方法中修改变量使用:  \nbaseInput: function (e) {  \n   　　this.setData({  \n 　　　　baseNum: e.detail.value  \n   　　})  \n}   \nwx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。\n","slug":"wechat","published":1,"updated":"2018-05-10T02:15:51.065Z","_id":"cjln5a7io000688gpe1trofa3","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。</p>\n</blockquote>\n<h1 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h1><font size=\"4\">距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  \n\n\n<h1 id=\"初探：\"><a href=\"#初探：\" class=\"headerlink\" title=\"初探：\"></a>初探：</h1><p>1.小程序的组成主要由以下四种类型文件：  </p>\n<p>  .js　　　JavaScrip文件<br>  .json　　项目配置文件，负责窗口颜色等等<br>  .wxss　　类似HTML文件<br>  .wxml　　类似CSS文件</p>\n<p>2.小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：</p>\n<p>   app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。<br>   app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。<br>   app.wxss　　不必须有这个文件，可以定义全局的css样式。<br>   app.wxml　　不必须有这个文件，并不是首页界面。  </p>\n<p>3.小程序的基本函数如下：  </p>\n<p>App函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">触发时机  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">onLaunch</td>\n<td style=\"text-align:left\">生命周期函数–监听小程序初始化</td>\n<td style=\"text-align:left\">当小程序初始化完成时，会触发 onLaunch（全局只触发一次）  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onShow</td>\n<td style=\"text-align:left\">生命周期函数–监听小程序显示</td>\n<td style=\"text-align:left\">当小程序启动，或从后台进入前台显示，会触发 onShow  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onHide</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听小程序隐藏    当小程序从前台进入后台，会触发 onHide  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onError</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">错误监听函数    当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">其他</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问 </td>\n</tr>\n</tbody>\n</table>\n<p><br>   </p>\n<p>Page函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。   </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">描述 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">Object</td>\n<td style=\"text-align:left\">页面的初始数据 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onLoad</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面加载 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onReady</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面初次渲染完成 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onShow</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面显示 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onHide</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面隐藏 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onUnload</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面卸载 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onPullDownRefresh</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">页面相关事件处理函数–监听用户下拉动作 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onReachBottom</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">页面上拉触底事件的处理函数 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onShareAppMessage</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">用户点击右上角转发 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onPageScroll</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问   </td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>4.更多小程序API请参考官方文档。<br>   <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">点击传送门</a>  </p>\n<h1 id=\"实践：\"><a href=\"#实践：\" class=\"headerlink\" title=\"实践：\"></a>实践：</h1><p>通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。</p>\n<p><a href=\"https://github.com/reallinxu/NumBomb.git\" target=\"_blank\" rel=\"noopener\">数字爆炸小程序代码github地址</a></p>\n<p>要点笔记：</p>\n<p>1.js文件中page中方法data为初始化数据，可以在wxml文件中通过来获取，也可在js定义的方法中通过setData进行修改。</p>\n<p>2.传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。<br>getNumJson: function (e){<br>　var numjson = e.currentTarget.dataset.id;<br>}</p>\n<p>3.多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。</p>\n<p>4.页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。<br>wx.redirectTo({<br>　　url: ‘../boom/boom’<br>})<br>当页面在tabbar时，用此方法不会跳转，应使用：<br>wx.switchTab({<br>　　url: ‘../index/index’<br>}) </p>\n<p>5.图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 </p>\n<p>6.隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden=’true’，通过使用class=’‘在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。</p>\n<p>7.普通方法中修改变量使用:<br>baseInput: function (e) {<br>   　　this.setData({<br> 　　　　baseNum: e.detail.value<br>   　　})<br>}<br>wx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。</p>\n</blockquote>\n<h1 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h1><font size=\"4\">距离微信小程序发布已经过去很长一段时间了，怀着只求一知半解的心态来初探一下小程序，并利用小程序API做出一个小玩意儿，俯身亲耳以请各位大牛提出不足之处。这段时间对于小程序的学习是挺囫囵吞枣的，只是对小程序有着一些初步的了解，下面是对学习过程的一些梳理总结。</font>  \n\n\n<h1 id=\"初探：\"><a href=\"#初探：\" class=\"headerlink\" title=\"初探：\"></a>初探：</h1><p>1.小程序的组成主要由以下四种类型文件：  </p>\n<p>  .js　　　JavaScrip文件<br>  .json　　项目配置文件，负责窗口颜色等等<br>  .wxss　　类似HTML文件<br>  .wxml　　类似CSS文件</p>\n<p>2.小程序根目录下用app来命名的上述四种类型文件，就是程序入口文件，四个文件对应介绍如下：</p>\n<p>   app.json　　必须要有这个文件，配置文件入口。所有的页面都需要添加在此文件的pages中，第一条记录为 进入的首页。此文件还可以设置窗口的颜色，底部导航菜单等。<br>   app.js　　　必须要有这个文件，可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量等。<br>   app.wxss　　不必须有这个文件，可以定义全局的css样式。<br>   app.wxml　　不必须有这个文件，并不是首页界面。  </p>\n<p>3.小程序的基本函数如下：  </p>\n<p>App函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">触发时机  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">onLaunch</td>\n<td style=\"text-align:left\">生命周期函数–监听小程序初始化</td>\n<td style=\"text-align:left\">当小程序初始化完成时，会触发 onLaunch（全局只触发一次）  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onShow</td>\n<td style=\"text-align:left\">生命周期函数–监听小程序显示</td>\n<td style=\"text-align:left\">当小程序启动，或从后台进入前台显示，会触发 onShow  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onHide</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听小程序隐藏    当小程序从前台进入后台，会触发 onHide  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onError</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">错误监听函数    当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">其他</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问 </td>\n</tr>\n</tbody>\n</table>\n<p><br>   </p>\n<p>Page函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。   </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">描述 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:left\">Object</td>\n<td style=\"text-align:left\">页面的初始数据 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onLoad</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面加载 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onReady</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面初次渲染完成 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onShow</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面显示 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onHide</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面隐藏 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onUnload</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">生命周期函数–监听页面卸载 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onPullDownRefresh</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">页面相关事件处理函数–监听用户下拉动作 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onReachBottom</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">页面上拉触底事件的处理函数 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onShareAppMessage</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">用户点击右上角转发 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">onPageScroll</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">页面滚动触发事件的处理函数，其他Any开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问   </td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>4.更多小程序API请参考官方文档。<br>   <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener\">点击传送门</a>  </p>\n<h1 id=\"实践：\"><a href=\"#实践：\" class=\"headerlink\" title=\"实践：\"></a>实践：</h1><p>通过实现一个数字爆炸小游戏加深了解，也是对初探小程序的一个完美终结。功能实现有单机版和联网版，单机版只能本地使用，联网版需要后台部分通过简单的spring-boot搭建。</p>\n<p><a href=\"https://github.com/reallinxu/NumBomb.git\" target=\"_blank\" rel=\"noopener\">数字爆炸小程序代码github地址</a></p>\n<p>要点笔记：</p>\n<p>1.js文件中page中方法data为初始化数据，可以在wxml文件中通过来获取，也可在js定义的方法中通过setData进行修改。</p>\n<p>2.传值，可以通过在wxml中使用data-id传值，在方法中可以获取date-id的值。<br>getNumJson: function (e){<br>　var numjson = e.currentTarget.dataset.id;<br>}</p>\n<p>3.多参传值可以利用json进行传输，方法接收json字符串后通过JSON.parse转换成含有参数的对象。</p>\n<p>4.页面跳转，js中使用下面方法进行跳转，此方法会销毁原page。<br>wx.redirectTo({<br>　　url: ‘../boom/boom’<br>})<br>当页面在tabbar时，用此方法不会跳转，应使用：<br>wx.switchTab({<br>　　url: ‘../index/index’<br>}) </p>\n<p>5.图片作为页面背景时，background-image 只能用网络url或者base64，图片的base64可以通过网页在线转换。 </p>\n<p>6.隐藏标签布局可以使css样式中 display: none或者在标签中设置 hidden=’true’，通过使用class=’‘在js中设置demo值来指定对应的css，这样可以在function中通过修改demo值来改变成不同的css。</p>\n<p>7.普通方法中修改变量使用:<br>baseInput: function (e) {<br>   　　this.setData({<br> 　　　　baseNum: e.detail.value<br>   　　})<br>}<br>wx.request请求中直接使用this已经是wx.request的this了，所以此时需要在wx.request中使用，则需要在wx.request外部定义 var that = this; 在wx.request中再使用that代替this即可。</p>\n"},{"title":" Dubbo+Zookeeper+Spring-boot+dubbo-simple 搭建入门","id":"80","date":"2018-01-23T08:16:32.000Z","_content":"\n# 安装Zookeeper #\n\t[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n\t[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n\t[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n\t[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n\t[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n\t[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n\t[root@linxu conf]# vi zoo.cfg \n\t修改配置对应项\n\tdataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\n\tdataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n\t[root@linxu conf]# vi /etc/profile\n\t末尾添加\n\texport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\n\texport PATH=$ZOOKEEPER_HOME/bin:$PATH\n\texport PATH\n\t[root@linxu conf]# source /etc/profile #使生效\n\t[root@linxu conf]# zkServer.sh start   #启动\n\t[root@linxu conf]# zkServer.sh status  #查看状态\n\t[root@linxu conf]# zkServer.sh stop    #停止\n\t[root@linxu conf]# zkServer.sh restart #重启\n\n\n# 部署dubbo-admin #\n\n从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)\n\ndubbo地址：https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问http://localhost:8080/dubbo-admin-2.5.8/\n\n# 代码实现 #\n本地使用spring-boot创建提供者（provider）和消费者(consume) \n\n代码：https://github.com/reallinxu/spring-boot-dubbo\n\n分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。\n\nPS：provider和consume的接口位置必须一致\n\n# 搭建dubbo-simple监控 #\n\n从github上下载dubbox源码，编译dubbo-monitor-simple\n\ndubbox地址：https://github.com/reallinxu/dubbox\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器  \n\n\t[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n\t[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n\t修改dubbo.properties\n\tdubbo.container=log4j,spring,registry,jetty\n\tdubbo.application.name=simple-monitor\n\tdubbo.application.owner=\n\t#dubbo.registry.address=multicast://224.5.6.7:1234\n\tdubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n\t#dubbo.registry.address=redis://127.0.0.1:6379\n\t#dubbo.registry.address=dubbo://127.0.0.1:9090\n\tdubbo.protocol.port=7070\n\tdubbo.jetty.port=7072  #jetty端口，避免冲突\n\tdubbo.jetty.directory=${user.home}/monitor\n\tdubbo.charts.directory=${dubbo.jetty.directory}/charts\n\tdubbo.statistics.directory=${user.home}/monitor/statistics\n\tdubbo.log4j.file=logs/dubbo-monitor-simple.log\n\tdubbo.log4j.level=WARN</pre>\n\t启动dubbo-simple\n\t[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n\t[root@linxu bin]# sh start.sh\n启动成功后登陆访问http://192.168.43.163:7072 (端口为jetty端口)\n\n如果查看不到监控提供者\n\ncom.alibaba.dubbo.monitor.MonitorService\n\n请核对dubbo.properties zookeeper地址和端口是否正确\n","source":"_posts/dubbo.md","raw":"---\ntitle: \" Dubbo+Zookeeper+Spring-boot+dubbo-simple 搭建入门\"\nid: 80\ncategories:\n  - Dubbo\ndate: 2018-01-23 16:16:32\ntags:\n---\n\n# 安装Zookeeper #\n\t[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n\t[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n\t[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n\t[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n\t[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n\t[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n\t[root@linxu conf]# vi zoo.cfg \n\t修改配置对应项\n\tdataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\n\tdataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n\t[root@linxu conf]# vi /etc/profile\n\t末尾添加\n\texport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\n\texport PATH=$ZOOKEEPER_HOME/bin:$PATH\n\texport PATH\n\t[root@linxu conf]# source /etc/profile #使生效\n\t[root@linxu conf]# zkServer.sh start   #启动\n\t[root@linxu conf]# zkServer.sh status  #查看状态\n\t[root@linxu conf]# zkServer.sh stop    #停止\n\t[root@linxu conf]# zkServer.sh restart #重启\n\n\n# 部署dubbo-admin #\n\n从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)\n\ndubbo地址：https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问http://localhost:8080/dubbo-admin-2.5.8/\n\n# 代码实现 #\n本地使用spring-boot创建提供者（provider）和消费者(consume) \n\n代码：https://github.com/reallinxu/spring-boot-dubbo\n\n分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。\n\nPS：provider和consume的接口位置必须一致\n\n# 搭建dubbo-simple监控 #\n\n从github上下载dubbox源码，编译dubbo-monitor-simple\n\ndubbox地址：https://github.com/reallinxu/dubbox\n\n编译：mvn package -Dmaven.test.skip=true\n\n编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器  \n\n\t[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n\t[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n\t修改dubbo.properties\n\tdubbo.container=log4j,spring,registry,jetty\n\tdubbo.application.name=simple-monitor\n\tdubbo.application.owner=\n\t#dubbo.registry.address=multicast://224.5.6.7:1234\n\tdubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n\t#dubbo.registry.address=redis://127.0.0.1:6379\n\t#dubbo.registry.address=dubbo://127.0.0.1:9090\n\tdubbo.protocol.port=7070\n\tdubbo.jetty.port=7072  #jetty端口，避免冲突\n\tdubbo.jetty.directory=${user.home}/monitor\n\tdubbo.charts.directory=${dubbo.jetty.directory}/charts\n\tdubbo.statistics.directory=${user.home}/monitor/statistics\n\tdubbo.log4j.file=logs/dubbo-monitor-simple.log\n\tdubbo.log4j.level=WARN</pre>\n\t启动dubbo-simple\n\t[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n\t[root@linxu bin]# sh start.sh\n启动成功后登陆访问http://192.168.43.163:7072 (端口为jetty端口)\n\n如果查看不到监控提供者\n\ncom.alibaba.dubbo.monitor.MonitorService\n\n请核对dubbo.properties zookeeper地址和端口是否正确\n","slug":"dubbo","published":1,"updated":"2018-05-10T02:19:49.760Z","_id":"cjln5ccb8000988gp1fdf56wa","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"安装Zookeeper\"><a href=\"#安装Zookeeper\" class=\"headerlink\" title=\"安装Zookeeper\"></a>安装Zookeeper</h1><pre><code>[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n[root@linxu conf]# vi zoo.cfg \n修改配置对应项\ndataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\ndataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n[root@linxu conf]# vi /etc/profile\n末尾添加\nexport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\nexport PATH=$ZOOKEEPER_HOME/bin:$PATH\nexport PATH\n[root@linxu conf]# source /etc/profile #使生效\n[root@linxu conf]# zkServer.sh start   #启动\n[root@linxu conf]# zkServer.sh status  #查看状态\n[root@linxu conf]# zkServer.sh stop    #停止\n[root@linxu conf]# zkServer.sh restart #重启\n</code></pre><h1 id=\"部署dubbo-admin\"><a href=\"#部署dubbo-admin\" class=\"headerlink\" title=\"部署dubbo-admin\"></a>部署dubbo-admin</h1><p>从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)</p>\n<p>dubbo地址：<a href=\"https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/dubbo/tree/dubbo-2.5.8</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问<a href=\"http://localhost:8080/dubbo-admin-2.5.8/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/dubbo-admin-2.5.8/</a></p>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><p>本地使用spring-boot创建提供者（provider）和消费者(consume) </p>\n<p>代码：<a href=\"https://github.com/reallinxu/spring-boot-dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/spring-boot-dubbo</a></p>\n<p>分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。</p>\n<p>PS：provider和consume的接口位置必须一致</p>\n<h1 id=\"搭建dubbo-simple监控\"><a href=\"#搭建dubbo-simple监控\" class=\"headerlink\" title=\"搭建dubbo-simple监控\"></a>搭建dubbo-simple监控</h1><p>从github上下载dubbox源码，编译dubbo-monitor-simple</p>\n<p>dubbox地址：<a href=\"https://github.com/reallinxu/dubbox\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/dubbox</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器  </p>\n<pre><code>[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n修改dubbo.properties\ndubbo.container=log4j,spring,registry,jetty\ndubbo.application.name=simple-monitor\ndubbo.application.owner=\n#dubbo.registry.address=multicast://224.5.6.7:1234\ndubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n#dubbo.registry.address=redis://127.0.0.1:6379\n#dubbo.registry.address=dubbo://127.0.0.1:9090\ndubbo.protocol.port=7070\ndubbo.jetty.port=7072  #jetty端口，避免冲突\ndubbo.jetty.directory=${user.home}/monitor\ndubbo.charts.directory=${dubbo.jetty.directory}/charts\ndubbo.statistics.directory=${user.home}/monitor/statistics\ndubbo.log4j.file=logs/dubbo-monitor-simple.log\ndubbo.log4j.level=WARN&lt;/pre&gt;\n启动dubbo-simple\n[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n[root@linxu bin]# sh start.sh\n</code></pre><p>启动成功后登陆访问<a href=\"http://192.168.43.163:7072\" target=\"_blank\" rel=\"noopener\">http://192.168.43.163:7072</a> (端口为jetty端口)</p>\n<p>如果查看不到监控提供者</p>\n<p>com.alibaba.dubbo.monitor.MonitorService</p>\n<p>请核对dubbo.properties zookeeper地址和端口是否正确</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装Zookeeper\"><a href=\"#安装Zookeeper\" class=\"headerlink\" title=\"安装Zookeeper\"></a>安装Zookeeper</h1><pre><code>[root@linxu ~]#  wget http://mirrors.shu.edu.cn/apache/zookeeper/zookeeper-3.5.3-beta/zookeeper-3.5.3-beta.tar.gz\n[root@linxu ~]#  tar -zxvf zookeeper-3.5.3-beta.tar.gz  #此时可能会报错使用 \n[root@linxu ~]#  tar -xvf zookeeper-3.5.3-beta.tar.gz \n[root@linxu ~]#  mv zookeeper-3.5.3-beta /usr/local/zookeeper #没有目录请先mkdir\n[root@linxu ~]#  cd /usr/local/zookeeper/zookeeper-3.5.3-beta/conf\n[root@linxu conf]# cp zoo_sample.cfg zoo.cfg\n[root@linxu conf]# vi zoo.cfg \n修改配置对应项\ndataDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/data\ndataLogDir=/usr/local/zookeeper/zookeeper-3.5.3-beta/logs\n[root@linxu conf]# vi /etc/profile\n末尾添加\nexport ZOOKEEPER_HOME=/usr/local/zookeeper/zookeeper-3.5.3-beta/\nexport PATH=$ZOOKEEPER_HOME/bin:$PATH\nexport PATH\n[root@linxu conf]# source /etc/profile #使生效\n[root@linxu conf]# zkServer.sh start   #启动\n[root@linxu conf]# zkServer.sh status  #查看状态\n[root@linxu conf]# zkServer.sh stop    #停止\n[root@linxu conf]# zkServer.sh restart #重启\n</code></pre><h1 id=\"部署dubbo-admin\"><a href=\"#部署dubbo-admin\" class=\"headerlink\" title=\"部署dubbo-admin\"></a>部署dubbo-admin</h1><p>从github上下载dubbo源码，编译dubbo-admin(最新版已没有dubbo-admin，下载历史版本)</p>\n<p>dubbo地址：<a href=\"https://github.com/alibaba/dubbo/tree/dubbo-2.5.8\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/dubbo/tree/dubbo-2.5.8</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将target目录下的war包放到tomcat下webapps中，启动tomcat即可访问<a href=\"http://localhost:8080/dubbo-admin-2.5.8/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/dubbo-admin-2.5.8/</a></p>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><p>本地使用spring-boot创建提供者（provider）和消费者(consume) </p>\n<p>代码：<a href=\"https://github.com/reallinxu/spring-boot-dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/spring-boot-dubbo</a></p>\n<p>分别启动provider和consume，查看dubbo主页，可以看到提供者和消费者。</p>\n<p>PS：provider和consume的接口位置必须一致</p>\n<h1 id=\"搭建dubbo-simple监控\"><a href=\"#搭建dubbo-simple监控\" class=\"headerlink\" title=\"搭建dubbo-simple监控\"></a>搭建dubbo-simple监控</h1><p>从github上下载dubbox源码，编译dubbo-monitor-simple</p>\n<p>dubbox地址：<a href=\"https://github.com/reallinxu/dubbox\" target=\"_blank\" rel=\"noopener\">https://github.com/reallinxu/dubbox</a></p>\n<p>编译：mvn package -Dmaven.test.skip=true</p>\n<p>编译成功后将dubbo-monitor-simple-2.8.4-assembly.tar.gz放入服务器  </p>\n<pre><code>[root@linxu dubbo-simple]# tar -zxvf dubbo-monitor-simple-2.8.4-assembly.tar.gz\n[root@linxu bin]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/conf\n修改dubbo.properties\ndubbo.container=log4j,spring,registry,jetty\ndubbo.application.name=simple-monitor\ndubbo.application.owner=\n#dubbo.registry.address=multicast://224.5.6.7:1234\ndubbo.registry.address=zookeeper://192.168.43.163:2181 #Zookeeper地址\n#dubbo.registry.address=redis://127.0.0.1:6379\n#dubbo.registry.address=dubbo://127.0.0.1:9090\ndubbo.protocol.port=7070\ndubbo.jetty.port=7072  #jetty端口，避免冲突\ndubbo.jetty.directory=${user.home}/monitor\ndubbo.charts.directory=${dubbo.jetty.directory}/charts\ndubbo.statistics.directory=${user.home}/monitor/statistics\ndubbo.log4j.file=logs/dubbo-monitor-simple.log\ndubbo.log4j.level=WARN&lt;/pre&gt;\n启动dubbo-simple\n[root@linxu ~]# cd /usr/local/dubbo-simple/dubbo-monitor-simple-2.8.4/bin\n[root@linxu bin]# sh start.sh\n</code></pre><p>启动成功后登陆访问<a href=\"http://192.168.43.163:7072\" target=\"_blank\" rel=\"noopener\">http://192.168.43.163:7072</a> (端口为jetty端口)</p>\n<p>如果查看不到监控提供者</p>\n<p>com.alibaba.dubbo.monitor.MonitorService</p>\n<p>请核对dubbo.properties zookeeper地址和端口是否正确</p>\n"},{"title":" centos服务器安装mysql","id":"75","date":"2018-01-12T08:14:23.000Z","_content":"\n# 安装mysql #\n\t[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n\t[root@localhost ~]yum install mysql #安装客户端\n\t[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n\t[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n\t[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n\t[root@localhost ~]yum install mysql-community-server #安装server\n\t[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装</pre>\n# 添加权限 #\n服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限  \n\n\t[root@localhost ~]grant all on *.* to test@'%' identified by '123456';  \n\t*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n\t%，表示所有ip\n\tgrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’\n# 删除权限 #\n\t[root@localhost ~]grant all on *.* to test@'%' identified by '123456';   \n\t*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n\t%，表示所有ip\n\trevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址</pre>\n","source":"_posts/centos-mysql.md","raw":"---\ntitle: \" centos服务器安装mysql\"\nid: 75\ncategories:\n  - CentOS\ndate: 2018-01-12 16:14:23\ntags:\n---\n\n# 安装mysql #\n\t[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n\t[root@localhost ~]yum install mysql #安装客户端\n\t[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n\t[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n\t[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n\t[root@localhost ~]yum install mysql-community-server #安装server\n\t[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装</pre>\n# 添加权限 #\n服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限  \n\n\t[root@localhost ~]grant all on *.* to test@'%' identified by '123456';  \n\t*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n\t%，表示所有ip\n\tgrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’\n# 删除权限 #\n\t[root@localhost ~]grant all on *.* to test@'%' identified by '123456';   \n\t*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n\t%，表示所有ip\n\trevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址</pre>\n","slug":"centos-mysql","published":1,"updated":"2018-05-10T02:21:49.515Z","_id":"cjln5cvzh000b88gp1l4yx29l","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h1><pre><code>[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n[root@localhost ~]yum install mysql #安装客户端\n[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]yum install mysql-community-server #安装server\n[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装&lt;/pre&gt;\n</code></pre><h1 id=\"添加权限\"><a href=\"#添加权限\" class=\"headerlink\" title=\"添加权限\"></a>添加权限</h1><p>服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限  </p>\n<pre><code>[root@localhost ~]grant all on *.* to test@&apos;%&apos; identified by &apos;123456&apos;;  \n*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n%，表示所有ip\ngrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’\n</code></pre><h1 id=\"删除权限\"><a href=\"#删除权限\" class=\"headerlink\" title=\"删除权限\"></a>删除权限</h1><pre><code>[root@localhost ~]grant all on *.* to test@&apos;%&apos; identified by &apos;123456&apos;;   \n*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n%，表示所有ip\nrevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址&lt;/pre&gt;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h1><pre><code>[root@localhost ~]rpm -qa | grep mysql #搜索指定rpm包是否安装。\n[root@localhost ~]yum install mysql #安装客户端\n[root@localhost ~]yum install mysql-server #安装服务端(此时安装失败，需要下载)\n[root@localhost ~]wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]rpm -ivh mysql-community-release-el7-5.noarch.rpm\n[root@localhost ~]yum install mysql-community-server #安装server\n[root@localhost ~]yum install mysql-devel #服务端安装好后，需要安装 ，包含了所需要的库和文件，如果需要编译其他Mysql客户程序，必须要安装&lt;/pre&gt;\n</code></pre><h1 id=\"添加权限\"><a href=\"#添加权限\" class=\"headerlink\" title=\"添加权限\"></a>添加权限</h1><p>服务器安装完成后，通过本机DbVisualizer连接时会连接不上，此时需要赋予权限  </p>\n<pre><code>[root@localhost ~]grant all on *.* to test@&apos;%&apos; identified by &apos;123456&apos;;  \n*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n%，表示所有ip\ngrant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘密码’\n</code></pre><h1 id=\"删除权限\"><a href=\"#删除权限\" class=\"headerlink\" title=\"删除权限\"></a>删除权限</h1><pre><code>[root@localhost ~]grant all on *.* to test@&apos;%&apos; identified by &apos;123456&apos;;   \n*.*，表示赋予用户操作服务器上所有数据库所有表的权限。 \n%，表示所有ip\nrevoke 权限1,权限2,…权限n on 数据库名称.表名称 from 用户名@用户地址&lt;/pre&gt;\n</code></pre>"},{"title":" CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群","id":"48","date":"2017-12-22T02:20:31.000Z","_content":"\n# CentOS联网设置 #  \n\t[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\n\tIntel Corporation 82545EM Gigabit Ethernet Controller (Copper)\n\tTYPE=Ethernet       #网卡类型\n\tDEVICE=eth0         #网卡接口名称\n\tONBOOT=yes          #系统启动时是否自动加载\n\tBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\n\tIPADDR=192.168.1.11      #网卡IP地址\n\tNETMASK=255.255.255.0    #网卡网络地址\n\tGATEWAY=192.168.1.1      #网卡网关地址\n\tDNS1=10.203.104.41       #网卡DNS地址\n\tHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\n\tBROADCAST=192.168.1.255  #网卡广播地址 \n\n\tPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。\n# CentOS安装jdk #\n使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装jdk。\n## 创建Java文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# mkdir java\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n## 将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下 ##\n\t[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n\t[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java\n## 设置环境变量 ##\n\t[root@localhost ~]# vi ~/.bashrc\n\t文件末尾加上以下几行：\n\texport JAVA_HOME=/usr/local/java/jdk1.8.0_144\n\texport CLASSPATH=.:${JAVA_HOME}/lib\n\texport PATH=${JAVA_HOME}/bin:$PATH\n\t使生效：\n\t[root@localhost jdk1.8.0_144]# source ~/.bashrc\n## 验证是否安装成功 ##\n\t[root@localhost jdk1.8.0_144]# java\n\t[root@localhost jdk1.8.0_144]# javac\n\t[root@localhost jdk1.8.0_144]# java -version\n# CentOS安装Nexus #\n将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装nexus。\n## 创建Nexus文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n\t[root@localhost local]# mkdir nexus\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src\n## 将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压 ##\n\t[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n\t[root@localhost ~]# cd /usr/local/nexus\n\t[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz\n## 启动nexus ##\n\t[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n\t[root@localhost bin]# ./nexus start\n\tWARNING: ************************************************************\n\tWARNING: Detected execution as \"root\" user.  This is NOT recommended!\n\tWARNING: ************************************************************\n\tStarting nexus\n\t[root@localhost bin]# ./nexus status\n\tWARNING: ************************************************************\n\tWARNING: Detected execution as \"root\" user.  This is NOT recommended!\n\tWARNING: ************************************************************\n\tnexus is running.\n## 验证是否启动成功 ##\n在浏览器中输入{ip}:8081(默认为8081端口)。此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。关闭防火墙命令如下：  \n\n\t[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n\t[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n\t[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n此时再通过浏览器进入即可。\n# CentOS安装Tomcat #\n将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装tomcat。\n## 创建Tomcat文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# mkdir tomcat\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat\n## 将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压 ##\n\t[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n\t[root@localhost ~]# cd /usr/local/tomcat/\n\t[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz \n## 启动Tomcat ##\n\t[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n\t[root@localhost bin]# ./startup.sh \n\tUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\n\tUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\n\tUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\n\tUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\n\tUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\n\tTomcat started.\n## 验证是否安装成功 ##\n用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。\n# CentOS安装RabbitMq #\n## 安装Erlang ##\n使用SecureCRT连接虚拟机，开始准备安装Erlang。  \n\n\t[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n\t[root@localhost bin]# yum install erlang\n\t安装  1 软件包 (+110 依赖软件包)\n\n\t总下载量：51 M\n\t安装大小：117 M\n\tIs this ok [y/d/N]: \n\t输入：y\n\t是否继续？[y/N]：\n\t输入: y\n\n## 安装RabbitMq ##\n将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装RabbitMq。  \n\n\t[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n\t[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n\t准备中...                          ################################# [100%]\n\t正在升级/安装...\n\t1:rabbitmq-server-3.3.5-1          ################################# [100%]\n\t[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\n\tThe following plugins have been enabled:\n\tmochiweb\n\twebmachine\n\trabbitmq_web_dispatch\n\tamqp_client\n\trabbitmq_management_agent\n\trabbitmq_management\n\tPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n\t[root@localhost ~]# chkconfig --level 3 rabbitmq-server on\n配置文件路径  \n\n\t[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n\t寻找行：PID_FILE=/var/run/rabbitmq/pid\n\t在以上内容之下，插入行\n\texport RABBITMQ_MNESIA=/rabbitmq/mnesia\n配置访问权限  \n\n\t[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins\n启动RabbitMq  \n\n\t[root@localhost ~]# service rabbitmq-server start\n\t[root@localhost ~]# rabbitmqctl add_user admin admin\n\t[root@localhost ~]# rabbitmqctl set_user_tags admin administrator\n验证RabbitMq\n\t用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\n\n## 配置RabbitMq集群 ##\n修改hosts文件  \n\n\tvi /etc/hosts\n\t将两台虚拟机的Ip配置进去：\n\t192.168.43.69 test1\n\t192.168.43.216 test2\n\t重启两台虚拟机reboot\n启动第一台虚拟机的Rabbitmq:  \n\n    service rabbitmq-server start\n    将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n    更改.erlang.cookie的访问权限为400\n    chmod 400 /var/lib/rabbitmq/.erlang.cookie\n    更改.erlang.cookie的文件所有人为rabbitmq\n    chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n    启动第二台虚拟机的Rabbitmq：\n    service rabbitmq-server start\n    rabbitmqctl stop_app\n    rabbitmqctl join_cluster rabbit@test1\n    rabbitmqctl start_app\n验证集群是否成功  \n用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\nPS：cookie文件会有两处都存在，root目录下cookie可以直接删除。如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。\n\n软件包地址：[http://download.csdn.net/download/anonymous_l/10021072](http://download.csdn.net/download/anonymous_l/10021072)","source":"_posts/centos-mq.md","raw":"---\ntitle: \" CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群\"\ntags:\n  - CentOS\nid: 48\ncategories:\n  - CentOS\ndate: 2017-12-22 10:20:31\n---\n\n# CentOS联网设置 #  \n\t[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\n\tIntel Corporation 82545EM Gigabit Ethernet Controller (Copper)\n\tTYPE=Ethernet       #网卡类型\n\tDEVICE=eth0         #网卡接口名称\n\tONBOOT=yes          #系统启动时是否自动加载\n\tBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\n\tIPADDR=192.168.1.11      #网卡IP地址\n\tNETMASK=255.255.255.0    #网卡网络地址\n\tGATEWAY=192.168.1.1      #网卡网关地址\n\tDNS1=10.203.104.41       #网卡DNS地址\n\tHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\n\tBROADCAST=192.168.1.255  #网卡广播地址 \n\n\tPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。\n# CentOS安装jdk #\n使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装jdk。\n## 创建Java文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# mkdir java\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n## 将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下 ##\n\t[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n\t[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java\n## 设置环境变量 ##\n\t[root@localhost ~]# vi ~/.bashrc\n\t文件末尾加上以下几行：\n\texport JAVA_HOME=/usr/local/java/jdk1.8.0_144\n\texport CLASSPATH=.:${JAVA_HOME}/lib\n\texport PATH=${JAVA_HOME}/bin:$PATH\n\t使生效：\n\t[root@localhost jdk1.8.0_144]# source ~/.bashrc\n## 验证是否安装成功 ##\n\t[root@localhost jdk1.8.0_144]# java\n\t[root@localhost jdk1.8.0_144]# javac\n\t[root@localhost jdk1.8.0_144]# java -version\n# CentOS安装Nexus #\n将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装nexus。\n## 创建Nexus文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n\t[root@localhost local]# mkdir nexus\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src\n## 将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压 ##\n\t[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n\t[root@localhost ~]# cd /usr/local/nexus\n\t[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz\n## 启动nexus ##\n\t[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n\t[root@localhost bin]# ./nexus start\n\tWARNING: ************************************************************\n\tWARNING: Detected execution as \"root\" user.  This is NOT recommended!\n\tWARNING: ************************************************************\n\tStarting nexus\n\t[root@localhost bin]# ./nexus status\n\tWARNING: ************************************************************\n\tWARNING: Detected execution as \"root\" user.  This is NOT recommended!\n\tWARNING: ************************************************************\n\tnexus is running.\n## 验证是否启动成功 ##\n在浏览器中输入{ip}:8081(默认为8081端口)。此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。关闭防火墙命令如下：  \n\n\t[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n\t[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n\t[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n此时再通过浏览器进入即可。\n# CentOS安装Tomcat #\n将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装tomcat。\n## 创建Tomcat文件夹 ##\n\t[root@localhost ~]# cd /usr/local\n\t[root@localhost local]# mkdir tomcat\n\t[root@localhost local]# ls\n\tbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat\n## 将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压 ##\n\t[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n\t[root@localhost ~]# cd /usr/local/tomcat/\n\t[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz \n## 启动Tomcat ##\n\t[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n\t[root@localhost bin]# ./startup.sh \n\tUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\n\tUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\n\tUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\n\tUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\n\tUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\n\tTomcat started.\n## 验证是否安装成功 ##\n用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。\n# CentOS安装RabbitMq #\n## 安装Erlang ##\n使用SecureCRT连接虚拟机，开始准备安装Erlang。  \n\n\t[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n\t[root@localhost bin]# yum install erlang\n\t安装  1 软件包 (+110 依赖软件包)\n\n\t总下载量：51 M\n\t安装大小：117 M\n\tIs this ok [y/d/N]: \n\t输入：y\n\t是否继续？[y/N]：\n\t输入: y\n\n## 安装RabbitMq ##\n将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装RabbitMq。  \n\n\t[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n\t[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n\t准备中...                          ################################# [100%]\n\t正在升级/安装...\n\t1:rabbitmq-server-3.3.5-1          ################################# [100%]\n\t[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\n\tThe following plugins have been enabled:\n\tmochiweb\n\twebmachine\n\trabbitmq_web_dispatch\n\tamqp_client\n\trabbitmq_management_agent\n\trabbitmq_management\n\tPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n\t[root@localhost ~]# chkconfig --level 3 rabbitmq-server on\n配置文件路径  \n\n\t[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n\t寻找行：PID_FILE=/var/run/rabbitmq/pid\n\t在以上内容之下，插入行\n\texport RABBITMQ_MNESIA=/rabbitmq/mnesia\n配置访问权限  \n\n\t[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins\n启动RabbitMq  \n\n\t[root@localhost ~]# service rabbitmq-server start\n\t[root@localhost ~]# rabbitmqctl add_user admin admin\n\t[root@localhost ~]# rabbitmqctl set_user_tags admin administrator\n验证RabbitMq\n\t用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\n\n## 配置RabbitMq集群 ##\n修改hosts文件  \n\n\tvi /etc/hosts\n\t将两台虚拟机的Ip配置进去：\n\t192.168.43.69 test1\n\t192.168.43.216 test2\n\t重启两台虚拟机reboot\n启动第一台虚拟机的Rabbitmq:  \n\n    service rabbitmq-server start\n    将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n    更改.erlang.cookie的访问权限为400\n    chmod 400 /var/lib/rabbitmq/.erlang.cookie\n    更改.erlang.cookie的文件所有人为rabbitmq\n    chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n    启动第二台虚拟机的Rabbitmq：\n    service rabbitmq-server start\n    rabbitmqctl stop_app\n    rabbitmqctl join_cluster rabbit@test1\n    rabbitmqctl start_app\n验证集群是否成功  \n用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)\nPS：cookie文件会有两处都存在，root目录下cookie可以直接删除。如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。\n\n软件包地址：[http://download.csdn.net/download/anonymous_l/10021072](http://download.csdn.net/download/anonymous_l/10021072)","slug":"centos-mq","published":1,"updated":"2018-09-04T03:21:18.126Z","_id":"cjln5dydj000d88gpd5juwk4u","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CentOS联网设置\"><a href=\"#CentOS联网设置\" class=\"headerlink\" title=\"CentOS联网设置\"></a>CentOS联网设置</h1><pre><code>[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\nIntel Corporation 82545EM Gigabit Ethernet Controller (Copper)\nTYPE=Ethernet       #网卡类型\nDEVICE=eth0         #网卡接口名称\nONBOOT=yes          #系统启动时是否自动加载\nBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\nIPADDR=192.168.1.11      #网卡IP地址\nNETMASK=255.255.255.0    #网卡网络地址\nGATEWAY=192.168.1.1      #网卡网关地址\nDNS1=10.203.104.41       #网卡DNS地址\nHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\nBROADCAST=192.168.1.255  #网卡广播地址 \n\nPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。\n</code></pre><h1 id=\"CentOS安装jdk\"><a href=\"#CentOS安装jdk\" class=\"headerlink\" title=\"CentOS安装jdk\"></a>CentOS安装jdk</h1><p>使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装jdk。</p>\n<h2 id=\"创建Java文件夹\"><a href=\"#创建Java文件夹\" class=\"headerlink\" title=\"创建Java文件夹\"></a>创建Java文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir java\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n</code></pre><h2 id=\"将jdk-8u144-linux-x64-tar-gz解压，再移到java文件夹下\"><a href=\"#将jdk-8u144-linux-x64-tar-gz解压，再移到java文件夹下\" class=\"headerlink\" title=\"将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下\"></a>将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下</h2><pre><code>[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java\n</code></pre><h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><pre><code>[root@localhost ~]# vi ~/.bashrc\n文件末尾加上以下几行：\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_144\nexport CLASSPATH=.:${JAVA_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n使生效：\n[root@localhost jdk1.8.0_144]# source ~/.bashrc\n</code></pre><h2 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><pre><code>[root@localhost jdk1.8.0_144]# java\n[root@localhost jdk1.8.0_144]# javac\n[root@localhost jdk1.8.0_144]# java -version\n</code></pre><h1 id=\"CentOS安装Nexus\"><a href=\"#CentOS安装Nexus\" class=\"headerlink\" title=\"CentOS安装Nexus\"></a>CentOS安装Nexus</h1><p>将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装nexus。</p>\n<h2 id=\"创建Nexus文件夹\"><a href=\"#创建Nexus文件夹\" class=\"headerlink\" title=\"创建Nexus文件夹\"></a>创建Nexus文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n[root@localhost local]# mkdir nexus\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src\n</code></pre><h2 id=\"将nexus-3-5-2-01-unix-tar-gz移到nexus文件夹下再解压\"><a href=\"#将nexus-3-5-2-01-unix-tar-gz移到nexus文件夹下再解压\" class=\"headerlink\" title=\"将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压\"></a>将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压</h2><pre><code>[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n[root@localhost ~]# cd /usr/local/nexus\n[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz\n</code></pre><h2 id=\"启动nexus\"><a href=\"#启动nexus\" class=\"headerlink\" title=\"启动nexus\"></a>启动nexus</h2><pre><code>[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n[root@localhost bin]# ./nexus start\nWARNING: ************************************************************\nWARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!\nWARNING: ************************************************************\nStarting nexus\n[root@localhost bin]# ./nexus status\nWARNING: ************************************************************\nWARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!\nWARNING: ************************************************************\nnexus is running.\n</code></pre><h2 id=\"验证是否启动成功\"><a href=\"#验证是否启动成功\" class=\"headerlink\" title=\"验证是否启动成功\"></a>验证是否启动成功</h2><p>在浏览器中输入{ip}:8081(默认为8081端口)。此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。关闭防火墙命令如下：  </p>\n<pre><code>[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n</code></pre><p>此时再通过浏览器进入即可。</p>\n<h1 id=\"CentOS安装Tomcat\"><a href=\"#CentOS安装Tomcat\" class=\"headerlink\" title=\"CentOS安装Tomcat\"></a>CentOS安装Tomcat</h1><p>将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装tomcat。</p>\n<h2 id=\"创建Tomcat文件夹\"><a href=\"#创建Tomcat文件夹\" class=\"headerlink\" title=\"创建Tomcat文件夹\"></a>创建Tomcat文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir tomcat\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat\n</code></pre><h2 id=\"将apache-tomcat-8-5-23-tar-gz移到tomcat文件夹下再解压\"><a href=\"#将apache-tomcat-8-5-23-tar-gz移到tomcat文件夹下再解压\" class=\"headerlink\" title=\"将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压\"></a>将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压</h2><pre><code>[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n[root@localhost ~]# cd /usr/local/tomcat/\n[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz \n</code></pre><h2 id=\"启动Tomcat\"><a href=\"#启动Tomcat\" class=\"headerlink\" title=\"启动Tomcat\"></a>启动Tomcat</h2><pre><code>[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n[root@localhost bin]# ./startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\nUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\nUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\nTomcat started.\n</code></pre><h2 id=\"验证是否安装成功-1\"><a href=\"#验证是否安装成功-1\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><p>用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。</p>\n<h1 id=\"CentOS安装RabbitMq\"><a href=\"#CentOS安装RabbitMq\" class=\"headerlink\" title=\"CentOS安装RabbitMq\"></a>CentOS安装RabbitMq</h1><h2 id=\"安装Erlang\"><a href=\"#安装Erlang\" class=\"headerlink\" title=\"安装Erlang\"></a>安装Erlang</h2><p>使用SecureCRT连接虚拟机，开始准备安装Erlang。  </p>\n<pre><code>[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n[root@localhost bin]# yum install erlang\n安装  1 软件包 (+110 依赖软件包)\n\n总下载量：51 M\n安装大小：117 M\nIs this ok [y/d/N]: \n输入：y\n是否继续？[y/N]：\n输入: y\n</code></pre><h2 id=\"安装RabbitMq\"><a href=\"#安装RabbitMq\" class=\"headerlink\" title=\"安装RabbitMq\"></a>安装RabbitMq</h2><p>将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装RabbitMq。  </p>\n<pre><code>[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n准备中...                          ################################# [100%]\n正在升级/安装...\n1:rabbitmq-server-3.3.5-1          ################################# [100%]\n[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\nThe following plugins have been enabled:\nmochiweb\nwebmachine\nrabbitmq_web_dispatch\namqp_client\nrabbitmq_management_agent\nrabbitmq_management\nPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n[root@localhost ~]# chkconfig --level 3 rabbitmq-server on\n</code></pre><p>配置文件路径  </p>\n<pre><code>[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n寻找行：PID_FILE=/var/run/rabbitmq/pid\n在以上内容之下，插入行\nexport RABBITMQ_MNESIA=/rabbitmq/mnesia\n</code></pre><p>配置访问权限  </p>\n<pre><code>[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins\n</code></pre><p>启动RabbitMq  </p>\n<pre><code>[root@localhost ~]# service rabbitmq-server start\n[root@localhost ~]# rabbitmqctl add_user admin admin\n[root@localhost ~]# rabbitmqctl set_user_tags admin administrator\n</code></pre><p>验证RabbitMq<br>    用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)</p>\n<h2 id=\"配置RabbitMq集群\"><a href=\"#配置RabbitMq集群\" class=\"headerlink\" title=\"配置RabbitMq集群\"></a>配置RabbitMq集群</h2><p>修改hosts文件  </p>\n<pre><code>vi /etc/hosts\n将两台虚拟机的Ip配置进去：\n192.168.43.69 test1\n192.168.43.216 test2\n重启两台虚拟机reboot\n</code></pre><p>启动第一台虚拟机的Rabbitmq:  </p>\n<pre><code>service rabbitmq-server start\n将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n更改.erlang.cookie的访问权限为400\nchmod 400 /var/lib/rabbitmq/.erlang.cookie\n更改.erlang.cookie的文件所有人为rabbitmq\nchown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n启动第二台虚拟机的Rabbitmq：\nservice rabbitmq-server start\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@test1\nrabbitmqctl start_app\n</code></pre><p>验证集群是否成功<br>用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)<br>PS：cookie文件会有两处都存在，root目录下cookie可以直接删除。如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。</p>\n<p>软件包地址：<a href=\"http://download.csdn.net/download/anonymous_l/10021072\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/download/anonymous_l/10021072</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CentOS联网设置\"><a href=\"#CentOS联网设置\" class=\"headerlink\" title=\"CentOS联网设置\"></a>CentOS联网设置</h1><pre><code>[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33\nIntel Corporation 82545EM Gigabit Ethernet Controller (Copper)\nTYPE=Ethernet       #网卡类型\nDEVICE=eth0         #网卡接口名称\nONBOOT=yes          #系统启动时是否自动加载\nBOOTPROTO=static    #启用地址协议 --static:静态协议 --bootp协议 --dhcp协议\nIPADDR=192.168.1.11      #网卡IP地址\nNETMASK=255.255.255.0    #网卡网络地址\nGATEWAY=192.168.1.1      #网卡网关地址\nDNS1=10.203.104.41       #网卡DNS地址\nHWADDR=00:0C:29:13:5D:74 #网卡设备MAC地址\nBROADCAST=192.168.1.255  #网卡广播地址 \n\nPS:该文件名ifcfg-ens33不固定，找差不多类型文件即可。联网只要设置为自动加载即可，即ONBOOT设置为yes(一般默认为no)。设置完后reboot重启，命令ifconfig查看ip。\n</code></pre><h1 id=\"CentOS安装jdk\"><a href=\"#CentOS安装jdk\" class=\"headerlink\" title=\"CentOS安装jdk\"></a>CentOS安装jdk</h1><p>使用WinSCP连接虚拟机，centOS可以直接通过FTP和SSH连接。将jdk-8u144-linux-x64.tar.gz下载好通过WinSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装jdk。</p>\n<h2 id=\"创建Java文件夹\"><a href=\"#创建Java文件夹\" class=\"headerlink\" title=\"创建Java文件夹\"></a>创建Java文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir java\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n</code></pre><h2 id=\"将jdk-8u144-linux-x64-tar-gz解压，再移到java文件夹下\"><a href=\"#将jdk-8u144-linux-x64-tar-gz解压，再移到java文件夹下\" class=\"headerlink\" title=\"将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下\"></a>将jdk-8u144-linux-x64.tar.gz解压，再移到java文件夹下</h2><pre><code>[root@localhost ~]# tar zxvf jdk-8u144-linux-x64.tar.gz\n[root@localhost ~]# mv jdk1.8.0_144 /usr/local/java\n</code></pre><h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><pre><code>[root@localhost ~]# vi ~/.bashrc\n文件末尾加上以下几行：\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_144\nexport CLASSPATH=.:${JAVA_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n使生效：\n[root@localhost jdk1.8.0_144]# source ~/.bashrc\n</code></pre><h2 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><pre><code>[root@localhost jdk1.8.0_144]# java\n[root@localhost jdk1.8.0_144]# javac\n[root@localhost jdk1.8.0_144]# java -version\n</code></pre><h1 id=\"CentOS安装Nexus\"><a href=\"#CentOS安装Nexus\" class=\"headerlink\" title=\"CentOS安装Nexus\"></a>CentOS安装Nexus</h1><p>将nexus-3.5.2-01-unix.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装nexus。</p>\n<h2 id=\"创建Nexus文件夹\"><a href=\"#创建Nexus文件夹\" class=\"headerlink\" title=\"创建Nexus文件夹\"></a>创建Nexus文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  sbin  share  src\n[root@localhost local]# mkdir nexus\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src\n</code></pre><h2 id=\"将nexus-3-5-2-01-unix-tar-gz移到nexus文件夹下再解压\"><a href=\"#将nexus-3-5-2-01-unix-tar-gz移到nexus文件夹下再解压\" class=\"headerlink\" title=\"将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压\"></a>将nexus-3.5.2-01-unix.tar.gz移到nexus文件夹下再解压</h2><pre><code>[root@localhost ~]# mv nexus-3.5.2-01-unix.tar.gz /usr/local/nexus\n[root@localhost ~]# cd /usr/local/nexus\n[root@localhost ~]# tar zxvf nexus-3.5.2-01-unix.tar.gz\n</code></pre><h2 id=\"启动nexus\"><a href=\"#启动nexus\" class=\"headerlink\" title=\"启动nexus\"></a>启动nexus</h2><pre><code>[root@localhost ~]# cd /usr/local/nexus/nexus-3.5.2-01/bin\n[root@localhost bin]# ./nexus start\nWARNING: ************************************************************\nWARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!\nWARNING: ************************************************************\nStarting nexus\n[root@localhost bin]# ./nexus status\nWARNING: ************************************************************\nWARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!\nWARNING: ************************************************************\nnexus is running.\n</code></pre><h2 id=\"验证是否启动成功\"><a href=\"#验证是否启动成功\" class=\"headerlink\" title=\"验证是否启动成功\"></a>验证是否启动成功</h2><p>在浏览器中输入{ip}:8081(默认为8081端口)。此时并不能打开，因为防火墙的原因，此处我是关闭防火墙(也可以开放相应端口解决)，为了简单直接关闭啦。关闭防火墙命令如下：  </p>\n<pre><code>[root@localhost bin]# systemctl stop firewalld.service #停止firewall(此时重启后防火墙会自动开启)\n[root@localhost bin]# systemctl disable firewalld.service #禁止firewall开机启动\n[root@localhost bin]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n</code></pre><p>此时再通过浏览器进入即可。</p>\n<h1 id=\"CentOS安装Tomcat\"><a href=\"#CentOS安装Tomcat\" class=\"headerlink\" title=\"CentOS安装Tomcat\"></a>CentOS安装Tomcat</h1><p>将apache-tomcat-8.5.23.tar.gz通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装tomcat。</p>\n<h2 id=\"创建Tomcat文件夹\"><a href=\"#创建Tomcat文件夹\" class=\"headerlink\" title=\"创建Tomcat文件夹\"></a>创建Tomcat文件夹</h2><pre><code>[root@localhost ~]# cd /usr/local\n[root@localhost local]# mkdir tomcat\n[root@localhost local]# ls\nbin  etc  games  include  java  lib  lib64  libexec  nexus  sbin  share  src  tomcat\n</code></pre><h2 id=\"将apache-tomcat-8-5-23-tar-gz移到tomcat文件夹下再解压\"><a href=\"#将apache-tomcat-8-5-23-tar-gz移到tomcat文件夹下再解压\" class=\"headerlink\" title=\"将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压\"></a>将apache-tomcat-8.5.23.tar.gz移到tomcat文件夹下再解压</h2><pre><code>[root@localhost ~]# mv apache-tomcat-8.5.23.tar.gz /usr/local/tomcat/\n[root@localhost ~]# cd /usr/local/tomcat/\n[root@localhost tomcat]# tar zxvf apache-tomcat-8.5.23.tar.gz \n</code></pre><h2 id=\"启动Tomcat\"><a href=\"#启动Tomcat\" class=\"headerlink\" title=\"启动Tomcat\"></a>启动Tomcat</h2><pre><code>[root@localhost ~]# cd /usr/local/tomcat/apache-tomcat-8.5.23/bin\n[root@localhost bin]# ./startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.23\nUsing CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.23/temp\nUsing JRE_HOME:        /usr/local/java/jdk1.8.0_144\nUsing CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.23/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.23/bin/tomcat-juli.jar\nTomcat started.\n</code></pre><h2 id=\"验证是否安装成功-1\"><a href=\"#验证是否安装成功-1\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><p>用浏览器输入{IP}:8080(默认为8080端口)。 PS：注意防火墙设置。</p>\n<h1 id=\"CentOS安装RabbitMq\"><a href=\"#CentOS安装RabbitMq\" class=\"headerlink\" title=\"CentOS安装RabbitMq\"></a>CentOS安装RabbitMq</h1><h2 id=\"安装Erlang\"><a href=\"#安装Erlang\" class=\"headerlink\" title=\"安装Erlang\"></a>安装Erlang</h2><p>使用SecureCRT连接虚拟机，开始准备安装Erlang。  </p>\n<pre><code>[root@localhost bin]# rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n[root@localhost bin]# yum install erlang\n安装  1 软件包 (+110 依赖软件包)\n\n总下载量：51 M\n安装大小：117 M\nIs this ok [y/d/N]: \n输入：y\n是否继续？[y/N]：\n输入: y\n</code></pre><h2 id=\"安装RabbitMq\"><a href=\"#安装RabbitMq\" class=\"headerlink\" title=\"安装RabbitMq\"></a>安装RabbitMq</h2><p>将rabbitmq-signing-key-public.asc、rabbitmq-server-3.3.5-1.noarch.rpm通过WInSCP放入root目录下。使用SecureCRT连接虚拟机，开始准备安装RabbitMq。  </p>\n<pre><code>[root@localhost ~]# rpm --import rabbitmq-signing-key-public.asc\n[root@localhost ~]# rpm -ivh rabbitmq-server-3.3.5-1.noarch.rpm\n准备中...                          ################################# [100%]\n正在升级/安装...\n1:rabbitmq-server-3.3.5-1          ################################# [100%]\n[root@localhost ~]# rabbitmq-plugins enable rabbitmq_management\nThe following plugins have been enabled:\nmochiweb\nwebmachine\nrabbitmq_web_dispatch\namqp_client\nrabbitmq_management_agent\nrabbitmq_management\nPlugin configuration has changed. Restart RabbitMQ for changes to take effect.\n[root@localhost ~]# chkconfig --level 3 rabbitmq-server on\n</code></pre><p>配置文件路径  </p>\n<pre><code>[root@localhost ~]# vi /etc/init.d/rabbitmq-server\n寻找行：PID_FILE=/var/run/rabbitmq/pid\n在以上内容之下，插入行\nexport RABBITMQ_MNESIA=/rabbitmq/mnesia\n</code></pre><p>配置访问权限  </p>\n<pre><code>[root@localhost ~]# chmod 644 /etc/rabbitmq/enabled_plugins\n</code></pre><p>启动RabbitMq  </p>\n<pre><code>[root@localhost ~]# service rabbitmq-server start\n[root@localhost ~]# rabbitmqctl add_user admin admin\n[root@localhost ~]# rabbitmqctl set_user_tags admin administrator\n</code></pre><p>验证RabbitMq<br>    用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)</p>\n<h2 id=\"配置RabbitMq集群\"><a href=\"#配置RabbitMq集群\" class=\"headerlink\" title=\"配置RabbitMq集群\"></a>配置RabbitMq集群</h2><p>修改hosts文件  </p>\n<pre><code>vi /etc/hosts\n将两台虚拟机的Ip配置进去：\n192.168.43.69 test1\n192.168.43.216 test2\n重启两台虚拟机reboot\n</code></pre><p>启动第一台虚拟机的Rabbitmq:  </p>\n<pre><code>service rabbitmq-server start\n将/var/lib/rabbitmq的.erlang.cookie文件拷贝到第二台虚拟机相同位置覆盖\n更改.erlang.cookie的访问权限为400\nchmod 400 /var/lib/rabbitmq/.erlang.cookie\n更改.erlang.cookie的文件所有人为rabbitmq\nchown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie\n启动第二台虚拟机的Rabbitmq：\nservice rabbitmq-server start\nrabbitmqctl stop_app\nrabbitmqctl join_cluster rabbit@test1\nrabbitmqctl start_app\n</code></pre><p>验证集群是否成功<br>用浏览器输入{Ip}:15672查看后管。(PS：注意防火墙)<br>PS：cookie文件会有两处都存在，root目录下cookie可以直接删除。如果使用虚拟机使用桥接模式，主机名hostname会自动修改成和hosts配置一致，如果使用仅主机网络等，hostname没有修改，可以使用hostnamectl set-hostname test1命令就行修改。</p>\n<p>软件包地址：<a href=\"http://download.csdn.net/download/anonymous_l/10021072\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/download/anonymous_l/10021072</a></p>\n"},{"title":"git常用命令","id":"93","date":"2018-01-23T08:28:47.000Z","_content":"# Note #\n此处为git使用过程中的一些常用命令记录汇总。\n\n## 初始化绑定github并提交 ##\n** 第一步：建立git仓库 **  \ncd到你的本地项目根目录下，执行git命令  \n\n\tgit init  \n\n** 第二步：将项目的所有文件添加到仓库中 **  \n\n\tgit add .\n\t如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n\n** 第三步：将add的文件commit到仓库 **  \n\n\tgit commit -m \"注释语句\"\n \n** 第四步：重点来了，将本地的仓库关联到github上 **  \n\n\tgit remote add origin https://github.com/reallinxu/spring-boot-dubbo\n\t后面的https链接地址换成你自己的仓库url地址  \n\n** 第五步：同步仓库代码(新初始仓库则不需要这步) **  \n\n\tgit pull origin master  \n\n** 第六步，也就是最后一步，上传代码到github远程仓库 **  \n\n\tgit push -u origin master\n\n## 更新代码到github ##\n** 第一步：查看当前的git仓库状态，可以使用git status **\n\n\tgit status\n\n** 第二步：更新全部 **\n\n\tgit add *\n\n** 第三步：接着输入git commit -m \"更新说明\" **\n\n\tgit commit -m \"更新说明\"\n\n** 第四步：先git pull,拉取当前分支最新代码 **\n\n\tgit pull\n\n** 第五步：push到远程master分支上 **\n\n\tgit push origin master\n\n## 创建本地分支，合并到master分支\n** 第一步：本地创建新分支 **\n  \n\tgit branch test  \n\n** 第二步：切换到本地分支 **  \n  \n\tgit checkout test\n\n** 第三步：改动后commit **\n  \n\tgit add .\n\tgit commit -m 'test'\n\n** 第四步：切换回master分支 **\n  \n\tgit checkout master\n\n** 第五步：merge **\n\t\n\tgit merge test\n\n** 第六步：同步master **\n\t\n\tgit pull\n\n** 第七步:解决冲突 **\n\tpull时冲突\n\tgit stash 暂存本地未提交的修改内容\n\tgit stash list 查看保存在栈中的版本信息,stash@{0}就是刚才保存的标记\n\tgit pull   合并远程代码\n\t手动修改冲突文件，重新add，commit\n\t\n\tmerge时冲突\n\tmerge后手动修改冲突文件，重新add，commit\n\n** 第八步:提交到仓库 **\n\t\n\tgit push\n","source":"_posts/git.md","raw":"---\ntitle: \"git常用命令\"\nid: 93\ncategories:\n  - Github\ndate: 2018-01-23 16:28:47\ntags:\n---\n# Note #\n此处为git使用过程中的一些常用命令记录汇总。\n\n## 初始化绑定github并提交 ##\n** 第一步：建立git仓库 **  \ncd到你的本地项目根目录下，执行git命令  \n\n\tgit init  \n\n** 第二步：将项目的所有文件添加到仓库中 **  \n\n\tgit add .\n\t如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n\n** 第三步：将add的文件commit到仓库 **  \n\n\tgit commit -m \"注释语句\"\n \n** 第四步：重点来了，将本地的仓库关联到github上 **  \n\n\tgit remote add origin https://github.com/reallinxu/spring-boot-dubbo\n\t后面的https链接地址换成你自己的仓库url地址  \n\n** 第五步：同步仓库代码(新初始仓库则不需要这步) **  \n\n\tgit pull origin master  \n\n** 第六步，也就是最后一步，上传代码到github远程仓库 **  \n\n\tgit push -u origin master\n\n## 更新代码到github ##\n** 第一步：查看当前的git仓库状态，可以使用git status **\n\n\tgit status\n\n** 第二步：更新全部 **\n\n\tgit add *\n\n** 第三步：接着输入git commit -m \"更新说明\" **\n\n\tgit commit -m \"更新说明\"\n\n** 第四步：先git pull,拉取当前分支最新代码 **\n\n\tgit pull\n\n** 第五步：push到远程master分支上 **\n\n\tgit push origin master\n\n## 创建本地分支，合并到master分支\n** 第一步：本地创建新分支 **\n  \n\tgit branch test  \n\n** 第二步：切换到本地分支 **  \n  \n\tgit checkout test\n\n** 第三步：改动后commit **\n  \n\tgit add .\n\tgit commit -m 'test'\n\n** 第四步：切换回master分支 **\n  \n\tgit checkout master\n\n** 第五步：merge **\n\t\n\tgit merge test\n\n** 第六步：同步master **\n\t\n\tgit pull\n\n** 第七步:解决冲突 **\n\tpull时冲突\n\tgit stash 暂存本地未提交的修改内容\n\tgit stash list 查看保存在栈中的版本信息,stash@{0}就是刚才保存的标记\n\tgit pull   合并远程代码\n\t手动修改冲突文件，重新add，commit\n\t\n\tmerge时冲突\n\tmerge后手动修改冲突文件，重新add，commit\n\n** 第八步:提交到仓库 **\n\t\n\tgit push\n","slug":"git","published":1,"updated":"2018-09-04T03:33:05.979Z","_id":"cjln5e5p4000g88gp05xcyxe0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><p>此处为git使用过程中的一些常用命令记录汇总。</p>\n<h2 id=\"初始化绑定github并提交\"><a href=\"#初始化绑定github并提交\" class=\"headerlink\" title=\"初始化绑定github并提交\"></a>初始化绑定github并提交</h2><p><strong> 第一步：建立git仓库 </strong><br>cd到你的本地项目根目录下，执行git命令  </p>\n<pre><code>git init  \n</code></pre><p><strong> 第二步：将项目的所有文件添加到仓库中 </strong>  </p>\n<pre><code>git add .\n如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n</code></pre><p><strong> 第三步：将add的文件commit到仓库 </strong>  </p>\n<pre><code>git commit -m &quot;注释语句&quot;\n</code></pre><p><strong> 第四步：重点来了，将本地的仓库关联到github上 </strong>  </p>\n<pre><code>git remote add origin https://github.com/reallinxu/spring-boot-dubbo\n后面的https链接地址换成你自己的仓库url地址  \n</code></pre><p><strong> 第五步：同步仓库代码(新初始仓库则不需要这步) </strong>  </p>\n<pre><code>git pull origin master  \n</code></pre><p><strong> 第六步，也就是最后一步，上传代码到github远程仓库 </strong>  </p>\n<pre><code>git push -u origin master\n</code></pre><h2 id=\"更新代码到github\"><a href=\"#更新代码到github\" class=\"headerlink\" title=\"更新代码到github\"></a>更新代码到github</h2><p><strong> 第一步：查看当前的git仓库状态，可以使用git status </strong></p>\n<pre><code>git status\n</code></pre><p><strong> 第二步：更新全部 </strong></p>\n<pre><code>git add *\n</code></pre><p><strong> 第三步：接着输入git commit -m “更新说明” </strong></p>\n<pre><code>git commit -m &quot;更新说明&quot;\n</code></pre><p><strong> 第四步：先git pull,拉取当前分支最新代码 </strong></p>\n<pre><code>git pull\n</code></pre><p><strong> 第五步：push到远程master分支上 </strong></p>\n<pre><code>git push origin master\n</code></pre><h2 id=\"创建本地分支，合并到master分支\"><a href=\"#创建本地分支，合并到master分支\" class=\"headerlink\" title=\"创建本地分支，合并到master分支\"></a>创建本地分支，合并到master分支</h2><p><strong> 第一步：本地创建新分支 </strong></p>\n<pre><code>git branch test  \n</code></pre><p><strong> 第二步：切换到本地分支 </strong>  </p>\n<pre><code>git checkout test\n</code></pre><p><strong> 第三步：改动后commit </strong></p>\n<pre><code>git add .\ngit commit -m &apos;test&apos;\n</code></pre><p><strong> 第四步：切换回master分支 </strong></p>\n<pre><code>git checkout master\n</code></pre><p><strong> 第五步：merge </strong></p>\n<pre><code>git merge test\n</code></pre><p><strong> 第六步：同步master </strong></p>\n<pre><code>git pull\n</code></pre><p><strong> 第七步:解决冲突 </strong><br>    pull时冲突<br>    git stash 暂存本地未提交的修改内容<br>    git stash list 查看保存在栈中的版本信息,stash@{0}就是刚才保存的标记<br>    git pull   合并远程代码<br>    手动修改冲突文件，重新add，commit</p>\n<pre><code>merge时冲突\nmerge后手动修改冲突文件，重新add，commit\n</code></pre><p><strong> 第八步:提交到仓库 </strong></p>\n<pre><code>git push\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><p>此处为git使用过程中的一些常用命令记录汇总。</p>\n<h2 id=\"初始化绑定github并提交\"><a href=\"#初始化绑定github并提交\" class=\"headerlink\" title=\"初始化绑定github并提交\"></a>初始化绑定github并提交</h2><p><strong> 第一步：建立git仓库 </strong><br>cd到你的本地项目根目录下，执行git命令  </p>\n<pre><code>git init  \n</code></pre><p><strong> 第二步：将项目的所有文件添加到仓库中 </strong>  </p>\n<pre><code>git add .\n如果想添加某个特定的文件，只需把.换成特定的文件名即可**\n</code></pre><p><strong> 第三步：将add的文件commit到仓库 </strong>  </p>\n<pre><code>git commit -m &quot;注释语句&quot;\n</code></pre><p><strong> 第四步：重点来了，将本地的仓库关联到github上 </strong>  </p>\n<pre><code>git remote add origin https://github.com/reallinxu/spring-boot-dubbo\n后面的https链接地址换成你自己的仓库url地址  \n</code></pre><p><strong> 第五步：同步仓库代码(新初始仓库则不需要这步) </strong>  </p>\n<pre><code>git pull origin master  \n</code></pre><p><strong> 第六步，也就是最后一步，上传代码到github远程仓库 </strong>  </p>\n<pre><code>git push -u origin master\n</code></pre><h2 id=\"更新代码到github\"><a href=\"#更新代码到github\" class=\"headerlink\" title=\"更新代码到github\"></a>更新代码到github</h2><p><strong> 第一步：查看当前的git仓库状态，可以使用git status </strong></p>\n<pre><code>git status\n</code></pre><p><strong> 第二步：更新全部 </strong></p>\n<pre><code>git add *\n</code></pre><p><strong> 第三步：接着输入git commit -m “更新说明” </strong></p>\n<pre><code>git commit -m &quot;更新说明&quot;\n</code></pre><p><strong> 第四步：先git pull,拉取当前分支最新代码 </strong></p>\n<pre><code>git pull\n</code></pre><p><strong> 第五步：push到远程master分支上 </strong></p>\n<pre><code>git push origin master\n</code></pre><h2 id=\"创建本地分支，合并到master分支\"><a href=\"#创建本地分支，合并到master分支\" class=\"headerlink\" title=\"创建本地分支，合并到master分支\"></a>创建本地分支，合并到master分支</h2><p><strong> 第一步：本地创建新分支 </strong></p>\n<pre><code>git branch test  \n</code></pre><p><strong> 第二步：切换到本地分支 </strong>  </p>\n<pre><code>git checkout test\n</code></pre><p><strong> 第三步：改动后commit </strong></p>\n<pre><code>git add .\ngit commit -m &apos;test&apos;\n</code></pre><p><strong> 第四步：切换回master分支 </strong></p>\n<pre><code>git checkout master\n</code></pre><p><strong> 第五步：merge </strong></p>\n<pre><code>git merge test\n</code></pre><p><strong> 第六步：同步master </strong></p>\n<pre><code>git pull\n</code></pre><p><strong> 第七步:解决冲突 </strong><br>    pull时冲突<br>    git stash 暂存本地未提交的修改内容<br>    git stash list 查看保存在栈中的版本信息,stash@{0}就是刚才保存的标记<br>    git pull   合并远程代码<br>    手动修改冲突文件，重新add，commit</p>\n<pre><code>merge时冲突\nmerge后手动修改冲突文件，重新add，commit\n</code></pre><p><strong> 第八步:提交到仓库 </strong></p>\n<pre><code>git push\n</code></pre>"},{"title":" Hello，World！","id":"1","date":"2017-12-18T09:28:35.000Z","_content":"\n第一次搭建，有点小激动，感谢夏某某的服务器和指导。","source":"_posts/helloworld.md","raw":"---\ntitle: \" Hello，World！\"\nid: 1\ncategories:\n  - Essay\ndate: 2017-12-18 17:28:35\ntags: Essay\n---\n\n第一次搭建，有点小激动，感谢夏某某的服务器和指导。","slug":"helloworld","published":1,"updated":"2018-09-04T03:23:08.589Z","_id":"cjln5fynf000m88gp5asw9qzx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>第一次搭建，有点小激动，感谢夏某某的服务器和指导。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一次搭建，有点小激动，感谢夏某某的服务器和指导。</p>\n"},{"title":" redis入门","id":"102","date":"2018-01-24T10:53:33.000Z","_content":"\n# 安装redis #\n\t[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n\t[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n\t[root@linxu ~]# mkdir /usr/local/redis\n\t[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n\t[root@linxu redis-4.0.6]# make\n\t[root@linxu redis]# cd src\n\t[root@linxu src]# ./redis-server  #运行 \n\t[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n# 测试redis #\n\t第一个窗口:\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n\t[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n\t第二个窗口:\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n\t[root@linxu src]# ./redis-cli\n\t127.0.0.1:6379>set test hahaah  \n\tOK\n\t127.0.0.1:6379>get test\n\t\"hahaah\"\n\n# 利用jedis测试java连接redis #\n\t//pom.xml中添加\n\t<dependency>\n    \t<groupId>redis.clients<groupId>\n    \t<artifactId>jedis<artifactId>\n    \t<version&gt;2.9.0<version>\n\t<dependency>\n测试代码：\n\tpackage com.redis.demo;\n\n\timport redis.clients.jedis.Jedis;\n\n\tpublic class TestRedis {\n    \tpublic static void main(String[] args) {\n        \t//连接本地的 Redis 服务\n        \tJedis jedis = new Jedis(\"192.168.43.163\",6379);\n        \tSystem.out.println(\"连接成功\");\n        \t//查看服务是否运行\n        \tSystem.out.println(\"服务正在运行: \"+jedis.ping());\n    \t}\n\t}\n运行时报异常：  \n\n\tException in thread \"main\" redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command 'CONFIG SET protected-mode no' from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to 'no', and then restarting the server. 3) If you started the server manually just for testing, restart it with the '--protected-mode no' option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.\n此时需要修改配置文件redis.conf，修改如下\n\t1.注释掉bind\n\t#bind 127.0.0.1\n\t2.protected-mode yes\n\t改为\n\tprotected-mode no\n\t重新启动redis即可\n","source":"_posts/redis.md","raw":"---\ntitle: \" redis入门\"\nid: 102\ncategories:\n  - Redis\ndate: 2018-01-24 18:53:33\ntags:\n---\n\n# 安装redis #\n\t[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n\t[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n\t[root@linxu ~]# mkdir /usr/local/redis\n\t[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n\t[root@linxu redis-4.0.6]# make\n\t[root@linxu redis]# cd src\n\t[root@linxu src]# ./redis-server  #运行 \n\t[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n# 测试redis #\n\t第一个窗口:\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n\t[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n\t第二个窗口:\n\t[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n\t[root@linxu src]# ./redis-cli\n\t127.0.0.1:6379>set test hahaah  \n\tOK\n\t127.0.0.1:6379>get test\n\t\"hahaah\"\n\n# 利用jedis测试java连接redis #\n\t//pom.xml中添加\n\t<dependency>\n    \t<groupId>redis.clients<groupId>\n    \t<artifactId>jedis<artifactId>\n    \t<version&gt;2.9.0<version>\n\t<dependency>\n测试代码：\n\tpackage com.redis.demo;\n\n\timport redis.clients.jedis.Jedis;\n\n\tpublic class TestRedis {\n    \tpublic static void main(String[] args) {\n        \t//连接本地的 Redis 服务\n        \tJedis jedis = new Jedis(\"192.168.43.163\",6379);\n        \tSystem.out.println(\"连接成功\");\n        \t//查看服务是否运行\n        \tSystem.out.println(\"服务正在运行: \"+jedis.ping());\n    \t}\n\t}\n运行时报异常：  \n\n\tException in thread \"main\" redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command 'CONFIG SET protected-mode no' from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to 'no', and then restarting the server. 3) If you started the server manually just for testing, restart it with the '--protected-mode no' option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.\n此时需要修改配置文件redis.conf，修改如下\n\t1.注释掉bind\n\t#bind 127.0.0.1\n\t2.protected-mode yes\n\t改为\n\tprotected-mode no\n\t重新启动redis即可\n","slug":"redis","published":1,"updated":"2018-09-04T03:24:36.491Z","_id":"cjln5hgng000r88gpjiiqvjs8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h1><pre><code>[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n[root@linxu ~]# mkdir /usr/local/redis\n[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n[root@linxu redis-4.0.6]# make\n[root@linxu redis]# cd src\n[root@linxu src]# ./redis-server  #运行 \n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n</code></pre><h1 id=\"测试redis\"><a href=\"#测试redis\" class=\"headerlink\" title=\"测试redis\"></a>测试redis</h1><pre><code>第一个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n第二个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-cli\n127.0.0.1:6379&gt;set test hahaah  \nOK\n127.0.0.1:6379&gt;get test\n&quot;hahaah&quot;\n</code></pre><h1 id=\"利用jedis测试java连接redis\"><a href=\"#利用jedis测试java连接redis\" class=\"headerlink\" title=\"利用jedis测试java连接redis\"></a>利用jedis测试java连接redis</h1><pre><code>//pom.xml中添加\n&lt;dependency&gt;\n    &lt;groupId&gt;redis.clients&lt;groupId&gt;\n    &lt;artifactId&gt;jedis&lt;artifactId&gt;\n    &lt;version&amp;gt;2.9.0&lt;version&gt;\n&lt;dependency&gt;\n</code></pre><p>测试代码：<br>    package com.redis.demo;</p>\n<pre><code>import redis.clients.jedis.Jedis;\n\npublic class TestRedis {\n    public static void main(String[] args) {\n        //连接本地的 Redis 服务\n        Jedis jedis = new Jedis(&quot;192.168.43.163&quot;,6379);\n        System.out.println(&quot;连接成功&quot;);\n        //查看服务是否运行\n        System.out.println(&quot;服务正在运行: &quot;+jedis.ping());\n    }\n}\n</code></pre><p>运行时报异常：  </p>\n<pre><code>Exception in thread &quot;main&quot; redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &apos;CONFIG SET protected-mode no&apos; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &apos;no&apos;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &apos;--protected-mode no&apos; option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.\n</code></pre><p>此时需要修改配置文件redis.conf，修改如下<br>    1.注释掉bind</p>\n<pre><code>#bind 127.0.0.1\n2.protected-mode yes\n改为\nprotected-mode no\n重新启动redis即可\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h1><pre><code>[root@linxu ~]# wget http://download.redis.io/releases/redis-4.0.6.tar.gz\n[root@linxu ~]# tar xzf redis-4.0.6.tar.gz \n[root@linxu ~]# mkdir /usr/local/redis\n[root@linxu ~]# mv redis-4.0.6 /usr/local/redis\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6  \n[root@linxu redis-4.0.6]# make\n[root@linxu redis]# cd src\n[root@linxu src]# ./redis-server  #运行 \n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n</code></pre><h1 id=\"测试redis\"><a href=\"#测试redis\" class=\"headerlink\" title=\"测试redis\"></a>测试redis</h1><pre><code>第一个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-server redis.conf  #使用指定配置文件运行\n第二个窗口:\n[root@linxu ~]# cd /usr/local/redis/redis-4.0.6/src\n[root@linxu src]# ./redis-cli\n127.0.0.1:6379&gt;set test hahaah  \nOK\n127.0.0.1:6379&gt;get test\n&quot;hahaah&quot;\n</code></pre><h1 id=\"利用jedis测试java连接redis\"><a href=\"#利用jedis测试java连接redis\" class=\"headerlink\" title=\"利用jedis测试java连接redis\"></a>利用jedis测试java连接redis</h1><pre><code>//pom.xml中添加\n&lt;dependency&gt;\n    &lt;groupId&gt;redis.clients&lt;groupId&gt;\n    &lt;artifactId&gt;jedis&lt;artifactId&gt;\n    &lt;version&amp;gt;2.9.0&lt;version&gt;\n&lt;dependency&gt;\n</code></pre><p>测试代码：<br>    package com.redis.demo;</p>\n<pre><code>import redis.clients.jedis.Jedis;\n\npublic class TestRedis {\n    public static void main(String[] args) {\n        //连接本地的 Redis 服务\n        Jedis jedis = new Jedis(&quot;192.168.43.163&quot;,6379);\n        System.out.println(&quot;连接成功&quot;);\n        //查看服务是否运行\n        System.out.println(&quot;服务正在运行: &quot;+jedis.ping());\n    }\n}\n</code></pre><p>运行时报异常：  </p>\n<pre><code>Exception in thread &quot;main&quot; redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command &apos;CONFIG SET protected-mode no&apos; from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to &apos;no&apos;, and then restarting the server. 3) If you started the server manually just for testing, restart it with the &apos;--protected-mode no&apos; option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.\n</code></pre><p>此时需要修改配置文件redis.conf，修改如下<br>    1.注释掉bind</p>\n<pre><code>#bind 127.0.0.1\n2.protected-mode yes\n改为\nprotected-mode no\n重新启动redis即可\n</code></pre>"},{"title":" Redis集群搭建","id":"108","date":"2018-01-26T06:36:50.000Z","_content":"\nredis安装请参考：\n\nhttp://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\n\n1.单台机器redis集群搭建  \n\t\n\t[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n\t[root@linxu ~]# cd /usr/local/redis-cluster    \n\t[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n\t[root@linxu redis-cluster]# mkdir bin\n\t[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n\t[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n\t[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n\t[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n\t[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n\t[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\n\tport 9001（每个节点的端口号）\n\tdaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;号强制后台运行)\n\tbind 192.168.43.163（绑定当前机器 IP）\n\tdir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\n\tpidfile /var/run/redis_9001.pid（pid 9001和port要对应）\n\tcluster-enabled yes（启动集群模式）\n\tcluster-config-file nodes-9001.conf（9001和port要对应）\n\tcluster-node-timeout 15000\n\tappendonly yes(是否开启AOF，默认关闭no)\n\n\tPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n\t[root@linxu bin]# cd /usr/local/redis-cluster/bin \n\t[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n\t[root@linxu bin]# ./redis-server  ../9002/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9003/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9004/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9005/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9006/redis.conf\n\t[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n\t[root@linxu bin]# cd  #返回根目录\n\t[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n\t[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n\t[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n\t[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n\t[root@linxu ruby-2.5.0]# ./configure\n\t[root@linxu ruby-2.5.0]# make\n\t[root@linxu ruby-2.5.0]# make install\n\t[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n\t[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n\t[root@linxu ~]# gem install redis\n\n\tPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n    [root@linxu ~]# yum install curl  #安装curl\n    [root@linxu ~]# curl -L get.rvm.io | bash -s stable \n    如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n    [root@linxu ~]#  source /etc/profile.d/rvm.sh\n    此时再执行[root@linxu ~]# gem install redis即可\n\n\t[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n\t[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n\t192.168.43.216:9001> set name da\n\t>Redirected to slot [5798] located at 192.168.43.216:9002\n\tOK\n\n\tPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002\n\n2.不同机器搭建redis集群\n此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点\n第一台  192.168.43.216 节点 10001 10002 10003\n第二台  192.168.43.163 节点 10004 10005 10006\n将六个节点全部启动  \n\n\t[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动\n启动后创建集群  \n\n\t./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n\t[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n\t192.168.43.216:10001> set a 1\n\t>Redirected to slot [15495] located at 192.168.43.163:10005\n\tOK","source":"_posts/redis集群.md","raw":"---\ntitle: \" Redis集群搭建\"\nid: 108\ncategories:\n  - Redis\ndate: 2018-01-26 14:36:50\ntags:\n---\n\nredis安装请参考：\n\nhttp://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\n\n1.单台机器redis集群搭建  \n\t\n\t[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n\t[root@linxu ~]# cd /usr/local/redis-cluster    \n\t[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n\t[root@linxu redis-cluster]# mkdir bin\n\t[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n\t[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n\t[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n\t[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n\t[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n\t[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\n\tport 9001（每个节点的端口号）\n\tdaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;号强制后台运行)\n\tbind 192.168.43.163（绑定当前机器 IP）\n\tdir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\n\tpidfile /var/run/redis_9001.pid（pid 9001和port要对应）\n\tcluster-enabled yes（启动集群模式）\n\tcluster-config-file nodes-9001.conf（9001和port要对应）\n\tcluster-node-timeout 15000\n\tappendonly yes(是否开启AOF，默认关闭no)\n\n\tPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n\t[root@linxu bin]# cd /usr/local/redis-cluster/bin \n\t[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n\t[root@linxu bin]# ./redis-server  ../9002/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9003/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9004/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9005/redis.conf\n\t[root@linxu bin]# ./redis-server  ../9006/redis.conf\n\t[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n\t[root@linxu bin]# cd  #返回根目录\n\t[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n\t[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n\t[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n\t[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n\t[root@linxu ruby-2.5.0]# ./configure\n\t[root@linxu ruby-2.5.0]# make\n\t[root@linxu ruby-2.5.0]# make install\n\t[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n\t[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n\t[root@linxu ~]# gem install redis\n\n\tPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n    [root@linxu ~]# yum install curl  #安装curl\n    [root@linxu ~]# curl -L get.rvm.io | bash -s stable \n    如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n    [root@linxu ~]#  source /etc/profile.d/rvm.sh\n    此时再执行[root@linxu ~]# gem install redis即可\n\n\t[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n\t[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n\t192.168.43.216:9001> set name da\n\t>Redirected to slot [5798] located at 192.168.43.216:9002\n\tOK\n\n\tPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002\n\n2.不同机器搭建redis集群\n此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点\n第一台  192.168.43.216 节点 10001 10002 10003\n第二台  192.168.43.163 节点 10004 10005 10006\n将六个节点全部启动  \n\n\t[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动\n启动后创建集群  \n\n\t./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n\t[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n\t192.168.43.216:10001> set a 1\n\t>Redirected to slot [15495] located at 192.168.43.163:10005\n\tOK","slug":"redis集群","published":1,"updated":"2018-09-04T03:24:50.494Z","_id":"cjln5izlm000t88gp1xbzotpn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>redis安装请参考：</p>\n<p><a href=\"http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\">http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/</a></p>\n<p>1.单台机器redis集群搭建  </p>\n<pre><code>[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n[root@linxu ~]# cd /usr/local/redis-cluster    \n[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n[root@linxu redis-cluster]# mkdir bin\n[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\nport 9001（每个节点的端口号）\ndaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;amp;号强制后台运行)\nbind 192.168.43.163（绑定当前机器 IP）\ndir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\npidfile /var/run/redis_9001.pid（pid 9001和port要对应）\ncluster-enabled yes（启动集群模式）\ncluster-config-file nodes-9001.conf（9001和port要对应）\ncluster-node-timeout 15000\nappendonly yes(是否开启AOF，默认关闭no)\n\nPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n[root@linxu bin]# cd /usr/local/redis-cluster/bin \n[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n[root@linxu bin]# ./redis-server  ../9002/redis.conf\n[root@linxu bin]# ./redis-server  ../9003/redis.conf\n[root@linxu bin]# ./redis-server  ../9004/redis.conf\n[root@linxu bin]# ./redis-server  ../9005/redis.conf\n[root@linxu bin]# ./redis-server  ../9006/redis.conf\n[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n[root@linxu bin]# cd  #返回根目录\n[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n[root@linxu ruby-2.5.0]# ./configure\n[root@linxu ruby-2.5.0]# make\n[root@linxu ruby-2.5.0]# make install\n[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n[root@linxu ~]# gem install redis\n\nPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n[root@linxu ~]# yum install curl  #安装curl\n[root@linxu ~]# curl -L get.rvm.io | bash -s stable \n如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n[root@linxu ~]#  source /etc/profile.d/rvm.sh\n此时再执行[root@linxu ~]# gem install redis即可\n\n[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n192.168.43.216:9001&gt; set name da\n&gt;Redirected to slot [5798] located at 192.168.43.216:9002\nOK\n\nPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002\n</code></pre><p>2.不同机器搭建redis集群<br>此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点<br>第一台  192.168.43.216 节点 10001 10002 10003<br>第二台  192.168.43.163 节点 10004 10005 10006<br>将六个节点全部启动  </p>\n<pre><code>[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动\n</code></pre><p>启动后创建集群  </p>\n<pre><code>./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n192.168.43.216:10001&gt; set a 1\n&gt;Redirected to slot [15495] located at 192.168.43.163:10005\nOK\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>redis安装请参考：</p>\n<p><a href=\"http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/\">http://www.reallinxu.com/2018/01/24/redis%E5%85%A5%E9%97%A8/</a></p>\n<p>1.单台机器redis集群搭建  </p>\n<pre><code>[root@linxu ~]# mkdir /usr/local/redis-cluster #创建集群目录\n[root@linxu ~]# cd /usr/local/redis-cluster    \n[root@linxu redis-cluster]# mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data  #创建六个节点目录\n[root@linxu redis-cluster]# mkdir bin\n[root@linxu bin]# cd /usr/local/redis/redis-4.0.6/src   #redis安装目录下src\n[root@linxu src]# cp * /usr/local/redis-cluster/bin  #将redis安装目录src文件copy到bin中\n[root@linxu redis-4.0.6]# cd /usr/local/redis/redis-4.0.6   #redis安装目录\n[root@linxu redis-4.0.6]# cp * /usr/local/redis-cluster/9001   #其他9002-9006同样操作\n[root@linxu 9001]# cd /usr/local/redis-cluster/9001            #先修改9001，其他几台需要同样操作\n[root@linxu redis-4.0.6]# vi redis.conf                        #修改配置文件\nport 9001（每个节点的端口号）\ndaemonize yes(修改daemonize为yes，即默认以后台程序方式运行，效果同使用&amp;amp;号强制后台运行)\nbind 192.168.43.163（绑定当前机器 IP）\ndir /usr/local/redis-cluster/9001/data/（数据文件存放位置）\npidfile /var/run/redis_9001.pid（pid 9001和port要对应）\ncluster-enabled yes（启动集群模式）\ncluster-config-file nodes-9001.conf（9001和port要对应）\ncluster-node-timeout 15000\nappendonly yes(是否开启AOF，默认关闭no)\n\nPS:9002-9006同样修改，只是端口号不同，此处省略，可以将9001的redis.conf拷贝到所有目录，通过vi的:%s/9001/9002替换(此处9001替换为9002)，共四处修改\n\n[root@linxu bin]# cd /usr/local/redis-cluster/bin \n[root@linxu bin]# ./redis-server  ../9001/redis.conf  #启动六个节点\n[root@linxu bin]# ./redis-server  ../9002/redis.conf\n[root@linxu bin]# ./redis-server  ../9003/redis.conf\n[root@linxu bin]# ./redis-server  ../9004/redis.conf\n[root@linxu bin]# ./redis-server  ../9005/redis.conf\n[root@linxu bin]# ./redis-server  ../9006/redis.conf\n[root@linxu bin]# ps -ef|grep redis  #查看是否启动成功（成功有六个redis进程）\n[root@linxu bin]# cd  #返回根目录\n[root@linxu ~]# wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz #下载rubby，yum下载为2.0.0版本，redis支持版本需大于2.2.2，此处为官网下载\n[root@linxu ~]# tar zxvf ruby-2.5.0.tar.gz \n[root@linxu ~]# mv ruby-2.5.0 /usr/local/ruby/\n[root@linxu ~]# cd /usr/local/ruby/ruby-2.5.0\n[root@linxu ruby-2.5.0]# ./configure\n[root@linxu ruby-2.5.0]# make\n[root@linxu ruby-2.5.0]# make install\n[root@linxu ruby-2.5.0]# ruby -v   #查看版本\n[root@linxu ruby-2.5.0]# yum install rubygems  #安装rubygems\n[root@linxu ~]# gem install redis\n\nPS：此处如果先通过yum安装ruby版本低于2.2.2会报错，可以移除旧版本，再安装新版本,再安装rvm进行，步骤如下\n[root@linxu ~]# yum install curl  #安装curl\n[root@linxu ~]# curl -L get.rvm.io | bash -s stable \n如果执行无法完成，替换为\\curl -sSL https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash\n[root@linxu ~]#  source /etc/profile.d/rvm.sh\n此时再执行[root@linxu ~]# gem install redis即可\n\n[root@linxu bin]# ./redis-trib.rb create --replicas 1 192.168.43.216:9001 192.168.43.216:9002 192.168.43.216:9003 192.168.43.216:9004 192.168.43.216:9005 192.168.43.216:9006  #搭建集群\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 9001  #验证\n192.168.43.216:9001&gt; set name da\n&gt;Redirected to slot [5798] located at 192.168.43.216:9002\nOK\n\nPS：此处需要加参数-c，否则不会自动跳转到分配的节点，会报错(error) MOVED 5798 192.168.43.216:9002\n</code></pre><p>2.不同机器搭建redis集群<br>此处使用两台机器，通过单台机器一样的方法在每台机器各创建三个节点<br>第一台  192.168.43.216 节点 10001 10002 10003<br>第二台  192.168.43.163 节点 10004 10005 10006<br>将六个节点全部启动  </p>\n<pre><code>[root@linxu bin]# ./redis-server ../10001/redis.conf  #其他节点同样启动\n</code></pre><p>启动后创建集群  </p>\n<pre><code>./redis-trib.rb  create  --replicas  1   192.168.43.163:10004 192.168.43.163:10005 192.168.43.163:10006 192.168.43.216:10001 192.168.43.216:10002 192.168.43.216:10003\n[root@linxu bin]# ./redis-cli  -c -h 192.168.43.216 -p 10001  #验证\n192.168.43.216:10001&gt; set a 1\n&gt;Redirected to slot [15495] located at 192.168.43.163:10005\nOK\n</code></pre>"},{"title":" WordPress从Apache迁移到nginx","id":"130","date":"2018-01-29T07:02:48.000Z","_content":"\n1.停掉httpd当前服务，禁用重启  \n\n\tservice httpd stop\n\t#开机重启后，apache服务不再启动p \n\tchkconfig httpd off\n2.安装nginx  \n\n\tyum -y install nginx\n3.安装php-fpm  \n\n\tyum install php-fpm\n\t/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\n\tchkconfig php-fpm on\n4.编辑nginx配置文件  \n\n\tvi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n\t#转发给wordpress网站\n\tserver {\n    \tlisten 80;\n    \tserver_name www.reallinxu.com;        \n    \taccess_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    \terror_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    \tlocation / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    \t}\n\n    \terror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    \tlocation = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \t# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    \tlocation ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    \t}\n    \tlocation ~ /\\.ht {\n             deny all;\n    \t}\n\n    \trewrite /wp-admin$ $scheme://$host$uri/ permanent;\n \t}\n\n5.新建日志目录并赋权限  \n\n\tmkdir -p /var/log/nginx/aaa\n\tchown -R nginx:adm /var/log/nginx/aaa\n6.安装最新的php-mysql  \n\n\tyum update\n\tyum install php-mysql\n7.启动nginx  \n\n\tservice nginx start\n8.此时访问可能会出现数据库错误  \n\n\tvi wp-config.php\n\t#修改以下部分\n\tdefine( 'WP_DEBUG', true );\n再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下  \n\n\tdefine( 'DB_HOST', '127.0.0.1' );   #原为localhost\n9.修改线程数，优化内存  \n\n\tvi /etc/php-fpm.d/www.conf   #修改如下\n\t最大线程数\n\tpm.max_children = 3\n\t初始线程数\n\tpm.start_servers = 1\n\t最小空余线程数\n\tpm.min_spare_servers = 1\n\t最大空余线程数\n\tpm.max_spare_servers = 1\n\tphp_admin内存最大限制\n\tphp_admin_value[memory_limit] = 128M\n","source":"_posts/wordpress-nginx.md","raw":"---\ntitle: \" WordPress从Apache迁移到nginx\"\nid: 130\ncategories:\n  - WordPress\ndate: 2018-01-29 15:02:48\ntags:\n---\n\n1.停掉httpd当前服务，禁用重启  \n\n\tservice httpd stop\n\t#开机重启后，apache服务不再启动p \n\tchkconfig httpd off\n2.安装nginx  \n\n\tyum -y install nginx\n3.安装php-fpm  \n\n\tyum install php-fpm\n\t/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\n\tchkconfig php-fpm on\n4.编辑nginx配置文件  \n\n\tvi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n\t#转发给wordpress网站\n\tserver {\n    \tlisten 80;\n    \tserver_name www.reallinxu.com;        \n    \taccess_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    \terror_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    \tlocation / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    \t}\n\n    \terror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    \tlocation = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \t# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    \tlocation ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    \t}\n    \tlocation ~ /\\.ht {\n             deny all;\n    \t}\n\n    \trewrite /wp-admin$ $scheme://$host$uri/ permanent;\n \t}\n\n5.新建日志目录并赋权限  \n\n\tmkdir -p /var/log/nginx/aaa\n\tchown -R nginx:adm /var/log/nginx/aaa\n6.安装最新的php-mysql  \n\n\tyum update\n\tyum install php-mysql\n7.启动nginx  \n\n\tservice nginx start\n8.此时访问可能会出现数据库错误  \n\n\tvi wp-config.php\n\t#修改以下部分\n\tdefine( 'WP_DEBUG', true );\n再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下  \n\n\tdefine( 'DB_HOST', '127.0.0.1' );   #原为localhost\n9.修改线程数，优化内存  \n\n\tvi /etc/php-fpm.d/www.conf   #修改如下\n\t最大线程数\n\tpm.max_children = 3\n\t初始线程数\n\tpm.start_servers = 1\n\t最小空余线程数\n\tpm.min_spare_servers = 1\n\t最大空余线程数\n\tpm.max_spare_servers = 1\n\tphp_admin内存最大限制\n\tphp_admin_value[memory_limit] = 128M\n","slug":"wordpress-nginx","published":1,"updated":"2018-09-04T03:28:29.844Z","_id":"cjln5mlh3000z88gpi6m39tz7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.停掉httpd当前服务，禁用重启  </p>\n<pre><code>service httpd stop\n#开机重启后，apache服务不再启动p \nchkconfig httpd off\n</code></pre><p>2.安装nginx  </p>\n<pre><code>yum -y install nginx\n</code></pre><p>3.安装php-fpm  </p>\n<pre><code>yum install php-fpm\n/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\nchkconfig php-fpm on\n</code></pre><p>4.编辑nginx配置文件  </p>\n<pre><code>vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n         root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n    }\n    location ~ /\\.ht {\n         deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }\n</code></pre><p>5.新建日志目录并赋权限  </p>\n<pre><code>mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm /var/log/nginx/aaa\n</code></pre><p>6.安装最新的php-mysql  </p>\n<pre><code>yum update\nyum install php-mysql\n</code></pre><p>7.启动nginx  </p>\n<pre><code>service nginx start\n</code></pre><p>8.此时访问可能会出现数据库错误  </p>\n<pre><code>vi wp-config.php\n#修改以下部分\ndefine( &apos;WP_DEBUG&apos;, true );\n</code></pre><p>再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下  </p>\n<pre><code>define( &apos;DB_HOST&apos;, &apos;127.0.0.1&apos; );   #原为localhost\n</code></pre><p>9.修改线程数，优化内存  </p>\n<pre><code>vi /etc/php-fpm.d/www.conf   #修改如下\n最大线程数\npm.max_children = 3\n初始线程数\npm.start_servers = 1\n最小空余线程数\npm.min_spare_servers = 1\n最大空余线程数\npm.max_spare_servers = 1\nphp_admin内存最大限制\nphp_admin_value[memory_limit] = 128M\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>1.停掉httpd当前服务，禁用重启  </p>\n<pre><code>service httpd stop\n#开机重启后，apache服务不再启动p \nchkconfig httpd off\n</code></pre><p>2.安装nginx  </p>\n<pre><code>yum -y install nginx\n</code></pre><p>3.安装php-fpm  </p>\n<pre><code>yum install php-fpm\n/etc/init.d/php-fpm start  #该目录下没有执行文件，采用直接下一步设置开机自启\nchkconfig php-fpm on\n</code></pre><p>4.编辑nginx配置文件  </p>\n<pre><code>vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n         root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n    }\n    location ~ /\\.ht {\n         deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }\n</code></pre><p>5.新建日志目录并赋权限  </p>\n<pre><code>mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm /var/log/nginx/aaa\n</code></pre><p>6.安装最新的php-mysql  </p>\n<pre><code>yum update\nyum install php-mysql\n</code></pre><p>7.启动nginx  </p>\n<pre><code>service nginx start\n</code></pre><p>8.此时访问可能会出现数据库错误  </p>\n<pre><code>vi wp-config.php\n#修改以下部分\ndefine( &apos;WP_DEBUG&apos;, true );\n</code></pre><p>再进行访问时，会出现具体错误，此时发现是数据库连接错误，本人是需要修改配置文件如下  </p>\n<pre><code>define( &apos;DB_HOST&apos;, &apos;127.0.0.1&apos; );   #原为localhost\n</code></pre><p>9.修改线程数，优化内存  </p>\n<pre><code>vi /etc/php-fpm.d/www.conf   #修改如下\n最大线程数\npm.max_children = 3\n初始线程数\npm.start_servers = 1\n最小空余线程数\npm.min_spare_servers = 1\n最大空余线程数\npm.max_spare_servers = 1\nphp_admin内存最大限制\nphp_admin_value[memory_limit] = 128M\n</code></pre>"},{"title":"WordPress搭建","id":"62","date":"2017-12-22T06:17:01.000Z","_content":"\n具体参考\n\nhttp://www.bandwagonhost.net/401.html\n\nhttp://www.bandwagonhost.net/403.html","source":"_posts/WordPress.md","raw":"---\ntitle: \"WordPress搭建\"\nid: 62\ncategories:\n  - WordPress\ndate: 2017-12-22 14:17:01\ntags:\n---\n\n具体参考\n\nhttp://www.bandwagonhost.net/401.html\n\nhttp://www.bandwagonhost.net/403.html","slug":"WordPress","published":1,"updated":"2018-09-04T03:28:13.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjloflzco0000v0gphevkgptq","content":"<p>具体参考</p>\n<p><a href=\"http://www.bandwagonhost.net/401.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/401.html</a></p>\n<p><a href=\"http://www.bandwagonhost.net/403.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/403.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>具体参考</p>\n<p><a href=\"http://www.bandwagonhost.net/401.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/401.html</a></p>\n<p><a href=\"http://www.bandwagonhost.net/403.html\" target=\"_blank\" rel=\"noopener\">http://www.bandwagonhost.net/403.html</a></p>\n"},{"title":"SpringBoot小知识点","id":"62","date":"2018-07-22T06:17:01.000Z","_content":"\n# Spring-boot 小知识点 #\n\n## 注解 ##\n\n\n## Bean ##\n+ MappingJackson2HttpMessageConverter\n  Spring Boot底层通过HttpMessageConverters依靠Jackson库将Java实体类输出为JSON格式。当有多个转换器可用时，根据消息对象类型和需要的内容类型选择最适合的转换器使用。  \n\n  ![avatar](/imgs/MessageConverter.png)\n","source":"_posts/springboot-notes.md","raw":"---\ntitle: \"SpringBoot小知识点\"\nid: 62\ncategories:\n  - WordPress\ndate: 2018-07-22 14:17:01\ntags:\n---\n\n# Spring-boot 小知识点 #\n\n## 注解 ##\n\n\n## Bean ##\n+ MappingJackson2HttpMessageConverter\n  Spring Boot底层通过HttpMessageConverters依靠Jackson库将Java实体类输出为JSON格式。当有多个转换器可用时，根据消息对象类型和需要的内容类型选择最适合的转换器使用。  \n\n  ![avatar](/imgs/MessageConverter.png)\n","slug":"springboot-notes","published":1,"updated":"2018-09-03T03:05:21.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjloflzd30001v0gpq1ny2lce","content":"<h1 id=\"Spring-boot-小知识点\"><a href=\"#Spring-boot-小知识点\" class=\"headerlink\" title=\"Spring-boot 小知识点\"></a>Spring-boot 小知识点</h1><h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h2><ul>\n<li><p>MappingJackson2HttpMessageConverter<br>Spring Boot底层通过HttpMessageConverters依靠Jackson库将Java实体类输出为JSON格式。当有多个转换器可用时，根据消息对象类型和需要的内容类型选择最适合的转换器使用。  </p>\n<p><img src=\"/imgs/MessageConverter.png\" alt=\"avatar\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-boot-小知识点\"><a href=\"#Spring-boot-小知识点\" class=\"headerlink\" title=\"Spring-boot 小知识点\"></a>Spring-boot 小知识点</h1><h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h2><ul>\n<li><p>MappingJackson2HttpMessageConverter<br>Spring Boot底层通过HttpMessageConverters依靠Jackson库将Java实体类输出为JSON格式。当有多个转换器可用时，根据消息对象类型和需要的内容类型选择最适合的转换器使用。  </p>\n<p><img src=\"/imgs/MessageConverter.png\" alt=\"avatar\"></p>\n</li>\n</ul>\n"},{"title":" Spring-batch restart重拉机制","id":"64","date":"2017-12-22T06:27:28.000Z","_content":"\n对于Spring-batch中的Reader-processor-writer模式，例如   \n\n\t<batch:step id=\"test-01\">\n\t\t<batch:tasklet>\n\t\t\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\">\n\t\t\t\t<batch:writer>\n\t\t\t\t\t<bean class=\"com.test.TestW\">\n\t\t\t\t<batch:writer>\n\t\t\t<batch:chunk>\n\t\t<batch:tasklet>\n\t<batch:step>\n如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。\n\n如果此时将  \n\n\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\">\n改为  \n\n\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"2\">\n这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。\n\n以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。","source":"_posts/springbatch.md","raw":"---\ntitle: \" Spring-batch restart重拉机制\"\nid: 64\ncategories:\n  - Spring-batch\ndate: 2017-12-22 14:27:28\ntags:\n---\n\n对于Spring-batch中的Reader-processor-writer模式，例如   \n\n\t<batch:step id=\"test-01\">\n\t\t<batch:tasklet>\n\t\t\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\">\n\t\t\t\t<batch:writer>\n\t\t\t\t\t<bean class=\"com.test.TestW\">\n\t\t\t\t<batch:writer>\n\t\t\t<batch:chunk>\n\t\t<batch:tasklet>\n\t<batch:step>\n如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。\n\n如果此时将  \n\n\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"1\">\n改为  \n\n\t<batch:chunk reader=\"testR\" processor=\"testP\" commit-interval=\"2\">\n这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。\n\n以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。","slug":"springbatch","published":1,"updated":"2018-09-04T03:27:26.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjloflzd30002v0gpu227dgn9","content":"<p>对于Spring-batch中的Reader-processor-writer模式，例如   </p>\n<pre><code>&lt;batch:step id=&quot;test-01&quot;&gt;\n    &lt;batch:tasklet&gt;\n        &lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;1&quot;&gt;\n            &lt;batch:writer&gt;\n                &lt;bean class=&quot;com.test.TestW&quot;&gt;\n            &lt;batch:writer&gt;\n        &lt;batch:chunk&gt;\n    &lt;batch:tasklet&gt;\n&lt;batch:step&gt;\n</code></pre><p>如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。</p>\n<p>如果此时将  </p>\n<pre><code>&lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;1&quot;&gt;\n</code></pre><p>改为  </p>\n<pre><code>&lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;2&quot;&gt;\n</code></pre><p>这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。</p>\n<p>以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于Spring-batch中的Reader-processor-writer模式，例如   </p>\n<pre><code>&lt;batch:step id=&quot;test-01&quot;&gt;\n    &lt;batch:tasklet&gt;\n        &lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;1&quot;&gt;\n            &lt;batch:writer&gt;\n                &lt;bean class=&quot;com.test.TestW&quot;&gt;\n            &lt;batch:writer&gt;\n        &lt;batch:chunk&gt;\n    &lt;batch:tasklet&gt;\n&lt;batch:step&gt;\n</code></pre><p>如果reader读取为两条数据，第二条数据异常断批，由于commint-interval为1，第一条会执行processor和writer，且成功commit，第二条Processor会回滚，writer不会执行。当restart时，会从第二条数据重新处理，第一条已处理不会再重复处理。</p>\n<p>如果此时将  </p>\n<pre><code>&lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;1&quot;&gt;\n</code></pre><p>改为  </p>\n<pre><code>&lt;batch:chunk reader=&quot;testR&quot; processor=&quot;testP&quot; commit-interval=&quot;2&quot;&gt;\n</code></pre><p>这时，reader读取两条数据，第二条数据异常断批，则两条数据都会回滚掉，restart时会重新执行。</p>\n<p>以上，目前已验证Reader-processor-writer模式重拉不会导致数据重复处理。</p>\n"},{"title":" 网站同时支持http和https访问","id":"133","date":"2018-01-29T07:08:53.000Z","_content":"\n1.在腾讯云申请SSL证书https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\n\n2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中\n\n3.修改nginx配置文件如下：  \n\n\tvi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n\t#转发给wordpress网站\n\tserver {\n    \tlisten 80;\n    \tlisten 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    \tserver_name www.reallinxu.com;        \n    \taccess_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    \terror_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    \t#ssl on;    #此处注释\n    \tssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    \tssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    \tlocation / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    \t}\n\n    \terror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    \tlocation = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \t# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    \tlocation ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    \t}\n    \tlocation ~ /\\.ht {\n             deny all;\n    \t}\n\n    \trewrite /wp-admin$ $scheme://$host$uri/ permanent;\n \t}\n\n4.重启nginx即可。","source":"_posts/wordpress-https.md","raw":"---\ntitle: \" 网站同时支持http和https访问\"\nid: 133\ncategories:\n  - WordPress\ndate: 2018-01-29 15:08:53\ntags:\n---\n\n1.在腾讯云申请SSL证书https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\n\n2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中\n\n3.修改nginx配置文件如下：  \n\n\tvi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n\t#转发给wordpress网站\n\tserver {\n    \tlisten 80;\n    \tlisten 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    \tserver_name www.reallinxu.com;        \n    \taccess_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    \terror_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    \t#ssl on;    #此处注释\n    \tssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    \tssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    \tlocation / {\n             root /data/www/www.reallinxu.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    \t}\n\n    \terror_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    \tlocation = /404.html {            #这是一个典型的location\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n             root /data/www/www.reallinxu.com;\n    \t}\n\n    \t# 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    \tlocation ~ [^/]\\.php(/|$) {\n             root /data/www/www.reallinxu.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    \t}\n    \tlocation ~ /\\.ht {\n             deny all;\n    \t}\n\n    \trewrite /wp-admin$ $scheme://$host$uri/ permanent;\n \t}\n\n4.重启nginx即可。","slug":"wordpress-https","published":1,"updated":"2018-09-04T03:22:18.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjloflzd30003v0gp6it6yqsd","content":"<p>1.在腾讯云申请SSL证书<a href=\"https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\" target=\"_blank\" rel=\"noopener\">https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。</a></p>\n<p>2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中</p>\n<p>3.修改nginx配置文件如下：  </p>\n<pre><code>vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    listen 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    #ssl on;    #此处注释\n    ssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    ssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n         root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n    }\n    location ~ /\\.ht {\n         deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }\n</code></pre><p>4.重启nginx即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.在腾讯云申请SSL证书<a href=\"https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。\" target=\"_blank\" rel=\"noopener\">https://buy.cloud.tencent.com/ssl?fromSource=ssl，此时选择了个人配置DNS，具体使用方法请参照官网说明。</a></p>\n<p>2.证书申请成功后，下载证书上传到服务器，将crt和key两个文件放到/usr/local/httpscrt文件夹中</p>\n<p>3.修改nginx配置文件如下：  </p>\n<pre><code>vi /etc/nginx/conf.d/virtual.conf     #没有该文件，直接新建，内容如下\n#转发给wordpress网站\nserver {\n    listen 80;\n    listen 443 ssl;     #此处监听443端口，https默认443，下面注释ssl on同时支持http和https\n    server_name www.reallinxu.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n    #ssl on;    #此处注释\n    ssl_certificate /usr/local/httpscrt/1_www.reallinxu.com_bundle.crt;  #证书位置\n    ssl_certificate_key /usr/local/httpscrt/2_www.reallinxu.com.key;   #key位置\n\n    location / {\n         root /data/www/www.reallinxu.com;\n         index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n         try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n         root /data/www/www.reallinxu.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n         root /data/www/www.reallinxu.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n         root /data/www/www.reallinxu.com;\n         fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n         if (!-f $document_root$fastcgi_script_name) {\n                 return 404;\n         }\n         #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n         fastcgi_pass 127.0.0.1:9000;\n         fastcgi_index index.php;\n         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n         include fastcgi_params;\n    }\n    location ~ /\\.ht {\n         deny all;\n    }\n\n    rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n }\n</code></pre><p>4.重启nginx即可。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjj41660900074ggp8ofnjapc","category_id":"cjj41660p000h4ggpkz256cja","_id":"cjj416613000z4ggpazsps517"},{"post_id":"cjln5a7io000688gpe1trofa3","category_id":"cjj41660v000p4ggp5p3rtawf","_id":"cjln5a7iu000888gpirjx21q9"},{"post_id":"cjln5ccb8000988gp1fdf56wa","category_id":"cjj41661r001o4ggpwdhagjz6","_id":"cjln5ccbo000a88gpp92iu3t9"},{"post_id":"cjln5cvzh000b88gp1l4yx29l","category_id":"cjj41661s001r4ggp5k2fkmj2","_id":"cjln5cvzh000c88gplrfy2plz"},{"post_id":"cjln5dydj000d88gpd5juwk4u","category_id":"cjj41661s001r4ggp5k2fkmj2","_id":"cjln5dydj000f88gpr1fqvove"},{"post_id":"cjln5fynf000m88gp5asw9qzx","category_id":"cjln5fgt4000i88gpy9ukbnki","_id":"cjln5fynf000o88gpqhifqmvz"},{"post_id":"cjln5hgng000r88gpjiiqvjs8","category_id":"cjj41661700134ggp990luerk","_id":"cjln5hgnv000s88gp09mzmelj"},{"post_id":"cjln5izlm000t88gp1xbzotpn","category_id":"cjj41661700134ggp990luerk","_id":"cjln5izlm000u88gpyl0iwuwe"},{"post_id":"cjln5mlh3000z88gpi6m39tz7","category_id":"cjj41661o001h4ggp52fv8lje","_id":"cjln5mlh3001088gpyabo22c5"},{"post_id":"cjln5e5p4000g88gp05xcyxe0","category_id":"cjln5s9rn00005wgp101nbrnb","_id":"cjln5s9ro00015wgpp4bkmfc0"},{"post_id":"cjj41661m001f4ggppnqbeu8m","category_id":"cjln5tmkf00025wgpisfihvex","_id":"cjln5tmkg00035wgpvv39aek6"},{"post_id":"cjln59vcv000388gpn2ubgrnj","category_id":"cjln5tmkf00025wgpisfihvex","_id":"cjln5twxe00045wgpb2j819ob"},{"post_id":"cjj4165zn00014ggp64s9qypa","category_id":"cjj41660p000h4ggpkz256cja","_id":"cjln5upky00065wgpl51ul4n6"},{"post_id":"cjj41660l000f4ggppn70yzsf","category_id":"cjj41660p000h4ggpkz256cja","_id":"cjln5v4b8000a5wgpbk5cn3hi"},{"post_id":"cjj4165zx00034ggpjoyhpj9s","category_id":"cjj41660p000h4ggpkz256cja","_id":"cjln5vgrb000c5wgphtuko5x8"},{"post_id":"cjln37s1q00009ggprtirluiq","category_id":"cjln5wrvy000f5wgpyl67xx73","_id":"cjln5wrvz000g5wgppbn59jlz"},{"post_id":"cjloflzco0000v0gphevkgptq","category_id":"cjj41661o001h4ggp52fv8lje","_id":"cjloflzd30004v0gpw9ropbr4"},{"post_id":"cjloflzd30001v0gpq1ny2lce","category_id":"cjj41661o001h4ggp52fv8lje","_id":"cjloflzd30005v0gpidbwbmh9"},{"post_id":"cjloflzd30002v0gpu227dgn9","category_id":"cjj41661s001t4ggppy0m771q","_id":"cjloflzd30006v0gp5o5x0az9"},{"post_id":"cjloflzd30003v0gp6it6yqsd","category_id":"cjj41661o001h4ggp52fv8lje","_id":"cjloflzd30007v0gpjoee0sqg"}],"PostTag":[{"post_id":"cjj41660900074ggp8ofnjapc","tag_id":"cjj41660q000j4ggphk3nyykh","_id":"cjj41660z000u4ggppl5y3vrv"},{"post_id":"cjj41661m001f4ggppnqbeu8m","tag_id":"cjj41661p001j4ggpk7mq3075","_id":"cjj41661q001n4ggp8qo0lhsb"},{"post_id":"cjln37s1q00009ggprtirluiq","tag_id":"cjln37s2d00039ggpxsmbjtxr","_id":"cjln37s2g00059ggprxjn6kjn"},{"post_id":"cjln59vcv000388gpn2ubgrnj","tag_id":"cjln59r9b000088gpdd1gxes8","_id":"cjln59vcv000488gp9b5y326w"},{"post_id":"cjln5a7io000688gpe1trofa3","tag_id":"cjj41660v000q4ggpe29ibvfa","_id":"cjln5a7iu000788gpgo6jbau9"},{"post_id":"cjln5dydj000d88gpd5juwk4u","tag_id":"cjj41661d00164ggphuhz1jo7","_id":"cjln5dydj000e88gp6wl292ao"},{"post_id":"cjln5fynf000m88gp5asw9qzx","tag_id":"cjln5fgt4000j88gpynprvk1y","_id":"cjln5fynf000n88gphp5yih3d"},{"post_id":"cjj4165zn00014ggp64s9qypa","tag_id":"cjln5urbs00075wgpyblxzc2c","_id":"cjln5urbt00085wgp5boiq41n"},{"post_id":"cjj41660l000f4ggppn70yzsf","tag_id":"cjln5urbs00075wgpyblxzc2c","_id":"cjln5v4b700095wgpuwnsqjrc"},{"post_id":"cjj4165zx00034ggpjoyhpj9s","tag_id":"cjln5urbs00075wgpyblxzc2c","_id":"cjln5vgrb000b5wgppu1mr7qh"}],"Tag":[{"name":"noname","_id":"cjj41660600054ggphzjzcnmn"},{"name":"Docker","_id":"cjj41660q000j4ggphk3nyykh"},{"name":"微信，小程序","_id":"cjj41660v000q4ggpe29ibvfa"},{"name":"CentOS","_id":"cjj41661d00164ggphuhz1jo7"},{"name":"java基础","_id":"cjj41661p001j4ggpk7mq3075"},{"name":"lombok","_id":"cjln37s2d00039ggpxsmbjtxr"},{"name":"essay","_id":"cjln58ikt000440gpb1d1509n"},{"name":"java","_id":"cjln59r9b000088gpdd1gxes8"},{"name":"Essay","_id":"cjln5fgt4000j88gpynprvk1y"},{"name":"docker","_id":"cjln5urbs00075wgpyblxzc2c"}]}}